import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as l}from"./app-Rs4pkfKX.js";const e="/assets/image-20231228143523849-yRvWGYFs.png",p="/assets/image-20231228163150922-B1zwaRPO.png",t="/assets/image-20231228164118656-DqpzCEk4.png",h="/assets/image-20231228165047387-Cvq731Td.png",r="/assets/image-20231228165515906-DGtVkX7w.png",d={};function k(c,s){return l(),a("div",null,s[0]||(s[0]=[n('<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年04月17日12:49:21</td></tr></tbody></table><h2 id="现象" tabindex="-1"><a class="header-anchor" href="#现象"><span>现象</span></a></h2><img src="'+e+'" alt="image-20231228143523849" style="zoom:67%;"><p><strong>现象</strong>：线上某个服务的服务器在准点时间出现 CPU 峰刺，高峰期的峰刺十分明显。</p><p><strong>影响</strong>：如果是相同流量，那么这个峰刺将会导致服务无法缩容。</p><p><strong>简单分析</strong>：观察阿里云监控，峰刺期间会有<strong>大量磁盘读写请求</strong>，其它网<strong>络流入流出数据正常</strong>，TCP连接正常。在某个准点时间是由 top 命令发现是 Java 进程导致 CPU 飙升。</p><h2 id="排查方向" tabindex="-1"><a class="header-anchor" href="#排查方向"><span>排查方向</span></a></h2><p>首先根据经验，CPU 规律性峰刺大部分情况是定时触发的某个操作导致的。排查方向如下：</p><ol><li>观察线上接口请求无异常，在<strong>峰刺时间点的接口请求量没有增加</strong>；</li><li>服务器的 <strong>crontab 定时任务并没有</strong>每小时执行的任务；</li><li><strong>业务定时任务也没有</strong>每小时执行的任务；</li><li>大数据和 PHP 部门，他们也没有每小时定时访问该服务的操作；</li><li>观察<strong>准点时的垃圾收集器，没有异常</strong>情况；</li><li>观察线程栈信息，查找到导致cpu飙升的具体线程，根据线程名字分析出具体业务</li></ol><h2 id="问题排查和分析" tabindex="-1"><a class="header-anchor" href="#问题排查和分析"><span>问题排查和分析</span></a></h2><p>（1）首先查看当前服务器运行的 Java 进程号</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ps -ef | grep java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（2）在整点时刻执行下面两个命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ps -p &#39;你的进程pid&#39; -m -o THREAD,tid,cputime | sort -k 2 -r &gt; threadcpu</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面这个命令是打出整点时刻指定 pid 的进程的线程的 CPU 占用情况，倒序排列</p><blockquote><p>ps. 这个图当时没有使用排序，所以没有排序，现在没法子还原当时的场景了</p></blockquote><img src="'+p+`" alt="image-20231228163150922"><p>第二个命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>jcmd &#39;你的进程pid&#39; Thread.print &gt; threadprint</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>关于怎么查看 jcmd 的一些 command，可以使用<code> jcmd &#39;你的pid&#39; help</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># jcmd 347 help</span></span>
<span class="line"><span>347:</span></span>
<span class="line"><span>The following commands are available:</span></span>
<span class="line"><span>JFR.stop</span></span>
<span class="line"><span>JFR.start</span></span>
<span class="line"><span>JFR.dump</span></span>
<span class="line"><span>JFR.check</span></span>
<span class="line"><span>VM.native_memory</span></span>
<span class="line"><span>VM.check_commercial_features</span></span>
<span class="line"><span>VM.unlock_commercial_features</span></span>
<span class="line"><span>ManagementAgent.stop</span></span>
<span class="line"><span>ManagementAgent.start_local</span></span>
<span class="line"><span>ManagementAgent.start</span></span>
<span class="line"><span>GC.rotate_log</span></span>
<span class="line"><span>Thread.print</span></span>
<span class="line"><span>GC.class_stats</span></span>
<span class="line"><span>GC.class_histogram</span></span>
<span class="line"><span>GC.heap_dump</span></span>
<span class="line"><span>GC.run_finalization</span></span>
<span class="line"><span>GC.run</span></span>
<span class="line"><span>VM.uptime</span></span>
<span class="line"><span>VM.flags</span></span>
<span class="line"><span>VM.system_properties</span></span>
<span class="line"><span>VM.command_line</span></span>
<span class="line"><span>VM.version</span></span>
<span class="line"><span>help</span></span>
<span class="line"><span></span></span>
<span class="line"><span>For more information about a specific command use &#39;help &lt;command&gt;&#39;.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>通过上面的两个命令，我们得到了两个文件，一个是线程 cpu 的使用情况，一个是线程的堆栈信息。</p><ol><li>通过%CPU和 TIME，判断占用的异常线程TID【12817】</li><li>找到TID，转换成16进制【3211】，在java线程栈中找到具体的线程id 【nid=0x3211】（shell 转换方式 <code>printf &#39;%x\\n&#39; 十进制数</code>）</li><li>定位到线程名 log4j-28 的线程；</li><li>每小时一次的峰刺时 log4j2 引起的，观察 log4j 配置文件最近没有更改</li><li>结合每小时一次，看堆栈信息，分析出是 log4j 每小时生成一个日志文件导致的cpu飙升。</li></ol><img src="`+t+'" alt="image-20231228164118656"><h2 id="问题解决" tabindex="-1"><a class="header-anchor" href="#问题解决"><span>问题解决</span></a></h2><h3 id="阶段-1-优化日志打印" tabindex="-1"><a class="header-anchor" href="#阶段-1-优化日志打印"><span>阶段 1 - 优化日志打印</span></a></h3><ol><li><strong>删除部分大日志</strong>；</li><li>观察整点日志压缩，CPU 峰刺有降低，但是依然存在；</li><li>继续观察日志，未找到可以优化大日志；</li></ol><h3 id="阶段-2-脚本压缩日志" tabindex="-1"><a class="header-anchor" href="#阶段-2-脚本压缩日志"><span>阶段 2 - 脚本压缩日志</span></a></h3><p><strong>log4j2 每小时切割日志，但不进行压缩</strong>；</p><img src="'+h+`" alt="image-20231228165047387" style="zoom:100%;"><p><strong>通过脚本限制单个 cpu 使用 10% 性能进行压缩，脚本定时每天凌晨 4 点统一压缩前一天的日志</strong></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">log_path_new</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/your/log/path&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $log_path_new</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ] &amp;&amp; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> || </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">9</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    do</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        log_file</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;info.log.</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">date_hour</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">}\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">}\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-f</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $log_file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ] ; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            cpulimit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --limit=10</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gzip</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $log_file</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        fi</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        echo</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $log_file</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        apilog_file</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;api.log.</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">date_hour</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">}\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">}\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-f</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $apilog_file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ] ; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            cpulimit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --limit=10</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gzip</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $apilog_file</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        fi</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        echo</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $apilog_file</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    done</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化结果" tabindex="-1"><a class="header-anchor" href="#优化结果"><span>优化结果</span></a></h2><p>优化日志打印，和脚本凌晨统一压缩日志后，CPU 已经没有峰刺了。</p><img src="`+r+'" alt="image-20231228165515906" style="zoom:100%;">',34)]))}const m=i(d,[["render",k]]),u=JSON.parse('{"path":"/business_issue_accumulations/001-%E6%9C%8D%E5%8A%A1%E5%99%A8CPU%E9%97%AE%E9%A2%98-%E8%A7%84%E5%BE%8B%E6%80%A7%E5%B3%B0%E5%88%BA.html","title":"001-服务器CPU问题-规律性峰刺","lang":"en-US","frontmatter":{"title":"001-服务器CPU问题-规律性峰刺","description":"现象 image-20231228143523849 现象：线上某个服务的服务器在准点时间出现 CPU 峰刺，高峰期的峰刺十分明显。 影响：如果是相同流量，那么这个峰刺将会导致服务无法缩容。 简单分析：观察阿里云监控，峰刺期间会有大量磁盘读写请求，其它网络流入流出数据正常，TCP连接正常。在某个准点时间是由 top 命令发现是 Java 进程导致 CP...","head":[["meta",{"property":"og:url","content":"https://blog.guosgbin.cn/business_issue_accumulations/001-%E6%9C%8D%E5%8A%A1%E5%99%A8CPU%E9%97%AE%E9%A2%98-%E8%A7%84%E5%BE%8B%E6%80%A7%E5%B3%B0%E5%88%BA.html"}],["meta",{"property":"og:title","content":"001-服务器CPU问题-规律性峰刺"}],["meta",{"property":"og:description","content":"现象 image-20231228143523849 现象：线上某个服务的服务器在准点时间出现 CPU 峰刺，高峰期的峰刺十分明显。 影响：如果是相同流量，那么这个峰刺将会导致服务无法缩容。 简单分析：观察阿里云监控，峰刺期间会有大量磁盘读写请求，其它网络流入流出数据正常，TCP连接正常。在某个准点时间是由 top 命令发现是 Java 进程导致 CP..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-03T07:07:29.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-03T07:07:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"001-服务器CPU问题-规律性峰刺\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-03T07:07:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"超威蓝猫 Dylan Kwok\\",\\"url\\":\\"\\",\\"email\\":\\"guosgbin@163.com\\"}]}"]]},"git":{"createdTime":1743664049000,"updatedTime":1743664049000,"contributors":[{"name":"Dylan Kwok","username":"","email":"guosgbin@163.com","commits":1}]},"readingTime":{"minutes":3.42,"words":1027},"filePathRelative":"business_issue_accumulations/001-服务器CPU问题-规律性峰刺.md","localizedDate":"April 3, 2025","autoDesc":true}');export{m as comp,u as data};
