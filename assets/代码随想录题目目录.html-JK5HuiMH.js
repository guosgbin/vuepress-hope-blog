import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as n,o as a}from"./app-DL4NvJby.js";const i={};function t(s,e){return a(),l("div",null,e[0]||(e[0]=[n(`<h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><ul><li><a href="https://leetcode.cn/problems/binary-search/" target="_blank" rel="noopener noreferrer">704. 二分查找</a></li><li><a href="https://leetcode.cn/problems/search-insert-position/" target="_blank" rel="noopener noreferrer">35. 搜索插入位置</a></li><li><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener noreferrer">34. 在排序数组中查找元素的第一个和最后一个位置</a></li><li><a href="https://leetcode.cn/problems/sqrtx/" target="_blank" rel="noopener noreferrer">69.x 的平方根</a></li><li><a href="https://leetcode.cn/problems/valid-perfect-square/" target="_blank" rel="noopener noreferrer">367.有效的完全平方数</a></li><li><a href="https://leetcode.cn/problems/remove-element/" target="_blank" rel="noopener noreferrer">27. 移除元素</a></li><li><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener noreferrer">26.删除排序数组中的重复项</a></li><li><a href="https://leetcode.cn/problems/move-zeroes/" target="_blank" rel="noopener noreferrer">283.移动零</a></li><li><a href="https://leetcode.cn/problems/backspace-string-compare/" target="_blank" rel="noopener noreferrer">844.比较含退格的字符串</a> 有个双指针的解法比较复杂</li><li><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/" target="_blank" rel="noopener noreferrer">977.有序数组的平方</a></li><li><a href="https://leetcode.cn/problems/spiral-matrix-ii/" target="_blank" rel="noopener noreferrer">59.螺旋矩阵II</a></li><li><a href="https://leetcode.cn/problems/spiral-matrix/" target="_blank" rel="noopener noreferrer">54. 螺旋矩阵</a></li><li><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener noreferrer">34. 在排序数组中查找元素的第一个和最后一个位置</a> 没看懂，再做一遍</li></ul><h2 id="滑动窗口" tabindex="-1"><a class="header-anchor" href="#滑动窗口"><span>滑动窗口</span></a></h2><ul><li><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/" target="_blank" rel="noopener noreferrer">209.长度最小的子数组</a> 滑动窗口</li><li><a href="https://leetcode.cn/problems/fruit-into-baskets/" target="_blank" rel="noopener noreferrer">904. 水果成篮</a> 滑动窗口</li><li><a href="https://leetcode.cn/problems/minimum-window-substring/" target="_blank" rel="noopener noreferrer">76. 最小覆盖子串</a>滑动窗口</li><li><a href="https://leetcode.cn/problems/max-consecutive-ones-iii/" target="_blank" rel="noopener noreferrer">1004. 最大连续1的个数 III</a> 重新做一下</li><li><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener noreferrer">3. 无重复字符的最长子串</a></li><li><a href="https://leetcode.cn/problems/substring-with-concatenation-of-all-words/" target="_blank" rel="noopener noreferrer">30. 串联所有单词的子串</a>难度较高</li><li><a href="https://leetcode.cn/problems/repeated-dna-sequences/" target="_blank" rel="noopener noreferrer">187. 重复的DNA序列</a> 使用滑动窗口做一下，目前用的呆比做法</li></ul><p>最小滑窗模板：给定数组 nums，定义滑窗的左右边界 i, j，求满足某个条件的滑窗的最小长度。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(nums)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    判断[i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j]是否满足条件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 满足条件：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        不断更新结果(注意在while内更新！)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> （最大程度的压缩i，使得滑窗尽可能的小）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最大滑窗模板：给定数组 nums，定义滑窗的左右边界 i, j，求满足某个条件的滑窗的最大长度。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(nums)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    判断[i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j]是否满足条件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 不满足条件：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> （最保守的压缩i，一旦满足条件了就退出压缩i的过程，使得滑窗尽可能的大）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    不断更新结果（注意在while外更新！）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是的，关键的区别在于，最大滑窗是在迭代右移右边界的过程中更新结果，而最小滑窗是在迭代右移左边界的过程中更新结果。因此虽然都是滑窗，但是两者的模板和对应的贪心思路并不一样，而真正理解后就可以在lc.76，lc.904，lc.3, lc.1004写出非常无脑的代码。</p><p>时间复杂度为：O(N), 空间复杂度为：O(N).</p><h2 id="链表" tabindex="-1"><a class="header-anchor" href="#链表"><span>链表</span></a></h2><ul><li><a href="https://leetcode.cn/problems/remove-linked-list-elements/" target="_blank" rel="noopener noreferrer">203.移除链表元素</a></li><li><a href="https://leetcode.cn/problems/design-linked-list/" target="_blank" rel="noopener noreferrer">707.设计链表</a></li><li><a href="https://leetcode.cn/problems/reverse-linked-list/" target="_blank" rel="noopener noreferrer">206.反转链表</a></li><li><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/" target="_blank" rel="noopener noreferrer">24. 两两交换链表中的节点</a></li><li><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener noreferrer">19.删除链表的倒数第N个节点</a></li><li><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/" target="_blank" rel="noopener noreferrer">面试题 02.07. 链表相交</a></li><li><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener noreferrer">160.链表相交</a></li><li><a href="https://leetcode.cn/problems/linked-list-cycle/" target="_blank" rel="noopener noreferrer">141. 环形链表</a></li><li><a href="https://leetcode.cn/problems/linked-list-cycle-ii/" target="_blank" rel="noopener noreferrer">142.环形链表II</a></li><li><a href="https://leetcode.cn/problems/reorder-list/" target="_blank" rel="noopener noreferrer">143. 重排链表</a> 可以再复习下</li><li><a href="https://leetcode.cn/problems/rotate-list/" target="_blank" rel="noopener noreferrer">61. 旋转链表</a> 可以再复习下</li><li><a href="https://leetcode.cn/problems/partition-list/" target="_blank" rel="noopener noreferrer">86. 分隔链表</a></li><li><a href="https://leetcode.cn/problems/split-linked-list-in-parts/" target="_blank" rel="noopener noreferrer">725. 分隔链表</a></li><li><a href="https://leetcode.cn/problems/merge-two-sorted-lists/" target="_blank" rel="noopener noreferrer">21. 合并两个有序链表</a></li><li><a href="https://leetcode.cn/problems/merge-k-sorted-lists/" target="_blank" rel="noopener noreferrer">23. 合并 K 个升序链表</a></li></ul><h2 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表"><span>哈希表</span></a></h2><ul><li><a href="https://leetcode.cn/problems/valid-anagram/" target="_blank" rel="noopener noreferrer">242.有效的字母异位词</a></li><li><a href="">49.字母异位词分组</a></li><li><a href="">438.找到字符串中所有字母异位词</a></li><li><a href="https://leetcode.cn/problems/intersection-of-two-arrays/" target="_blank" rel="noopener noreferrer">349. 两个数组的交集</a></li><li><a href="">350.两个数组的交集 II</a></li><li><a href="https://leetcode.cn/problems/happy-number/" target="_blank" rel="noopener noreferrer">202. 快乐数</a></li><li><a href="https://leetcode.cn/problems/two-sum/" target="_blank" rel="noopener noreferrer">1. 两数之和</a></li><li><a href="https://leetcode.cn/problems/4sum-ii/" target="_blank" rel="noopener noreferrer">454. 四数相加 II</a></li><li><a href="https://leetcode.cn/problems/ransom-note/" target="_blank" rel="noopener noreferrer">383. 赎金信</a></li><li><a href="https://leetcode.cn/problems/3sum/" target="_blank" rel="noopener noreferrer">15. 三数之和</a></li><li><a href="https://leetcode.cn/problems/4sum/" target="_blank" rel="noopener noreferrer">18. 四数之和</a></li></ul><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><ul><li><a href="https://leetcode.cn/problems/reverse-string/" target="_blank" rel="noopener noreferrer">344. 反转字符串</a></li><li><a href="https://leetcode.cn/problems/reverse-string-ii/" target="_blank" rel="noopener noreferrer">541. 反转字符串 II</a></li><li><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/" target="_blank" rel="noopener noreferrer">剑指 Offer 05. 替换空格</a></li><li><a href="https://leetcode.cn/problems/reverse-words-in-a-string/" target="_blank" rel="noopener noreferrer">151. 反转字符串中的单词</a></li><li><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/" target="_blank" rel="noopener noreferrer">剑指 Offer 58 - II. 左旋转字符串</a></li><li><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/" target="_blank" rel="noopener noreferrer">28. 找出字符串中第一个匹配项的下标</a></li><li><a href="">459. 重复的子字符串</a></li></ul><h2 id="双指针法" tabindex="-1"><a class="header-anchor" href="#双指针法"><span>双指针法</span></a></h2><ul><li><a href="https://leetcode.cn/problems/remove-element/" target="_blank" rel="noopener noreferrer">27. 移除元素</a></li><li><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener noreferrer">26.删除排序数组中的重复项</a></li><li><a href="https://leetcode.cn/problems/move-zeroes/" target="_blank" rel="noopener noreferrer">283. 移动零</a></li><li><a href="">844. 比较含退格的字符串</a></li><li><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/" target="_blank" rel="noopener noreferrer">977. 有序数组的平方</a></li><li><a href="https://leetcode.cn/problems/reverse-string-ii/" target="_blank" rel="noopener noreferrer">541. 反转字符串 II</a></li><li><a href="https://leetcode.cn/problems/reverse-words-in-a-string/" target="_blank" rel="noopener noreferrer">151. 反转字符串中的单词</a></li><li><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener noreferrer">19. 删除链表的倒数第 N 个结点</a></li><li><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/" target="_blank" rel="noopener noreferrer">面试题 02.07. 链表相交</a></li><li><a href="https://leetcode.cn/problems/linked-list-cycle-ii/" target="_blank" rel="noopener noreferrer">142. 环形链表 II</a></li><li><a href="https://leetcode.cn/problems/3sum/" target="_blank" rel="noopener noreferrer">15. 三数之和</a></li><li><a href="https://leetcode.cn/problems/4sum/" target="_blank" rel="noopener noreferrer">18. 四数之和</a></li></ul><h2 id="栈和队列" tabindex="-1"><a class="header-anchor" href="#栈和队列"><span>栈和队列</span></a></h2><ul><li><a href="https://leetcode.cn/problems/implement-queue-using-stacks/" target="_blank" rel="noopener noreferrer">232. 用栈实现队列</a></li><li><a href="https://leetcode.cn/problems/implement-stack-using-queues/" target="_blank" rel="noopener noreferrer">225. 用队列实现栈</a></li><li><a href="https://leetcode.cn/problems/valid-parentheses/" target="_blank" rel="noopener noreferrer">20. 有效的括号</a></li><li><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/" target="_blank" rel="noopener noreferrer">1047. 删除字符串中的所有相邻重复项</a></li><li><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/" target="_blank" rel="noopener noreferrer">150. 逆波兰表达式求值</a></li><li><a href="">239. 滑动窗口最大值</a></li><li><a href="">347. 前 K 个高频元素</a></li></ul><h2 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树"><span>二叉树</span></a></h2><ul><li><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener noreferrer">144. 二叉树的前序遍历</a></li><li><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/" target="_blank" rel="noopener noreferrer">145. 二叉树的后序遍历</a></li><li><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener noreferrer">94. 二叉树的中序遍历</a></li><li><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener noreferrer">102. 二叉树的层序遍历</a></li><li><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener noreferrer">107. 二叉树的层序遍历 II</a></li><li><a href="https://leetcode.cn/problems/binary-tree-right-side-view/" target="_blank" rel="noopener noreferrer">199. 二叉树的右视图</a></li><li><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/" target="_blank" rel="noopener noreferrer">637. 二叉树的层平均值</a></li><li><a href="">429.N叉树的层序遍历</a></li><li><a href="">515.在每个树行中找最大值</a></li><li><a href="">116.填充每个节点的下一个右侧节点指针</a></li><li><a href="">117.填充每个节点的下一个右侧节点指针II</a></li><li><a href="">104.二叉树的最大深度</a></li><li><a href="">111.二叉树的最小深度</a></li><li><a href="https://leetcode.cn/problems/invert-binary-tree/" target="_blank" rel="noopener noreferrer">226. 翻转二叉树</a></li><li><a href="https://leetcode.cn/problems/symmetric-tree/" target="_blank" rel="noopener noreferrer">101. 对称二叉树</a></li><li><a href="">100.相同的树</a></li><li><a href="">572.另一个树的子树</a></li><li><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener noreferrer">104. 二叉树的最大深度</a></li><li><a href="">559.n叉树的最大深度</a></li><li><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noopener noreferrer">111. 二叉树的最小深度</a></li><li><a href="https://leetcode.cn/problems/count-complete-tree-nodes/" target="_blank" rel="noopener noreferrer">222. 完全二叉树的节点个数</a></li><li><a href="https://leetcode.cn/problems/balanced-binary-tree/" target="_blank" rel="noopener noreferrer">110. 平衡二叉树</a></li><li><a href="https://leetcode.cn/problems/binary-tree-paths/" target="_blank" rel="noopener noreferrer">257. 二叉树的所有路径</a></li><li><a href="https://leetcode.cn/problems/sum-of-left-leaves/" target="_blank" rel="noopener noreferrer">404. 左叶子之和</a></li><li><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/" target="_blank" rel="noopener noreferrer">513. 找树左下角的值</a></li><li><a href="https://leetcode.cn/problems/path-sum/" target="_blank" rel="noopener noreferrer">112. 路径总和</a></li><li><a href="">113. 路径总和 II</a></li><li><a href="">106. 从中序与后序遍历序列构造二叉树</a> 要找时间研究下</li><li><a href="">105. 从前序与中序遍历序列构造二叉树</a> 要找时间研究下</li><li><a href="https://leetcode.cn/problems/maximum-binary-tree/" target="_blank" rel="noopener noreferrer">654. 最大二叉树</a> 我是直接抄的答案，找个时间重写下</li><li><a href="https://leetcode.cn/problems/merge-two-binary-trees/" target="_blank" rel="noopener noreferrer">617. 合并二叉树</a></li></ul><blockquote><p>二叉树做到了 21 题，暂时换个口味做做</p></blockquote><h2 id="回溯算法" tabindex="-1"><a class="header-anchor" href="#回溯算法"><span>回溯算法</span></a></h2><p>回溯的模板</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> backtracking</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(参数) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (终止条件) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        存放结果</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        处理节点</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        backtracking</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(路径，选择列表)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 递归</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        回溯，撤销处理结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>回溯是递归的副产品，只要有递归就会有回溯</strong>。</p><p>回溯法就是暴力搜索，并不是什么高效的算法，最多在剪枝一下。</p><p>回溯算法能解决如下问题：</p><ul><li><p>组合问题：N 个数里面按一定规则找出 k 个数的集合</p></li><li><p>排列问题：N 个数按一定规则全排列，有几种排列方式</p></li><li><p>切割问题：一个字符串按一定规则有几种切割方式</p></li><li><p>子集问题：一个 N 个数的集合里有多少符合条件的子集</p></li><li><p>棋盘问题：N 皇后，解数独等等</p></li><li><p><a href="https://leetcode.cn/problems/combinations/" target="_blank" rel="noopener noreferrer">77. 组合</a></p></li><li><p><a href="https://leetcode.cn/problems/combination-sum-iii/" target="_blank" rel="noopener noreferrer">216. 组合总和 III</a></p></li><li><p><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener noreferrer">17. 电话号码的字母组合</a></p></li><li><p><a href="https://leetcode.cn/problems/combination-sum/" target="_blank" rel="noopener noreferrer">39. 组合总和</a></p></li><li><p><a href="https://leetcode.cn/problems/combination-sum-ii/" target="_blank" rel="noopener noreferrer">40. 组合总和 II</a></p></li><li><p><a href="https://leetcode.cn/problems/palindrome-partitioning/" target="_blank" rel="noopener noreferrer">131. 分割回文串</a></p></li><li><p><a href="https://leetcode.cn/problems/restore-ip-addresses/" target="_blank" rel="noopener noreferrer">93. 复原 IP 地址</a></p></li><li><p><a href="https://leetcode.cn/problems/subsets/" target="_blank" rel="noopener noreferrer">78. 子集</a></p></li><li><p><a href="https://leetcode.cn/problems/subsets-ii/" target="_blank" rel="noopener noreferrer">90. 子集 II</a></p></li><li><p><a href="https://leetcode.cn/problems/non-decreasing-subsequences/" target="_blank" rel="noopener noreferrer">491. 递增子序列</a></p></li><li><p><a href="https://leetcode.cn/problems/permutations/" target="_blank" rel="noopener noreferrer">46. 全排列</a></p></li><li><p><a href="https://leetcode.cn/problems/permutations-ii/" target="_blank" rel="noopener noreferrer">47. 全排列 II</a></p></li></ul><blockquote><p>做到了第 18 题，换个口味</p></blockquote><h2 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法"><span>贪心算法</span></a></h2><ul><li><a href="https://leetcode.cn/problems/assign-cookies/" target="_blank" rel="noopener noreferrer">455. 分发饼干</a></li><li><a href="https://leetcode.cn/problems/wiggle-subsequence/" target="_blank" rel="noopener noreferrer">376. 摆动序列</a></li><li><a href="https://leetcode.cn/problems/maximum-subarray/" target="_blank" rel="noopener noreferrer">53. 最大子数组和</a></li><li><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener noreferrer">122. 买卖股票的最佳时机 II</a></li><li><a href="https://leetcode.cn/problems/jump-game/" target="_blank" rel="noopener noreferrer">55. 跳跃游戏</a></li><li><a href="https://leetcode.cn/problems/jump-game-ii/" target="_blank" rel="noopener noreferrer">45. 跳跃游戏 II</a></li><li><a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/" target="_blank" rel="noopener noreferrer">1005.K 次取反后最大化的数组和</a>有重做的可以</li><li><a href="https://leetcode.cn/problems/gas-station/" target="_blank" rel="noopener noreferrer">134. 加油站</a></li><li><a href="https://leetcode.cn/problems/candy/" target="_blank" rel="noopener noreferrer">135. 分发糖果</a></li><li><a href="https://leetcode.cn/problems/lemonade-change/" target="_blank" rel="noopener noreferrer">860. 柠檬水找零</a></li><li><a href="https://leetcode.cn/problems/queue-reconstruction-by-height/" target="_blank" rel="noopener noreferrer">406. 根据身高重建队列</a></li><li><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="noopener noreferrer">452. 用最少数量的箭引爆气球</a></li><li><a href="https://leetcode.cn/problems/non-overlapping-intervals/" target="_blank" rel="noopener noreferrer">435. 无重叠区间</a>有问题</li><li><a href="https://leetcode.cn/problems/partition-labels/" target="_blank" rel="noopener noreferrer">763. 划分字母区间</a></li><li><a href="https://leetcode.cn/problems/merge-intervals/" target="_blank" rel="noopener noreferrer">56. 合并区间</a></li><li><a href="https://leetcode.cn/problems/monotone-increasing-digits/" target="_blank" rel="noopener noreferrer">738. 单调递增的数字</a></li></ul><h2 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划"><span>动态规划</span></a></h2><ul><li><a href="https://leetcode.cn/problems/fibonacci-number/" target="_blank" rel="noopener noreferrer">509. 斐波那契数</a></li><li><a href="https://leetcode.cn/problems/climbing-stairs/" target="_blank" rel="noopener noreferrer">70. 爬楼梯</a></li><li><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/" target="_blank" rel="noopener noreferrer">746. 使用最小花费爬楼梯</a></li><li><a href="https://leetcode.cn/problems/unique-paths/" target="_blank" rel="noopener noreferrer">62. 不同路径</a></li><li><a href="https://leetcode.cn/problems/unique-paths-ii/" target="_blank" rel="noopener noreferrer">63. 不同路径 II</a></li><li><a href="https://leetcode.cn/problems/integer-break/" target="_blank" rel="noopener noreferrer">343. 整数拆分</a></li><li><a href="https://leetcode.cn/problems/unique-binary-search-trees/" target="_blank" rel="noopener noreferrer">96. 不同的二叉搜索树</a> 没做这个</li></ul>`,35)]))}const h=r(i,[["render",t]]),c=JSON.parse('{"path":"/leetcode_record/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E9%A2%98%E7%9B%AE%E7%9B%AE%E5%BD%95.html","title":"代码随想录刷题列表","lang":"en-US","frontmatter":{"title":"代码随想录刷题列表","description":"数组 704. 二分查找 35. 搜索插入位置 34. 在排序数组中查找元素的第一个和最后一个位置 69.x 的平方根 367.有效的完全平方数 27. 移除元素 26.删除排序数组中的重复项 283.移动零 844.比较含退格的字符串 有个双指针的解法比较复杂 977.有序数组的平方 59.螺旋矩阵II 54. 螺旋矩阵 34. 在排序数组中查找元素...","head":[["meta",{"property":"og:url","content":"https://blog.guosgbin.cn/leetcode_record/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E9%A2%98%E7%9B%AE%E7%9B%AE%E5%BD%95.html"}],["meta",{"property":"og:title","content":"代码随想录刷题列表"}],["meta",{"property":"og:description","content":"数组 704. 二分查找 35. 搜索插入位置 34. 在排序数组中查找元素的第一个和最后一个位置 69.x 的平方根 367.有效的完全平方数 27. 移除元素 26.删除排序数组中的重复项 283.移动零 844.比较含退格的字符串 有个双指针的解法比较复杂 977.有序数组的平方 59.螺旋矩阵II 54. 螺旋矩阵 34. 在排序数组中查找元素..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-03T07:07:29.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-03T07:07:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代码随想录刷题列表\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-03T07:07:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"超威蓝猫 Dylan Kwok\\",\\"url\\":\\"\\",\\"email\\":\\"guosgbin@163.com\\"}]}"]]},"git":{"createdTime":1743664049000,"updatedTime":1743664049000,"contributors":[{"name":"Dylan Kwok","username":"","email":"guosgbin@163.com","commits":1}]},"readingTime":{"minutes":7.83,"words":2348},"filePathRelative":"leetcode_record/代码随想录题目目录.md","localizedDate":"April 3, 2025","autoDesc":true}');export{h as comp,c as data};
