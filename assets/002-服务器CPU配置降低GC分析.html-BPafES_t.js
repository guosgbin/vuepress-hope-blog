import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as s,o as i}from"./app-Rs4pkfKX.js";const l="/assets/image-20240228172223249-CD8wSoq2.png",n="/assets/image-20240228172250626-CcFBW4pP.png",r="/assets/image-20240228172320233-DQNTrMiB.png",o="/assets/image-20240228172340604-B6E__6Fe.png",c={};function p(d,t){return i(),a("div",null,t[0]||(t[0]=[s('<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2023年03月28日15:29:22</td></tr></tbody></table><h2 id="现状" tabindex="-1"><a class="header-anchor" href="#现状"><span>现状</span></a></h2><p>期望将服务器从 16 核 32G 内存降到 8 核 16G。</p><p>JVM 的参数如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>java -Xms8g -Xmx8g -Xmn2g -Xss900k -XX:+ExplicitGCInvokesConcurrent -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=5 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=15 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/logs/bak -Xloggc:/data/logs/gc.log.20230327_074744 -Djava.net.preferIPv4Stack=true ....省略....</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="对照" tabindex="-1"><a class="header-anchor" href="#对照"><span>对照</span></a></h2><p>将一台服务器降为 8 核 16G 后，和 16 核 32G 的服务器的对照数据如下：</p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">16核32G内存</th><th style="text-align:left;">8核16G内存</th></tr></thead><tbody><tr><td style="text-align:left;">gc总停顿时间</td><td style="text-align:left;">总暂停时间12分钟</td><td style="text-align:left;">总暂停时间16分钟</td></tr><tr><td style="text-align:left;">内存分配</td><td style="text-align:left;"><img src="'+l+'" alt="image-20240228172223249" style="zoom:50%;"></td><td style="text-align:left;"><img src="'+n+'" alt="image-20240228172250626" style="zoom:50%;"></td></tr><tr><td style="text-align:left;">垃圾回收停顿时间</td><td style="text-align:left;"><img src="'+r+'" alt="image-20240228172320233" style="zoom:40%;"></td><td style="text-align:left;"><img src="'+o+'" alt="image-20240228172340604" style="zoom:50%;"></td></tr></tbody></table><p>结果对比</p><ol><li>根据配置 ParNew 回收器是 serial 的多线程版，可以充分利用 cpu 资源，减少回收时间；</li><li>因为是多线程同时执行，所以 cpu 核数，对垃圾回收有一定影响，降低 cpu 配置会导致回收时间延长；</li></ol><h2 id="优化策略" tabindex="-1"><a class="header-anchor" href="#优化策略"><span>优化策略</span></a></h2><h3 id="确定目标" tabindex="-1"><a class="header-anchor" href="#确定目标"><span>确定目标</span></a></h3><p>低延迟：系统要求在 500ms 内必须响应请求。</p><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h3><ol><li>gc 停顿时间 100~200ms 增加了 3644 次，服务的 qps 按照 1500/s 来算， gc 回收时停顿时间 100ms 到 200ms 大概影响 200 个请求（1500 * 0.15 = 200，这个应该按照平均响应时间算），计算影响请求数：200*3644 = 728800；</li><li>现在高峰期，大概每 3 秒一次 gc，按照每个接口响应时间 500ms 算，500ms 过后这个请求涉及的对象都可以被回收，3 秒内存在大量可回收对象</li></ol><h3 id="解决思路" tabindex="-1"><a class="header-anchor" href="#解决思路"><span>解决思路</span></a></h3><ol><li>垃圾回收器，每秒回收 2g 内存，肯定比回收 1g 内存的耗时长，为了达到请求的低延迟效果，可以将堆内存分配调小，让每次回收的垃圾小一点，充分利用 cpu 资源；</li><li>按照 3 秒内一次 Minor 回收计算，3 秒大概 2048M 数据，如果调整成 1 秒一次垃圾回收大概需要年轻代 700M 内存，尝试将新生代改为 1G；</li></ol>',17)]))}const g=e(c,[["render",p]]),u=JSON.parse('{"path":"/business_issue_accumulations/002-%E6%9C%8D%E5%8A%A1%E5%99%A8CPU%E9%85%8D%E7%BD%AE%E9%99%8D%E4%BD%8EGC%E5%88%86%E6%9E%90.html","title":"002-服务器CPU配置降低的GC分析","lang":"en-US","frontmatter":{"title":"002-服务器CPU配置降低的GC分析","description":"现状 期望将服务器从 16 核 32G 内存降到 8 核 16G。 JVM 的参数如下： 对照 将一台服务器降为 8 核 16G 后，和 16 核 32G 的服务器的对照数据如下： 结果对比 根据配置 ParNew 回收器是 serial 的多线程版，可以充分利用 cpu 资源，减少回收时间； 因为是多线程同时执行，所以 cpu 核数，对垃圾回收有一定...","head":[["meta",{"property":"og:url","content":"https://blog.guosgbin.cn/business_issue_accumulations/002-%E6%9C%8D%E5%8A%A1%E5%99%A8CPU%E9%85%8D%E7%BD%AE%E9%99%8D%E4%BD%8EGC%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:title","content":"002-服务器CPU配置降低的GC分析"}],["meta",{"property":"og:description","content":"现状 期望将服务器从 16 核 32G 内存降到 8 核 16G。 JVM 的参数如下： 对照 将一台服务器降为 8 核 16G 后，和 16 核 32G 的服务器的对照数据如下： 结果对比 根据配置 ParNew 回收器是 serial 的多线程版，可以充分利用 cpu 资源，减少回收时间； 因为是多线程同时执行，所以 cpu 核数，对垃圾回收有一定..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-03T07:07:29.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-03T07:07:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"002-服务器CPU配置降低的GC分析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-03T07:07:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"超威蓝猫 Dylan Kwok\\",\\"url\\":\\"\\",\\"email\\":\\"guosgbin@163.com\\"}]}"]]},"git":{"createdTime":1743664049000,"updatedTime":1743664049000,"contributors":[{"name":"Dylan Kwok","username":"","email":"guosgbin@163.com","commits":1}]},"readingTime":{"minutes":2.03,"words":609},"filePathRelative":"business_issue_accumulations/002-服务器CPU配置降低GC分析.md","localizedDate":"April 3, 2025","autoDesc":true}');export{g as comp,u as data};
