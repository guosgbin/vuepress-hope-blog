import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as r,b as i,f as n,w as s,r as p,o as g,e as a}from"./app-Rs4pkfKX.js";const u="/assets/rocketmq_architecture_1-ACr-d42u.png",c="/assets/RocketMQ%E7%9A%84Reactor%E7%BA%BF%E7%A8%8B%E8%AE%BE%E8%AE%A1-DeA7D_l3.png",d="/assets/NameServer%E8%B7%AF%E7%94%B1%E4%BF%A1%E6%81%AF%E4%BA%A4%E4%BA%92-fijbUD1m.png",m="/assets/image-20250421172928119-DpiO-R0T.png",k="/assets/image-20250421215242824-BgwOcQWO.png",h="/assets/image-20250421195422147-_-ASTAET.png",v="/assets/image-20250421220305774-CuJyA_ap.png",b="/assets/image-20250421220401414-DUk3Oqm5.png",B={},f={class:"table-of-contents"};function Q(M,e){const o=p("router-link");return g(),t("div",null,[e[38]||(e[38]=r("table",null,[r("thead",null,[r("tr",null,[r("th",null,"版本"),r("th",null,"内容"),r("th",null,"时间")])]),r("tbody",null,[r("tr",null,[r("td",null,"V1"),r("td",null,"新建"),r("td",null,"2025年04月21日22:30:51")])])],-1)),r("nav",f,[r("ul",null,[r("li",null,[n(o,{to:"#rocketmq-各个角色"},{default:s(()=>e[0]||(e[0]=[a("RocketMQ 各个角色")])),_:1})]),r("li",null,[n(o,{to:"#rocketmq-的-reactor-多线程模型"},{default:s(()=>e[1]||(e[1]=[a("RocketMQ 的 Reactor 多线程模型")])),_:1})]),r("li",null,[n(o,{to:"#rocketmq-的路由信息交互"},{default:s(()=>e[2]||(e[2]=[a("RocketMQ 的路由信息交互")])),_:1})]),r("li",null,[n(o,{to:"#rocketmq-的服务端和客户端"},{default:s(()=>e[3]||(e[3]=[a("RocketMQ 的服务端和客户端")])),_:1})]),r("li",null,[n(o,{to:"#broker是如何注册到namesrv-如何保活的-怎么认为broker宕机"},{default:s(()=>e[4]||(e[4]=[a("broker是如何注册到namesrv？如何保活的？怎么认为broker宕机？")])),_:1})]),r("li",null,[n(o,{to:"#生产者消费者如何获取的路由信息"},{default:s(()=>e[5]||(e[5]=[a("生产者消费者如何获取的路由信息")])),_:1})]),r("li",null,[n(o,{to:"#消息的类型"},{default:s(()=>e[6]||(e[6]=[a("消息的类型")])),_:1})]),r("li",null,[n(o,{to:"#消息发送的-broker-故障规避机制"},{default:s(()=>e[7]||(e[7]=[a("消息发送的 Broker 故障规避机制")])),_:1})]),r("li",null,[n(o,{to:"#broker-的存储目录"},{default:s(()=>e[8]||(e[8]=[a("broker 的存储目录")])),_:1})]),r("li",null,[n(o,{to:"#rocketmq-的存储架构"},{default:s(()=>e[9]||(e[9]=[a("RocketMQ 的存储架构")])),_:1})]),r("li",null,[n(o,{to:"#rocketmq-针对存储做的优化"},{default:s(()=>e[10]||(e[10]=[a("RocketMQ 针对存储做的优化")])),_:1}),r("ul",null,[r("li",null,[n(o,{to:"#顺序写入"},{default:s(()=>e[11]||(e[11]=[a("顺序写入")])),_:1})]),r("li",null,[n(o,{to:"#内存映射文件-memory-mapped-file"},{default:s(()=>e[12]||(e[12]=[a("内存映射文件（Memory - Mapped File）")])),_:1})]),r("li",null,[n(o,{to:"#零拷贝-zero-copy"},{default:s(()=>e[13]||(e[13]=[a("零拷贝（Zero - Copy）")])),_:1})]),r("li",null,[n(o,{to:"#消息索引优化"},{default:s(()=>e[14]||(e[14]=[a("消息索引优化")])),_:1})]),r("li",null,[n(o,{to:"#刷盘策略优化"},{default:s(()=>e[15]||(e[15]=[a("刷盘策略优化")])),_:1})]),r("li",null,[n(o,{to:"#存储文件预分配"},{default:s(()=>e[16]||(e[16]=[a("存储文件预分配")])),_:1})]),r("li",null,[n(o,{to:"#pagecache"},{default:s(()=>e[17]||(e[17]=[a("PageCache")])),_:1})])])]),r("li",null,[n(o,{to:"#broker-刷盘机制"},{default:s(()=>e[18]||(e[18]=[a("broker 刷盘机制")])),_:1})]),r("li",null,[n(o,{to:"#broker过期文件删除机制"},{default:s(()=>e[19]||(e[19]=[a("broker过期文件删除机制")])),_:1})]),r("li",null,[n(o,{to:"#生产者端负载均衡"},{default:s(()=>e[20]||(e[20]=[a("生产者端负载均衡")])),_:1}),r("ul",null,[r("li",null,[n(o,{to:"#消费者端负载均衡"},{default:s(()=>e[21]||(e[21]=[a("消费者端负载均衡")])),_:1})]),r("li",null,[n(o,{to:"#平均分配"},{default:s(()=>e[22]||(e[22]=[a("平均分配")])),_:1})]),r("li",null,[n(o,{to:"#平均环形分配"},{default:s(()=>e[23]||(e[23]=[a("平均环形分配")])),_:1})]),r("li",null,[n(o,{to:"#负载均衡的动态调整"},{default:s(()=>e[24]||(e[24]=[a("负载均衡的动态调整")])),_:1})]),r("li",null,[n(o,{to:"#影响负载均衡的因素"},{default:s(()=>e[25]||(e[25]=[a("影响负载均衡的因素")])),_:1})])])]),r("li",null,[n(o,{to:"#说说-topic-和-queue-的区别与联系"},{default:s(()=>e[26]||(e[26]=[a("说说 Topic 和 Queue 的区别与联系？")])),_:1})]),r("li",null,[n(o,{to:"#简述-rocketmq-消息的生产和消费流程"},{default:s(()=>e[27]||(e[27]=[a("简述 RocketMQ 消息的生产和消费流程？")])),_:1}),r("ul",null,[r("li",null,[n(o,{to:"#消息生产流程"},{default:s(()=>e[28]||(e[28]=[a("消息生产流程")])),_:1})]),r("li",null,[n(o,{to:"#消息消费流程"},{default:s(()=>e[29]||(e[29]=[a("消息消费流程")])),_:1})]),r("li",null,[n(o,{to:"#流程交互与协调"},{default:s(()=>e[30]||(e[30]=[a("流程交互与协调")])),_:1})])])]),r("li",null,[n(o,{to:"#rocketmq-如何实现高可用架构"},{default:s(()=>e[31]||(e[31]=[a("RocketMQ 如何实现高可用架构？")])),_:1}),r("ul",null,[r("li",null,[n(o,{to:"#nameserver-多节点部署"},{default:s(()=>e[32]||(e[32]=[a("NameServer 多节点部署")])),_:1})]),r("li",null,[n(o,{to:"#broker-主从复制与故障转移"},{default:s(()=>e[33]||(e[33]=[a("Broker 主从复制与故障转移")])),_:1})]),r("li",null,[n(o,{to:"#消息重试与补偿机制"},{default:s(()=>e[34]||(e[34]=[a("消息重试与补偿机制")])),_:1})]),r("li",null,[n(o,{to:"#负载均衡"},{default:s(()=>e[35]||(e[35]=[a("负载均衡")])),_:1})])])]),r("li",null,[n(o,{to:"#rocketmq-出现消息堆积时-如何处理"},{default:s(()=>e[36]||(e[36]=[a("RocketMQ 出现消息堆积时，如何处理？")])),_:1})]),r("li",null,[n(o,{to:"#rocketmq-和-kafka-相比-有哪些优缺点"},{default:s(()=>e[37]||(e[37]=[a("RocketMQ 和 Kafka 相比，有哪些优缺点？")])),_:1})])])]),e[39]||(e[39]=i('<h2 id="rocketmq-各个角色" tabindex="-1"><a class="header-anchor" href="#rocketmq-各个角色"><span>RocketMQ 各个角色</span></a></h2><img src="'+u+'" alt="img" style="zoom:50%;"><p><strong>Producer</strong></p><ul><li>消息发布的角色，支持分布式集群方式部署。</li><li>Producer 通过 MQ 的<strong>负载均衡</strong>模块选择相应的 Broker 集群队列进行消息投递，投递的过程支持快速失败并且低延迟；</li><li>支持消息重试。</li></ul><p><strong>Consumer</strong></p><ul><li>支持分布式集群方式部署；</li><li>支持以 push 推，pull 拉两种模式对消息进行消费；</li><li>同时也支持集群方式和广播方式的消费；</li></ul><p><strong>NameServer</strong></p><p>NameServer 是一个非常简单的 Topic 路由注册中心，支持 Topic、Broker 的动态注册与发现。</p><p>主要包括两个功能：</p><ul><li><p><strong>Broker 管理</strong>：NameServer 接受 Broker 集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查 Broker 是否还存活；</p></li><li><p><strong>路由信息管理</strong>：每个 NameServer 将保存关于 Broker 集群的整个路由信息和用于客户端查询的队列信息。然后 Producer 和 Consumer 通过 NameServer 就可以知道整个 Broker 集群的路由信息，从而进行消息的投递和消费；</p></li></ul><p>NameServer 几乎无状态节点，因此可集群部署，<strong>节点之间无任何信息同步</strong>。Broker 是向每一台 NameServer 注册自己的路由信息，所以<strong>每一个 NameServer 实例上面都保存一份完整的路由信息</strong>。当某个 NameServer 因某种原因下线了，Broker 仍然可以向其它 NameServer 同步其路由信息， Producer 和 Consumer 仍然可以动态感知 Broker 的路由的信息；</p><p><strong>BrokerServer</strong></p><p>Broker 主要负责<strong>消息的存储、投递和查询</strong>以及服务高可用保证，为了实现这些功能，Broker 包含了以下几个重要子模块。</p><ol><li>Remoting Module：整个 Broker 的实体，负责处理来自 Client 端的请求；</li><li>Client Manager：负责管理客户端( Producer / Consumer )和维护 Consumer 的 Topic 订阅信息；</li><li>Store Service：提供方便简单的 API 接口处理消息存储到物理硬盘和查询功能；</li><li>HA Service：高可用服务，提供 Master Broker 和 Slave Broker 之间的数据同步功能；</li><li>Index Service：根据特定的 Message key 对投递到Broker的消息进行索引服务，以提供消息的快速查询；</li></ol><p>Broker 的部署：在 Master-Slave 架构中，Broker 分为 Master 与 Slave。一个 Master 可以对应多个 Slave，但是一个 Slave 只能对应一个 Master。**Master 与 Slave 的对应关系通过指定相同的 BrokerName，不同的 BrokerId 来定义，BrokerId为 0 表示 Master，非 0 表示 Slave。**Master 也可以部署多个。</p><h2 id="rocketmq-的-reactor-多线程模型" tabindex="-1"><a class="header-anchor" href="#rocketmq-的-reactor-多线程模型"><span>RocketMQ 的 Reactor 多线程模型</span></a></h2><p>RocketMQ 的 Reactor 多线程模型是其网络通信模块中采用的一种高效的异步事件驱动模型，主要用于处理客户端与 Broker 之间的网络连接和消息读写等操作，具有高性能、高可扩展性等优点。以下是其具体介绍：</p><ul><li><strong>Main Reactor 线程</strong>：主要负责接收<strong>客户端的连接请求</strong>，将新连接分配给 Sub Reactor 线程，并处理一些与连接建立和销毁相关的逻辑。在 RocketMQ 中，通常只有一个 Main Reactor 线程，它会在 Broker 启动时创建并开始监听指定端口，等待客户端连接。</li><li><strong>Sub Reactor 线程池</strong>：由多个 Sub Reactor 线程组成，每个 Sub Reactor 线程负责处理一部分<strong>连接上的读写事件</strong>。Sub Reactor 线程从 Main Reactor 线程接收分配的连接后，会注册该连接的读事件监听，当有数据可读时，Sub Reactor 线程会读取数据并进行相应的处理，如解析消息、执行请求等。处理完成后，如果需要发送响应数据，Sub Reactor 线程会将写事件注册到事件循环中，等待合适的时机将数据发送给客户端。</li><li><strong>处理器 ChannelHandler 的线程</strong>：在真正执行业务逻辑之前需要进行 SSL 验证、编解码、空闲检查、网络连接管理这些操作，这些处理器由特有的线程池的线程处理；</li><li><strong>业务线程池</strong>：处理业务的线程在特有的业务线程池中执行。每种类型的请求都有自己的 code，每个 code 都会有特定的 processor 去处理，会把请求逻辑封装成一个 Runnable 的任务，提交给业务线程池去处理。这样可以避免 Sub Reactor 线程被长时间阻塞，保证其能够及时处理其他连接上的事件，提高系统的并发处理能力</li></ul><img src="'+c+'" alt="RocketMQ的Reactor线程设计" style="zoom:33%;"><p>优点</p><ul><li><strong>提高并发处理能力</strong>：通过多个 Sub Reactor 线程和工作线程池的配合，能够同时处理大量的客户端连接和请求，充分利用多核处理器的性能，提高系统的并发处理能力和吞吐量。</li><li><strong>降低线程切换开销</strong>：Reactor 模型基于事件驱动，只有在有事件发生时才会触发相应的处理逻辑，避免了传统多线程模型中大量的线程切换开销，提高了系统的性能和响应速度。</li><li><strong>增强可扩展性</strong>：可以方便地通过增加 Sub Reactor 线程或工作线程的数量来扩展系统的处理能力，以适应不同的业务负载需求。同时，各个线程之间的职责明确，便于代码的维护和扩展。</li><li><strong>提高资源利用率</strong>：Sub Reactor 线程和工作线程可以根据实际的业务负载动态调整其工作状态，避免了线程的闲置和浪费，提高了系统资源的利用率。</li></ul><h2 id="rocketmq-的路由信息交互" tabindex="-1"><a class="header-anchor" href="#rocketmq-的路由信息交互"><span>RocketMQ 的路由信息交互</span></a></h2><img src="'+d+`" alt="NameServer的架构和其他角色交互" style="zoom:33%;"><ul><li><strong>Broker 注册</strong>：Broker 启动后，会向所有的 NameServer 发送注册请求，将自己的信息（如 Broker 名称、IP 地址、端口号、所属集群等）以及所负责的 Topic 信息注册到所有 NameServer 中。NameServer 会保存这些信息，并通过心跳机制来检测 Broker 的存活状态。（120 秒 broker 未上报心跳包，则认为 broker 宕机）</li><li><strong>Producer 获取路由信息</strong>：生产者和 NameServer 建立长连接，每 30 秒从 NameServer 中获取路由信息，然后再自己本地保存。包括该 Topic 分布在哪些 Broker 上，以及每个 Broker 上的队列信息等。Producer 会根据这些路由信息选择合适的 Broker 队列进行消息投递。</li><li><strong>Consumer 获取路由信息</strong>：消费者和 NameServer 建立长连接，每 30 秒从 NameServer 中获取路由信息，然后再自己本地保存，以了解该 Topic 的消息分布在哪些 Broker 上，从而确定从哪些 Broker 上拉取消息。</li></ul><h2 id="rocketmq-的服务端和客户端" tabindex="-1"><a class="header-anchor" href="#rocketmq-的服务端和客户端"><span>RocketMQ 的服务端和客户端</span></a></h2><p>RocketMQ 中有四种角色，各个角色内部对应 Netty 服务端和客户端的角色如下：</p><ul><li><strong>NameServer</strong>：服务端，因为 Broker 需要和 NameServer 维护心跳，Producer 和 Consumer 都需要从 Nameserver 获取路由信息；</li><li><strong>Broker（master 和 salve）</strong>：服务端和客户端。和 NameServer 维护心跳时作为客户端；在与 Producer 和 Consumer 交互时是作为服务端的；</li><li><strong>Producer</strong>：客户端。从 NameServer 拉取路由信息；发送消息到 Broker；</li><li><strong>Consumer</strong>：客户端。从 NameServer 拉取路由信息；从 Broker 拉取消息；</li></ul><h2 id="broker是如何注册到namesrv-如何保活的-怎么认为broker宕机" tabindex="-1"><a class="header-anchor" href="#broker是如何注册到namesrv-如何保活的-怎么认为broker宕机"><span>broker是如何注册到namesrv？如何保活的？怎么认为broker宕机？</span></a></h2><p><strong>Broker 注册到 NameSrv 的过程</strong></p><ul><li><strong>发送注册请求</strong>：Broker 启动后，会向集群中的<strong>所有 NameSrv 实例</strong>发送注册请求。请求中包含 Broker 的地址（IP 和端口）、BrokerId、Broker 名称、所属集群名称、主节点地址（如果是从节点）、消息过滤服务器列表、Topic 配置等信息4。</li><li><strong>获取写锁并更新数据结构</strong>：NameSrv 收到注册请求后，会使用可重入写锁来确保在更新内部数据结构时的同步控制。从相关表中查找给定集群名对应的 Broker 集合，若不存在则创建。将当前注册的 Broker 名称加入集合，获取或初始化 BrokerData 对象来存储 Broker 集群、名称及地址映射信息，更新 Broker 地址映射表，并在 brokerLiveTable 中保存 Broker 的实时连接信息，包括当前时间戳、主题配置版本、通道以及高可用服务器地址。</li></ul><p><strong>Broker 在 NameSrv 的保活机制</strong></p><p>Broker 通过<strong>定时发送心跳包</strong>来保持在 NameSrv 中的存活状态。Broker 启动后，会每隔 30 秒向集群中所有的 NameSrv 发送心跳包。心跳包的 header 中保存当前 Broker 的信息，body 保存 Topic 信息。NameSrv 收到 Broker 心跳时，会更新 brokerLiveTable 中对应 Broker 的最后更新时间戳等信息。</p><p><strong>NameSrv 判断 Broker 宕机的方式</strong></p><p>NameSrvController 初始化时会启动定时线程池，其中包括一个<strong>每隔 10 秒检测一次</strong>不健康 Broker 的 schedule 线程池。在定时任务中，NameSrv 会遍历 brokerLiveTable，如果当前时间大于 Broker 最后更新时间加<strong>上超时时间（默认是 120 秒）</strong>，就认为 Broker 宕机。NameSrv 会主动关闭与该 Broker 的 channel，并发送 Broker 注销请求，将其从路由信息中剔除。</p><p>另外，如果 Broker 主动下线，则会</p><ul><li><strong>NameSrv 感知与更新</strong>：Broker 在关机前会向 NameSrv 发送注销请求，告知 NameSrv 自己即将下线。NameSrv 收到请求后，会更新路由信息，将该 Broker 从可用 Broker 列表中移除，并向 Producer 和 Consumer 发送路由信息变更通知。如果 Broker 异常关机，没有及时发送注销请求，NameSrv 会通过心跳检测机制发现 Broker 宕机，也会更新路由信息。</li><li><strong>Producer 和 Consumer 调整</strong>：当某个主题的路由信息发生改变了，NameServer 不会主动推送新的路由信息到客户端。客户端会定时的从 NameServer 中拉取最新的路由信息。这样设计的目的是为了降低 NameServer 的实现复杂性，避免在路由信息变更时需要维护大量的推送连接和状态</li></ul><h2 id="生产者消费者如何获取的路由信息" tabindex="-1"><a class="header-anchor" href="#生产者消费者如何获取的路由信息"><span>生产者消费者如何获取的路由信息</span></a></h2><p><strong>与 NameServer 建立长连接</strong></p><ul><li>Producer 和 Consumer 启动时，会根据配置的 NameServer 地址列表，<strong>与 NameServer 集群中的节点建立长连接</strong>。这个连接用于后续的路由信息获取以及与 NameServer 的其他交互。</li></ul><p><strong>定时拉取路由信息</strong></p><ul><li>Producer 和 Consumer 会定时从 NameServer 拉取路由信息。以 Producer 为例，在发<strong>送第一条消息时</strong>，会根据 Topic 从 NameServer 获取路由信息，包括 Topic 下面有哪些 Queue，这些 Queue 分布在哪些 Broker 上等。之后，Producer 和 Consumer 会<strong>按照一定的时间间隔（默认 30 秒）</strong>，周期性地从 NameServer 拉取最新的路由信息，以保证获取到最新的 Broker 状态和 Topic 路由变化。例如，Consumer 在订阅某个主题的消息之前，会从 NameServer 获取 Broker 服务器地址列表。</li></ul><p><strong>本地缓存路由信息</strong></p><ul><li>Producer 和 Consumer 获取到路由信息后，会将其<strong>缓存到本地</strong>。这样在后续发送或消费消息时，可以直接从本地缓存中获取 Broker 地址等信息，提高消息处理的效率。当本地缓存的路由信息过期或检测到路由变化时，再从 NameServer 拉取新的路由信息进行更新。</li></ul><h2 id="消息的类型" tabindex="-1"><a class="header-anchor" href="#消息的类型"><span>消息的类型</span></a></h2><p>RocketMQ 消息发送在发送方式上分为三种</p><ol><li>同步发送；</li><li>异步发送；</li><li>单向发送；</li></ol><p>RocketMQ 在发送消息的类型分为以下几种</p><ol><li>普通消息；</li><li>顺序消息；</li><li>延迟消息；</li><li>事务消息；</li><li>单向消息；</li><li>批量消息；</li></ol><h2 id="消息发送的-broker-故障规避机制" tabindex="-1"><a class="header-anchor" href="#消息发送的-broker-故障规避机制"><span>消息发送的 Broker 故障规避机制</span></a></h2><p><strong>Broker 故障规避机制与生产者感知延迟的关系</strong></p><ul><li>由于生产者是每隔 30 秒去 NameServer 拉取 topic 路由管理信息，而 NameServer 不会主动推送路由变化信息，所以当 Broker 出现故障时，生产者不能立即感知到，这就导致了生产者感知 topic 路由信息变化存在延迟。在这段延迟时间内，生产者可能会继续向故障的 Broker 发送消息，从而导致消息发送失败。因此，为了减少这种延迟带来的影响，Broker 的故障规避机制就显得尤为重要，它可以在一定程度上降低因 Broker 故障而导致消息发送失败的概率。</li></ul><p><strong>消息级别的故障规避机制</strong></p><ul><li><strong>重试策略</strong>：在 RocketMQ 中，无论是同步消息还是异步消息，当发送失败时都会进行重试。这是一种常见的容错机制，有助于提高消息发送的成功率。</li><li><strong>避免向故障 Broker 重复发送</strong>：在重试时，默认情况下不会再往发送失败的 Broker 发送消息，除非其他 Broker 上没有该 topic 所在的队列。这样可以避免持续向故障的 Broker 发送消息，减少消息发送的阻塞和失败率，提高整个系统的可靠性和稳定性。</li></ul><p><strong>生产者级别的故障规避机制</strong></p><ul><li><strong>配置参数</strong>：将 <code>sendLatencyFaultEnable</code> 配置设为 <code>true</code> 后，生产者会根据消息发送消耗的时间来判断 Broker 的可用性。</li><li><strong>Broker 可用性判断</strong>：设定一个时间阈值 A，当消息发送时间小于 A 时，认为 Broker 正常；当消息发送时间大于 A 时，则认为 Broker 可能存在问题。对于被认为有问题的 Broker，在一段时间内不允许向其发送消息，这段时间的长短通常根据具体的业务需求和系统情况来设定。这种机制可以让生产者动态地感知 Broker 的性能变化，及时避开性能不佳的 Broker，从而提高消息发送的效率和成功率。</li></ul><h2 id="broker-的存储目录" tabindex="-1"><a class="header-anchor" href="#broker-的存储目录"><span>broker 的存储目录</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>store</span></span>
<span class="line"><span>├── abort</span></span>
<span class="line"><span>├── checkpoint</span></span>
<span class="line"><span>├── commitlog</span></span>
<span class="line"><span>│   └── 00000000000000000000</span></span>
<span class="line"><span>├── config</span></span>
<span class="line"><span>│   ├── consumerFilter.json</span></span>
<span class="line"><span>│   ├── consumerFilter.json.bak</span></span>
<span class="line"><span>│   ├── consumerOffset.json</span></span>
<span class="line"><span>│   ├── consumerOffset.json.bak</span></span>
<span class="line"><span>│   ├── delayOffset.json</span></span>
<span class="line"><span>│   ├── delayOffset.json.bak</span></span>
<span class="line"><span>│   ├── subscriptionGroup.json</span></span>
<span class="line"><span>│   ├── subscriptionGroup.json.bak</span></span>
<span class="line"><span>│   ├── topics.json</span></span>
<span class="line"><span>│   └── topics.json.bak</span></span>
<span class="line"><span>├── consumequeue</span></span>
<span class="line"><span>│   ├── ScheduledTopic</span></span>
<span class="line"><span>│   │   ├── 0</span></span>
<span class="line"><span>│   │   │   └── 00000000000000000000</span></span>
<span class="line"><span>│   │   ├── 1</span></span>
<span class="line"><span>│   │   │   └── 00000000000000000000</span></span>
<span class="line"><span>│   │   ├── 2</span></span>
<span class="line"><span>│   │   │   └── 00000000000000000000</span></span>
<span class="line"><span>│   │   └── 3</span></span>
<span class="line"><span>│   │       └── 00000000000000000000</span></span>
<span class="line"><span>│   ├── SCHEDULE_TOPIC_XXXX</span></span>
<span class="line"><span>│   │   ├── 1</span></span>
<span class="line"><span>│   │   │   └── 00000000000000000000</span></span>
<span class="line"><span>│   │   └── 2</span></span>
<span class="line"><span>│   │       └── 00000000000000000000</span></span>
<span class="line"><span>│   ├── TopicTest</span></span>
<span class="line"><span>│   │   ├── 0</span></span>
<span class="line"><span>│   │   │   └── 00000000000000000000</span></span>
<span class="line"><span>│   │   ├── 1</span></span>
<span class="line"><span>│   │   │   └── 00000000000000000000</span></span>
<span class="line"><span>│   │   ├── 2</span></span>
<span class="line"><span>│   │   │   └── 00000000000000000000</span></span>
<span class="line"><span>│   │   └── 3</span></span>
<span class="line"><span>│   │       └── 00000000000000000000</span></span>
<span class="line"><span>│   └── TopicTest2</span></span>
<span class="line"><span>│       ├── 0</span></span>
<span class="line"><span>│       │   └── 00000000000000000000</span></span>
<span class="line"><span>│       ├── 1</span></span>
<span class="line"><span>│       │   └── 00000000000000000000</span></span>
<span class="line"><span>│       ├── 2</span></span>
<span class="line"><span>│       │   └── 00000000000000000000</span></span>
<span class="line"><span>│       └── 3</span></span>
<span class="line"><span>│           └── 00000000000000000000</span></span>
<span class="line"><span>├── index</span></span>
<span class="line"><span>│   └── 20220411232202751</span></span>
<span class="line"><span>└── lock</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RocketMQ 中 Broker 的存储目录默认是<code>\${ROCKRTMQ_HOME}/store</code>3。主要包含以下子目录5：</p><ul><li><strong>commitlog</strong>：消息的存储目录，所有消息都会顺序写入该目录下的文件中，文件名由该文件保存消息的最大物理偏移值在高位补 0 组成，每个文件大小默认 1GB，可以通过<code>mapedFileSizeCommitLog</code>进行配置。</li><li><strong>consumequeue</strong>：消息消费队列存储目录，包含该 Broker 上所有的 Topic 对应的消费队列文件信息，格式为 “<code>./consumequeue/Topic名字/queue id/具体消费队列文件</code>”。每个消费队列是 commitlog 的一个索引，用于消费者拉取消息、更新位点。因为 commitlog 是顺序写的，假如没有索引的话需要从头开启遍历查找消息，比较耗时；</li><li><strong>index</strong>：消息索引文件存储目录，全部文件都是按照消息 key 创建的 Hash 索引，为通过 key 或时间区间查询消息提供支持。文件名是创建的时间戳命名的</li><li><strong>config</strong>：保存当前 Broker 中全部的 Topic 的路由信息、订阅关系和消费进度等数据，这些数据会定时从内存持久化到磁盘，以便宕机后恢复。 <ul><li><strong>consumerFilter.json</strong>：主题消息过滤信息；</li><li><strong>consumerOffset.json</strong>：集群消费模式下的消息消费进度；</li><li><strong>delayOffset.json</strong>：延迟消息队列拉取进度；</li><li><strong>subscriptionGroup.json</strong>：消息消费组的配置信息；</li><li><strong>topics.json</strong>：topic 配置属性（主题路由信息）；</li></ul></li><li><strong>lock</strong>：存储模块中的加锁文件，作为锁对象；</li><li><strong>abort</strong>：标记 broker 是否是异常关闭。正常关闭 broker 时会删除这个文件，异常关闭时不会删除这个文件。当 broker 重启时，根据是否存在这个文件决定是否重新构建 index 索引等操作；</li><li><strong>checkpoint</strong>：存储着 commitLog、consumerqueue、index 文件的最后刷盘时间戳，文件固定长度 4k，只用了前 24 个字节。</li></ul><h2 id="rocketmq-的存储架构" tabindex="-1"><a class="header-anchor" href="#rocketmq-的存储架构"><span>RocketMQ 的存储架构</span></a></h2><figure><img src="`+m+'" alt="image-20250421172928119" tabindex="0" loading="lazy"><figcaption>image-20250421172928119</figcaption></figure><p>消息存储架构图中主要有下面三个跟消息存储相关的文件构成。CommitLog文件、ConsumeQueue文件、Index文件：</p><p>（1） <strong>CommitLog</strong>：<strong>消息主体以及元数据的存储主体</strong>，存储 Producer 端写入的消息主体内容，<strong>消息内容不是定长的</strong>。单个文件大小默认 1G，文件名长度为 20 位，左边补零，剩余为起始偏移量，比如 00000000000000000000 代表了第一个文件，起始偏移量为 0，文件大小为 1G = 1073741824；当第一个文件写满了，第二个文件为 00000000001073741824，起始偏移量为 1073741824 ，以此类推。消息主要是<strong>顺序写入</strong>日志文件，当文件满了，写入下一个文件；</p><p>因为 CommitLog 的文件是存储在磁盘上的，为了提高写入消息的性能，RocketMQ 使用了 mmap 将磁盘文件映射到内存中。映射到的内存到 page cache，现代的操作系统内核被设计为按照 Page 读取文件，每个 Page 的默认大小是 4kb，如果读取的内容名字了 page cache 就直接返回，不会再次读取磁盘了。但是 page cache 也有脏页回写、内存回收、内存置换等情况，RocketMQ 通过内存预热、设定内存不置换等措施来优化。</p><p>TODO-KWOK 上图，那本书上有图，抄一个即可</p><p>（2） <strong>ConsumeQueue</strong>：<strong>消息消费队列，引入的目的主要是提高消息消费的性能</strong>。由于 RocketMQ 是基于主题 topic 的订阅模式，消息消费是针对主题进行的，如果要遍历 commitlog 文件，根据 topic 检索消息是非常低效的。Consumer 可根据 ConsumeQueue 来查找待消费的消息。其中，<strong>ConsumeQueue（逻辑消费队列）作为消费消息的索引，保存了指定 topic 下的队列消息在 CommitLog 中的起始物理偏移量 offset，消息大小 size 和消息 Tag 的 HashCode 值。consumequeue 文件可以看成是基于 topic 的 commitlog 索引文件</strong>，故 consumequeue 文件夹的组织方式如下：topic/queue/file 三层组织结构，具体存储路径为： $HOME/store/consumequeue/{topic}/{queueId}/{fileName}。同样 consumequeue 文件采取定长设计，<strong>每一个条目共 20 个字节，分别为 8 字节的 commitlog 物理偏移量、4 字节的消息长度、8 字节 tag hashcode</strong>，存储 tag 的哈希码的原因是为了保证每个条目的长度一致，可以使用类似数组下标快速访问条目。单个文件由 30W 个条目组成，可以像数组一样随机访问每一个条目，每个 ConsumeQueue 文件大小约 5.72M；</p><p>消息消费者根据 topic、消息消费进度（ConsumeQueue 逻辑偏移量），也就是第几个 ConsumeQueue 条目，类似数组的索引，这样的消费进度去访问消息，通过逻辑偏移量 logicOffset × 20，即可找到该条目的起始偏移量（ConsumeQueue 文件中的偏移量），然后读取该偏移量后 20 个字节即可得到一个条目，无须遍历 ConsumeQueue 文件。</p><img src="'+k+'" alt="image-20250421215242824" style="zoom:40%;"><p>（3） <strong>IndexFile</strong>：<strong>IndexFile（索引文件）提供了一种可以通过 key 或时间区间来查询消息的方法，主要存储消息 key 与 offset 的对应关系</strong>。Index 文件的存储位置是：$HOME/store/index/{fileName}，文件名 fileName 是以创建时的时间戳命名的，<strong>固定的单个 IndexFile 文件大小约为 400M，一个 IndexFile 可以保存 2000W 个索引，IndexFile 的底层存储设计为在文件系统中实现 HashMap 结构，故 RocketMQ 的索引文件其底层实现为 hash 索引。</strong></p><p>TODO-KWOK 上图，那本书上有图，抄一个即可</p><p>在上面的 RocketMQ 的消息存储整体架构图中可以看出，RocketMQ 采用的是混合型的存储结构，即为 <strong>Broker 单个实例下所有的队列共用一个日志数据文件（即为 CommitLog ）来存储</strong>。RocketMQ 的混合型存储结构（多个 Topic 的消息实体内容都存储于一个 CommitLog 中）针对 Producer 和 Consumer 分别<strong>采用了数据和索引部分相分离的存储结构</strong>，Producer 发送消息至 Broker 端，然后 <strong>Broker 端使用同步或者异步的方式对消息刷盘持久化，保存至 CommitLog 中。只要消息被刷盘持久化至磁盘文件 CommitLog 中，那么 Producer 发送的消息就不会丢失</strong>。正因为如此，Consumer 也就肯定有机会去消费这条消息。当无法拉取到消息后，可以等下一次消息拉取，同时<strong>服务端也支持长轮询模式，如果一个消息拉取请求未拉取到消息，Broker 允许等待 30s 的时间，只要这段时间内有新消息到达，将直接返回给消费端</strong>。这里，RocketMQ 的具体做法是，使用 Broker 端的后台服务线程 — ReputMessageService 不停地分发请求并异步构建 ConsumeQueue（逻辑消费队列）和 IndexFile（索引文件）数据。</p><p>TODO-KWOK consumerQueue 和 index 文件的生成时机</p><h2 id="rocketmq-针对存储做的优化" tabindex="-1"><a class="header-anchor" href="#rocketmq-针对存储做的优化"><span>RocketMQ 针对存储做的优化</span></a></h2><h3 id="顺序写入" tabindex="-1"><a class="header-anchor" href="#顺序写入"><span>顺序写入</span></a></h3><ul><li><strong>原理</strong>：RocketMQ 的 CommitLog 采用顺序写入的方式存储消息。在底层，它通过<code>MappedFileQueue</code>来管理一系列的<code>MappedFile</code>，消息会被顺序地写入到<code>MappedFile</code>中。</li><li><strong>优势</strong>：顺序写入大大<strong>减少了磁盘寻道时间</strong>，提升了写入性能。与随机写入相比，顺序写入可以充分利用磁盘的顺序读写特性，提高磁盘 I/O 的效率，从而能够支持高并发的消息写入。</li></ul><h3 id="内存映射文件-memory-mapped-file" tabindex="-1"><a class="header-anchor" href="#内存映射文件-memory-mapped-file"><span>内存映射文件（Memory - Mapped File）</span></a></h3><ul><li><strong>原理</strong>：RocketMQ 使用内存映射文件来实现文件的读写操作。通过<code>MappedByteBuffer</code>将文件映射到内存地址空间，这样<strong>可以直接在内存中对文件进行操作</strong>，而不需要通过传统的<code>read()</code>和<code>write()</code>系统调用。</li><li><strong>优势</strong>：一方面，内存映射文件减少了数据在用户空间和内核空间之间的<strong>拷贝次数</strong>，提高了数据读写的效率。另一方面，操作系统会自动对内存映射文件进行缓存管理，将最近访问过的页面缓存在内存中，进一步加速了文件的访问。</li></ul><h3 id="零拷贝-zero-copy" tabindex="-1"><a class="header-anchor" href="#零拷贝-zero-copy"><span>零拷贝（Zero - Copy）</span></a></h3><ul><li><strong>原理</strong>：在消息发送和消费过程中，RocketMQ 利用了零拷贝技术。例如，在发送消息时，通过<code>FileChannel</code>的<code>transferTo()</code>方法<strong>将文件内容直接发送到网络通道，而不需要将数据先拷贝到用户空间的缓冲区</strong>。</li><li><strong>优势</strong>：零拷贝技术避免了数据的冗余拷贝，减少了 CPU 和内存的开销，提高了消息传输的性能和效率，尤其是在处理大文件或高并发的消息传输场景下，效果更为显著。</li></ul><p>零拷贝是一种优化技术，旨在减少数据在计算机内存中复制的次数，从而提高 I/O 操作的效率和性能2。以下是对 RocketMQ 中零拷贝技术的介绍：</p><p>零拷贝原理</p><ul><li>传统的数据传输，如从磁盘读取数据并通过网络发送，数据要从磁盘读到内核缓冲区，再从内核缓冲区拷贝到用户态缓冲区，接着又拷贝回内核态以便发送到网络，涉及多次数据拷贝和上下文切换。而零拷贝通过利用 <code>mmap</code>、<code>sendfile</code> 等系统调用，避免了从内核到用户空间的数据复制，减少了 CPU 和内存带宽的消耗。</li></ul><p>RocketMQ 中的零拷贝实现</p><ul><li>RocketMQ 采用内存映射（<code>mmap</code>）的方式实现零拷贝。<code>mmap</code> 将磁盘文件映射到进程的内存地址空间中，这样通过访问内存就可以直接对文件进行操作，而不需要显式的 I/O 操作。在 RocketMQ 中，消息被持久化到磁盘后，通过 <code>mmap</code> 映射到内存中。当有消费者需要读取消息时，RocketMQ 可以直接从内存映射区域中读取消息数据，避免了将数据从内核态拷贝到用户态的过程。不过在发送数据到网络时，RocketMQ 没有像 Kafka 那样直接使用 <code>sendfile</code>，因此其零拷贝主要体现在文件读写阶段，网络传输上仍存在数据拷贝操作。</li></ul><p>零拷贝技术的优势</p><ul><li><strong>性能提升</strong>：减少了 CPU 使用，提高 I/O 操作的性能。</li><li><strong>降低延迟</strong>：减少了数据复制的延迟，从而使数据传输更加高效。</li><li><strong>减小内存带宽压力</strong>：减少了内存数据传输，提高系统整体的吞吐量。</li></ul><h3 id="消息索引优化" tabindex="-1"><a class="header-anchor" href="#消息索引优化"><span>消息索引优化</span></a></h3><ul><li><strong>原理</strong>：RocketMQ 构建了多种索引结构来加速消息的查询和消费。除了常规的 <strong>ConsumeQueue 作为消息消费队列的索引外，还提供了 IndexFile 用于根据消息的 key 或时间范围来查询消息</strong>。IndexFile 采用了哈希索引和跳跃表等数据结构来实现快速的索引查找。</li><li><strong>优势</strong>：通过这些索引结构，消费者可以快速定位到需要消费的消息，提高了消息的拉取速度和消费效率。同时，索引的存在也使得在进行消息查询和回溯时更加高效，能够满足不同业务场景下对消息快速定位的需求。</li></ul><h3 id="刷盘策略优化" tabindex="-1"><a class="header-anchor" href="#刷盘策略优化"><span>刷盘策略优化</span></a></h3><ul><li><strong>原理</strong>：RocketMQ 提供了同步刷盘和异步刷盘两种策略，并且在源码层面进行了精细的控制和优化。同步刷盘通过<code>GroupCommitService</code>线程来确保消息及时、可靠地刷写到磁盘；异步刷盘则通过<code>FlushRealTimeService</code>线程<strong>按照一定的时间间隔或消息积累量来批量刷盘。</strong></li><li><strong>优势</strong>：这种设计允许用户根据业务对消息可靠性和性能的要求进行灵活配置。同步刷盘保证了消息的强一致性和可靠性，但会降低一定的性能；异步刷盘则在保证一定可靠性的前提下，通过批量操作提高了刷盘的性能和效率，满足了不同业务场景下的需求。</li></ul><h3 id="存储文件预分配" tabindex="-1"><a class="header-anchor" href="#存储文件预分配"><span>存储文件预分配</span></a></h3><ul><li><strong>原理</strong>：在 RocketMQ 启动时，会预先分配 CommitLog 和 ConsumeQueue 等存储文件的空间。通过<code>MappedFile</code>的构造函数，会在指定的存储目录下创建指定大小的文件，并将其映射到内存中。</li><li><strong>优势</strong>：这样避免了在运行过程中频繁地创建和扩展文件，减少了文件系统的碎片，提高了文件的读写性能。同时，预分配空间也使得文件的存储位置相对连续，有利于提高磁盘 I/O 的效率。</li></ul><h3 id="pagecache" tabindex="-1"><a class="header-anchor" href="#pagecache"><span>PageCache</span></a></h3><p><strong>页缓存（PageCache）机制概述</strong></p><p>页缓存（PageCache）是操作系统对文件的缓存机制，其目的在于加速文件的读写操作。在该机制下，操作系统会将一部分内存用作 PageCache。一般而言，程序对<strong>文件进行顺序读写的速度近乎于内存的读写速度</strong>，这主要得益于操作系统借助 PageCache 机制对读写访问操作进行了性能优化。</p><p><strong>PageCache 的读写原理</strong></p><p>对于数据写入，操作系统不会直接将数据写入物理磁盘，而是<strong>先将数据写入至 PageCache 内</strong>，随后再<strong>由 pdflush 内核线程以异步的方式将 PageCache 内的数据刷盘至物理磁盘上</strong>。而在数据读取方面，若一次读取文件时未命中 PageCache，操作系统在从物理磁盘上访问读取文件的同时，会对其他相邻块的数据文件进行顺序预读取，以便后续的读取操作能够更快地命中缓存。每个 Page 的默认大小为 4KB。</p><p><strong>PageCache 的局限性</strong></p><p>PageCache 虽然带来了显著的性能提升，但也存在一定缺点。当操作系统执行<strong>脏页回写、内存回收、内存交换等操作时，会引发较大的消息读写延迟</strong>。因为这些操作可能会占用系统资源，影响数据在 PageCache 与物理磁盘之间的传输，进而影响到依赖 PageCache 进行读写的应用程序的性能。</p><p><strong>RocketMQ 对 PageCache 的写入性能优化策略</strong></p><p>在 RocketMQ 中，Broker 在处理消息存储时，充分利用了 PageCache 的特性。**当 Broker 将数据写入 CommitLog 文件时，数据并非直接写入底层的物理磁盘文件，而是先进入操作系统的 PageCache 内存缓存中。后续，由操作系统的后台线程异步将 PageCache 中的数据刷入底层的磁盘文件中。**这种磁盘文件顺序写 + OS PageCache 写入 + OS 异步刷盘的策略，使得 RocketMQ 在消息写入性能上表现出色。一方面，顺序写减少了磁盘寻道时间，提高了写入效率；另一方面，PageCache 的缓存作用进一步减少了磁盘 I/O 次数，异步刷盘则在保证数据最终持久化的同时，避免了同步刷盘带来的性能损耗。</p><p><strong>PageCache 对 RocketMQ ConsumeQueue 的性能加持</strong></p><p>在 RocketMQ 的架构中，ConsumeQueue 作为逻辑消费队列，存储的数据量相对较少，并且其读取操作具有顺序性的特点。在 PageCache 机制的预读取作用下，操作系统会提前将相邻的数据块读取到 PageCache 中，这使得 ConsumeQueue 文件的读性能几乎接近读内存。即使在消息堆积的情况下，由于其顺序读取的特性，依然能够从 PageCache 中快速获取数据，不会对性能产生明显影响。</p><p><strong>RocketMQ CommitLog 文件的读取性能挑战与优化</strong></p><p>然而，对于 CommitLog 消息存储的日志数据文件来说，情况有所不同。在读取消息内容时，由于消息的存储和读取并非总是顺序的，会产生较多的随机访问读取操作。这些随机访问读取操作无法充分利用 PageCache 的预读取优势，需要频繁地从物理磁盘读取数据，严重影响了性能。为了改善这一情况，如果存储设备采用 SSD，并选择合适的系统 IO 调度算法，比如设置调度算法为 “Deadline”，随机读的性能会有所提升。“Deadline” 调度算法会为每个 I/O 请求设置一个截止时间，优先处理那些即将超过截止时间的请求，从而减少了 I/O 请求的响应时间，提高了随机读的性能，使 RocketMQ 在处理 CommitLog 文件的读取操作时更加高效。</p><h2 id="broker-刷盘机制" tabindex="-1"><a class="header-anchor" href="#broker-刷盘机制"><span>broker 刷盘机制</span></a></h2><figure><img src="'+h+'" alt="image-20250421195422147" tabindex="0" loading="lazy"><figcaption>image-20250421195422147</figcaption></figure><p><strong>同步刷盘</strong></p><ul><li>生产者发送消息到 Broker 后，消息首先被写入到内存的 PageCache 中。然后会将这些消息加入到一个待刷盘的组中，然后开始等待刷盘操作完成。只有当消息真正持久化到磁盘的物理文件后，Broker 才会向生产者返回消息发送成功的响应。</li><li>要等待落盘完成才响应给 producer，所有吞吐量也是最差的；</li></ul><p><strong>异步刷盘</strong></p><ul><li>将 PageCache 中的消息数据异步地持久化到磁盘。生产者发送消息后，Broker 把消息写入 PageCache 就立即向生产者返回发送成功的响应，后续由后台线程按照一定的时间间隔或者消息积累量来批量执行刷盘操作。</li><li>但是如果写到 page cache，宿主机崩溃了，这部分数据就丢失了。这时系统吞吐量虽然高了，但是有丢失数据的风险；</li></ul><p><strong>异步刷盘-内存级读写分离机制</strong></p><ul><li>消息首先会被写入到直接内存（Direct Memory），然后通过 commit 操作将堆外内存中的消息数据转移到操作系统的 PageCache 中，最后依赖操作系统的异步刷盘机制，将 PageCache 中的数据持久化到磁盘。</li><li>在写 page cache 和刷盘这两步都有丢失数据的风险；</li></ul><table><thead><tr><th>刷盘机制</th><th>异步实时刷盘</th><th>异步刷盘（内存读写分离）</th><th>同步刷盘</th></tr></thead><tbody><tr><td>数据一致性</td><td>中</td><td>低</td><td>高</td></tr><tr><td>数据可靠性</td><td>低</td><td>低</td><td>高</td></tr><tr><td>数据可用性</td><td>中</td><td>低</td><td>高</td></tr><tr><td>系统吞吐量</td><td>高</td><td>高</td><td>低</td></tr></tbody></table><h2 id="broker过期文件删除机制" tabindex="-1"><a class="header-anchor" href="#broker过期文件删除机制"><span>broker过期文件删除机制</span></a></h2><p>由于内存和磁盘都是有限的资源，Broker 不可能永久地保存所有数据，所以一些超过保存期限的数据会被定期删除。在 RocketMQ 中有 commitlog、ConsumeQueue、Index 这三种重要的文件。</p><p>RocketMQ 目前有两个情况会触发删除 commitLog 文件：</p><ul><li>假如 commitLog 文件最后一次更新时间距离当前已经超过 <strong>72 小时了</strong>（默认值，可配置）；</li><li>假如 commitLog 文件所在的<strong>磁盘空间超过 85% 时</strong>（默认值，可配置），也会触发删除操作。</li></ul><p>因为 CommitLog 文件会过期，那么其对应的 ConsumeQueue 和 Index 文件就没有必要再保留了，也是会删除。</p><h2 id="生产者端负载均衡" tabindex="-1"><a class="header-anchor" href="#生产者端负载均衡"><span>生产者端负载均衡</span></a></h2><p><strong>原理</strong></p><p>生产者端的负载均衡是指在发送消息时，如何将消息均匀地分发到多个 Broker 的多个队列上。这样可以充分利用各个队列的资源，提高消息发送的吞吐量和性能。</p><p><strong>实现方式</strong></p><ul><li><strong>轮询策略</strong>：这是 RocketMQ 默认的消息队列选择策略。生产者会按照顺序依次选择 Topic 下的各个队列进行消息发送。例如，对于一个包含 4 个队列的 Topic，生产者会依次将消息发送到队列 0、队列 1、队列 2、队列 3，然后再回到队列 0 继续循环。</li><li><strong>随机策略</strong>：生产者随机选择一个队列来发送消息。这种策略可以在一定程度上避免某些队列负载过高，但可能会导致消息分布不够均匀。</li><li><strong>根据消息的 key 进行哈希选择</strong>：生产者可以根据消息的 key 计算哈希值，然后根据哈希值选择对应的队列。这样可以保证具有相同 key 的消息总是被发送到同一个队列中，适用于需要保证消息顺序性的场景。</li></ul><h3 id="消费者端负载均衡" tabindex="-1"><a class="header-anchor" href="#消费者端负载均衡"><span>消费者端负载均衡</span></a></h3><p>消息队列的负载均衡和重分布是由 RebalanceService 处理的。这个<strong>后台线程</strong>服务会<strong>每隔 20 秒</strong>钟去<strong>处理消息队列的负载均衡和重分布。</strong></p><p>RocketMQ 提供五种队列分配策略，这里分析两种常用的。</p><h3 id="平均分配" tabindex="-1"><a class="header-anchor" href="#平均分配"><span>平均分配</span></a></h3><figure><img src="'+v+'" alt="image-20250421220305774" tabindex="0" loading="lazy"><figcaption>image-20250421220305774</figcaption></figure><p>假如某个 topic 有四个队列</p><ul><li>假如消费者组中有 2 个消费者：每个消费者分两个队列；</li><li>假如消费者组中有 3 个消费者：第一个消费者分两个队列，剩下两个消费者分别消费一个队列；</li><li>假如消费者组中有 4 个消费者：每个消费者分一个队列；</li><li>假如消费者组中有 5 个消费者：因为只有四个队列，所以<strong>最后一个消费者无法消费</strong>；</li></ul><p>消息队列分配原则为一个消费者可以分配多个消息队列，但<strong>同一个消息队列只会分配给一个消费者，如果消费者个数大于消息队列数量，则有些消费者无法消费消息。</strong></p><h3 id="平均环形分配" tabindex="-1"><a class="header-anchor" href="#平均环形分配"><span>平均环形分配</span></a></h3><figure><img src="'+b+'" alt="image-20250421220401414" tabindex="0" loading="lazy"><figcaption>image-20250421220401414</figcaption></figure><h3 id="负载均衡的动态调整" tabindex="-1"><a class="header-anchor" href="#负载均衡的动态调整"><span>负载均衡的动态调整</span></a></h3><ul><li><strong>消费者实例的动态增减</strong>：当消费者组中有新的消费者实例加入或有消费者实例退出时，RocketMQ 会自动触发负载均衡的重新分配。新加入的消费者实例会从其他消费者实例中获取部分队列进行消费，而退出的消费者实例的队列会被重新分配给其他消费者实例。</li><li><strong>队列的动态增减</strong>：当 Topic 的队列数量发生变化时，RocketMQ 也会重新进行负载均衡，以确保队列能够被合理地分配给消费者实例。</li></ul><h3 id="影响负载均衡的因素" tabindex="-1"><a class="header-anchor" href="#影响负载均衡的因素"><span>影响负载均衡的因素</span></a></h3><ul><li><strong>消费者实例的性能差异</strong>：如果消费者组中的各个消费者实例的性能差异较大，可能会导致部分消费者实例处理能力不足，而部分消费者实例处理能力过剩。可以通过监控消费者实例的性能指标，如消息处理延迟、吞吐量等，对消费者实例进行调整或优化。</li><li><strong>网络延迟</strong>：网络延迟可能会影响消息的传输速度和消费者实例的响应时间，从而影响负载均衡的效果。可以通过优化网络环境、选择合适的部署位置等方式来减少网络延迟的影响。</li></ul><h2 id="说说-topic-和-queue-的区别与联系" tabindex="-1"><a class="header-anchor" href="#说说-topic-和-queue-的区别与联系"><span>说说 Topic 和 Queue 的区别与联系？</span></a></h2><p><strong>概念维度</strong></p><ul><li><strong>Topic</strong>：是逻辑概念，作为消息的一种分类方式。生产者依据消息的业务属性，把消息发送到对应的 Topic 里。</li><li><strong>Queue</strong>：属于物理概念，是真正存储消息的地方。它是消息存储和消费的基本单元，就像一个个小格子，把消息有序存放。</li></ul><p><strong>功能用途</strong></p><ul><li><strong>Topic</strong>：主要用于消息的组织与管理，生产者通过它对消息分类，消费者则依据自身业务需求订阅相应 Topic 来获取消息。</li><li><strong>Queue</strong>：一方面负责存储消息，另一方面实现负载均衡和并行消费。一个 Topic 下的多个 Queue 可分布在不同 Broker 上，消费者能并行从不同 Queue 消费消息，提升系统吞吐量。</li></ul><p><strong>包含关系</strong></p><ul><li>一个 Topic 由多个 Queue 组成，Queue 是 Topic 物理存储的具体实现。生产者发到 Topic 的消息会分散存于该 Topic 下的各个 Queue 中。</li></ul><p><strong>协作完成消息传递</strong></p><ul><li>Queue 为 Topic 的消息传递提供基础支撑。消费者订阅 Topic 后，实际上是从该 Topic 下的 Queue 拉取消息进行消费。</li></ul><p><strong>负载均衡实现</strong></p><ul><li>多个 Queue 实现了 Topic 消息的负载均衡。生产者将消息均匀发往各个 Queue，消费者并行从不同 Queue 消费，提高系统性能。例如，一个有 4 个 Queue 的 Topic，多个消费者可分别从不同 Queue 拉取消息，实现并行处理。</li></ul><h2 id="简述-rocketmq-消息的生产和消费流程" tabindex="-1"><a class="header-anchor" href="#简述-rocketmq-消息的生产和消费流程"><span>简述 RocketMQ 消息的生产和消费流程？</span></a></h2><h3 id="消息生产流程" tabindex="-1"><a class="header-anchor" href="#消息生产流程"><span>消息生产流程</span></a></h3><ol><li><strong>生产者启动</strong>：生产者进程启动后，会与 NameServer 建立长连接，从 NameServer 获取 Broker 的元数据信息，包括 Broker 的地址、Topic 对应的队列分布等。</li><li><strong>选择队列</strong>：生产者在发送消息时，会根据配置的负载均衡策略（如轮询、随机、根据消息 key 哈希等）选择一个合适的队列。例如，若采用轮询策略，生产者会依次选择 Topic 下的各个队列。</li><li><strong>发送消息</strong>：生产者将消息发送到选择的队列所在的 Broker 节点。消息会先被写入 Broker 的内存（PageCache），之后根据刷盘策略（同步刷盘或异步刷盘）将消息持久化到磁盘。</li><li><strong>接收响应</strong>：Broker 处理完消息写入操作后，会向生产者返回发送结果。如果是同步刷盘，Broker 会在消息真正持久化到磁盘后才返回响应；如果是异步刷盘，Broker 会在消息写入 PageCache 后立即返回响应。</li></ol><h3 id="消息消费流程" tabindex="-1"><a class="header-anchor" href="#消息消费流程"><span>消息消费流程</span></a></h3><ol><li><strong>消费者启动</strong>：消费者进程启动后，同样会与 NameServer 建立长连接，获取 Broker 的元数据信息。然后，消费者会向 Broker 发送订阅请求，告知 Broker 自己感兴趣的 Topic。</li><li><strong>负载均衡</strong>：在集群消费模式下，消费者组中的各个消费者实例会根据负载均衡策略（如平均分配、一致性哈希等）对 Topic 下的队列进行分配，确保每个消费者实例负责消费一部分队列。在广播消费模式下，每个消费者实例会消费 Topic 下的所有队列。</li><li><strong>拉取消息</strong>：消费者根据分配到的队列，向对应的 Broker 节点发送拉取消息的请求。Broker 接收到请求后，会从队列中读取消息并返回给消费者。</li><li><strong>消费消息</strong>：消费者接收到消息后，会进行业务逻辑处理。处理完成后，消费者会向 Broker 提交消费进度，以便在下次启动时能够从正确的位置继续消费消息。</li></ol><h3 id="流程交互与协调" tabindex="-1"><a class="header-anchor" href="#流程交互与协调"><span>流程交互与协调</span></a></h3><ul><li><strong>NameServer 的作用</strong>：NameServer 作为 RocketMQ 的元数据管理中心，为生产者和消费者提供 Broker 的地址信息和 Topic 的路由信息，保证生产者和消费者能够找到正确的 Broker 节点进行消息的发送和接收。</li><li><strong>Broker 的角色</strong>：Broker 负责消息的存储和转发，接收生产者发送的消息并将其持久化到磁盘，同时根据消费者的请求提供消息服务。</li><li><strong>消息的顺序性</strong>：在顺序消息的场景下，生产者会将具有相同顺序要求的消息发送到同一个队列中，消费者按顺序从队列中消费消息，从而保证消息的顺序性。</li></ul><h2 id="rocketmq-如何实现高可用架构" tabindex="-1"><a class="header-anchor" href="#rocketmq-如何实现高可用架构"><span>RocketMQ 如何实现高可用架构？</span></a></h2><p>RocketMQ 通过多组件协同与多种机制保障，构建了高可用架构，主要体现在 NameServer、Broker 等组件的设计上，以下是详细介绍：</p><h3 id="nameserver-多节点部署" tabindex="-1"><a class="header-anchor" href="#nameserver-多节点部署"><span>NameServer 多节点部署</span></a></h3><p><strong>NameServer</strong> 是 RocketMQ 的元数据管理中心，为实现高可用，采用多节点部署模式。</p><ul><li><strong>无状态设计</strong>：每个 NameServer 节点都是无状态的，它们之间相互独立，不进行数据交互与同步。这意味着单个 NameServer 节点的故障不会影响其他节点的正常运行。</li><li><strong>Broker 多注册</strong>：Broker 会向所有 NameServer 节点注册自身信息，包括 Topic、队列等元数据。生产者和消费者在启动时，会从多个 NameServer 节点获取 Broker 的元数据信息。这样，当某个 NameServer 节点出现故障时，生产者和消费者仍可从其他正常的 NameServer 节点获取所需信息，确保系统能够继续正常工作。</li></ul><h3 id="broker-主从复制与故障转移" tabindex="-1"><a class="header-anchor" href="#broker-主从复制与故障转移"><span>Broker 主从复制与故障转移</span></a></h3><p><strong>主从架构设计</strong></p><p>Broker 采用主从架构，一个主 Broker（Master）可以对应多个从 Broker（Slave）。主 Broker 负责处理消息的读写操作，从 Broker 则从主 Broker 同步消息数据，实现数据的备份。</p><p><strong>同步与异步复制</strong></p><ul><li><strong>同步复制</strong>：主 Broker 在收到生产者发送的消息后，会等待从 Broker 同步该消息成功后，才向生产者返回消息发送成功的响应。这种方式能保证主从 Broker 的数据一致性，但会增加消息发送的延迟。</li><li><strong>异步复制</strong>：主 Broker 收到消息后，立即向生产者返回响应，然后异步地将消息同步给从 Broker。这种方式可以提高消息发送的性能，但在主 Broker 故障时，可能会有少量消息未同步到从 Broker。</li></ul><p><strong>故障转移</strong></p><p>当主 Broker 出现故障时，RocketMQ 可以通过手动或自动的方式进行故障转移。在自动故障转移场景下，通过监控系统检测到主 Broker 故障后，会将从 Broker 提升为主 Broker，继续提供服务，确保消息的正常读写。</p><h3 id="消息重试与补偿机制" tabindex="-1"><a class="header-anchor" href="#消息重试与补偿机制"><span>消息重试与补偿机制</span></a></h3><p><strong>生产者消息重试</strong></p><p>生产者在发送消息时，如果遇到网络异常、Broker 繁忙等问题导致消息发送失败，会进行重试。通过设置合理的重试次数和重试间隔，确保消息能够成功发送到 Broker。</p><p><strong>消费者消息重试</strong></p><p>消费者在消费消息时，如果处理失败，RocketMQ 会将消息重新放回队列，让消费者进行重试。可以根据业务需求设置重试次数和重试策略，避免因短暂的异常导致消息处理失败。</p><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h3><p><strong>生产者负载均衡</strong></p><p>生产者在发送消息时，会根据负载均衡策略（如轮询、随机、根据消息 key 哈希等）选择合适的队列进行消息发送。这样可以将消息均匀地分布到多个 Broker 节点上，避免单个 Broker 节点负载过高。</p><p><strong>消费者负载均衡</strong></p><p>在集群消费模式下，消费者组中的各个消费者实例会根据负载均衡策略（如平均分配、一致性哈希等）对 Topic 下的队列进行分配，确保每个消费者实例负责消费一部分队列，提高消费的效率和性能。</p><h2 id="rocketmq-出现消息堆积时-如何处理" tabindex="-1"><a class="header-anchor" href="#rocketmq-出现消息堆积时-如何处理"><span>RocketMQ 出现消息堆积时，如何处理？</span></a></h2><p>消费者处理能力不足</p><ul><li><strong>增加消费者实例</strong>：在集群消费模式下，可以通过增加消费者实例的数量来提高整体的消费能力。例如，原本有 2 个消费者实例，可以增加到 4 个，让更多的实例并行消费消息，从而加快消费速度。</li><li><strong>优化消费者代码</strong>：检查消费者的业务逻辑代码，看是否存在耗时过长的操作，如数据库查询、复杂计算等。可以对这些操作进行优化，例如使用缓存、异步处理等方式，减少单条消息的处理时间。</li><li><strong>调整消费线程数</strong>：适当增加消费者的消费线程数，提高单个消费者实例的并发消费能力。但要注意，线程数过多可能会导致系统资源竞争激烈，反而降低性能，需要根据实际情况进行调整。</li></ul><blockquote><p>注意：增加消费者实例不一定有效，还得看消息队列的个数够不够。</p><p>比如总共只有 4 个 queue，有 5 个消费者的话，其中有一个消费者是不消费消息的。</p></blockquote><p><strong>Broker 性能瓶颈</strong></p><ul><li><strong>增加 Broker 节点</strong>：通过水平扩展 Broker 节点，将消息分散到多个 Broker 上，减轻单个 Broker 的负载压力。</li><li><strong>优化 Broker 配置</strong>：调整 Broker 的配置参数，如刷盘策略、内存分配等，提高 Broker 的性能。例如，将刷盘策略从同步刷盘改为异步刷盘，可以提高消息的写入性能。</li></ul><h2 id="rocketmq-和-kafka-相比-有哪些优缺点" tabindex="-1"><a class="header-anchor" href="#rocketmq-和-kafka-相比-有哪些优缺点"><span>RocketMQ 和 Kafka 相比，有哪些优缺点？</span></a></h2><p>RocketMQ 优点：</p><ul><li><strong>功能特性丰富</strong>：支持事务消息、顺序消息等高级特性。事务消息可保证分布式系统中数据的最终一致性，适用于金融等对数据一致性要求高的场景；顺序消息能确保消息按照发送顺序被消费，满足如订单状态流转等业务需求。</li><li><strong>强大的运维管理能力</strong>：提供了直观的控制台和丰富的运维工具，方便进行集群管理、监控和故障排查。例如，可实时查看消息的生产和消费情况、Broker 的状态等。</li><li><strong>良好的中文文档和社区支持</strong>：对于国内开发者来说，学习和使用成本较低，遇到问题能更容易找到相关的资料和解决方案。</li></ul><p>Kafka 优点：</p><ul><li><strong>超高的吞吐量</strong>：采用了分区、批量读写和零拷贝等技术，在处理海量数据时表现出色，每秒可处理数百万条消息，适合大数据、日志收集等场景。</li><li><strong>生态系统完善</strong>：与众多大数据生态系统如 Hadoop、Spark 等有良好的集成，方便进行数据的存储、分析和处理。</li><li><strong>分布式扩展性强</strong>：能够轻松应对大规模的集群扩展，可通过增加 Broker 节点来提高系统的处理能力。</li></ul><p>RocketMQ 缺点：</p><ul><li><strong>吞吐量相对较低</strong>：在处理超大规模数据时，其吞吐量不如 Kafka，可能无法满足一些对吞吐量要求极高的场景。</li><li><strong>生态系统相对较窄</strong>：与大数据生态系统的集成不如 Kafka 广泛，在大数据处理方面的应用场景相对受限。</li></ul><p>Kafka 缺点：</p><ul><li><strong>功能特性相对较少</strong>：对事务消息、顺序消息等高级特性的支持不如 RocketMQ 完善，在一些对消息处理逻辑要求复杂的场景下使用不便。</li></ul><p>Kafka 适用场景</p><ul><li><strong>大数据领域</strong>：凭借其高吞吐量和完善的生态系统，适合用于<strong>日志收集</strong>、<strong>数据采集</strong>和实时数据分析等场景。</li><li><strong>流式处理</strong>：与<strong>流式处理框架</strong>的良好集成，比如 flink，使其成为构建实时数据处理管道的理想选择。</li></ul>',195))])}const C=l(B,[["render",Q]]),N=JSON.parse('{"path":"/interviewQA/RocketMQ%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html","title":"RocketMQ相关问题","lang":"en-US","frontmatter":{"title":"RocketMQ相关问题","description":"RocketMQ 各个角色 img Producer 消息发布的角色，支持分布式集群方式部署。 Producer 通过 MQ 的负载均衡模块选择相应的 Broker 集群队列进行消息投递，投递的过程支持快速失败并且低延迟； 支持消息重试。 Consumer 支持分布式集群方式部署； 支持以 push 推，pull 拉两种模式对消息进行消费； 同时也支持...","head":[["meta",{"property":"og:url","content":"https://blog.guosgbin.cn/interviewQA/RocketMQ%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:title","content":"RocketMQ相关问题"}],["meta",{"property":"og:description","content":"RocketMQ 各个角色 img Producer 消息发布的角色，支持分布式集群方式部署。 Producer 通过 MQ 的负载均衡模块选择相应的 Broker 集群队列进行消息投递，投递的过程支持快速失败并且低延迟； 支持消息重试。 Consumer 支持分布式集群方式部署； 支持以 push 推，pull 拉两种模式对消息进行消费； 同时也支持..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-21T14:37:13.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-21T14:37:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RocketMQ相关问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-21T14:37:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"超威蓝猫 Dylan Kwok\\",\\"url\\":\\"\\",\\"email\\":\\"guosgbin@163.com\\"}]}"]]},"git":{"createdTime":1745246233000,"updatedTime":1745246233000,"contributors":[{"name":"Dylan Kwok","username":"","email":"guosgbin@163.com","commits":1}]},"readingTime":{"minutes":41.2,"words":12360},"filePathRelative":"interviewQA/RocketMQ相关问题.md","localizedDate":"April 21, 2025","autoDesc":true}');export{C as comp,N as data};
