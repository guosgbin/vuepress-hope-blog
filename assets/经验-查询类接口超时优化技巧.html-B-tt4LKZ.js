import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as n}from"./app-B6zx7rvj.js";const h={};function e(l,s){return n(),a("div",null,s[0]||(s[0]=[t(`<table><thead><tr><th>版本</th><th>内容</th><th>时间</th></tr></thead><tbody><tr><td>V1</td><td>新建</td><td>2025-04-10 00:27:00</td></tr></tbody></table><table><thead><tr><th>名词</th><th>解释</th></tr></thead><tbody><tr><td>motan</td><td>微博 rpc 框架</td></tr></tbody></table><p>注意，本篇<strong>仅涉及代码层面的优化手段</strong>，不包括 redis、MySQL 等优化 rt 时间的手段</p><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>当前查询类接口成功率要求达到 99.999%，除了对一些常见接口错误处理过后，剩下的接口基本上都是 motan rpc 超时导致的错误，此时需要对这些超时的方法进行专门处理。</p><h2 id="跟踪分析超时方法" tabindex="-1"><a class="header-anchor" href="#跟踪分析超时方法"><span>跟踪分析超时方法</span></a></h2><p>使用arthas的trace，可以方便的跟踪方法的执行时间情况，找到耗时最长的方法，依次进行处理。</p><p>或者观察 Skywalking 等链路追踪观察节点耗时情况。</p><h2 id="常见的优化技巧" tabindex="-1"><a class="header-anchor" href="#常见的优化技巧"><span>常见的优化技巧</span></a></h2><h3 id="减少日志打印" tabindex="-1"><a class="header-anchor" href="#减少日志打印"><span>减少日志打印</span></a></h3><p>带有查询的方法尽量不要打日志，或者只能打 debug 日志（debug日志使用logger.isDebugEnabled()先进行判断）特别是日志中数据量较大，打印 list 或者 map 的，或者是使用 JSON 转换的大对象的。</p><p>循环中日志打印也要注意，如果能在循环外一次打印完成则放在循环外打印，不在要循环中打印。</p><p>异味：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doSth</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">	List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Data</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Data</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> data </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> list) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		doNestSth</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doNestSth</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;this is a log&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!WARNING]</p><p>有时候循环嵌套太深了，循环打印日志可能并不好发现</p></blockquote><h3 id="卫语句-尽早返回" tabindex="-1"><a class="header-anchor" href="#卫语句-尽早返回"><span>卫语句-尽早返回</span></a></h3><p>及早结束或返回（短路）</p><p>处理中，如果数据为 null 或者 list/map 为空，那么就立即进行 return，不要把空或者 null 的数据再去进行下一步的调用，节省时间。</p><h3 id="首选批量查询接口" tabindex="-1"><a class="header-anchor" href="#首选批量查询接口"><span>首选批量查询接口</span></a></h3><p>可以批量查询的话尽量使用批量查询，避免循环单个查询（可以扩展到 redis 和 mysql 的查询）</p><h3 id="批量查询入参去重" tabindex="-1"><a class="header-anchor" href="#批量查询入参去重"><span>批量查询入参去重</span></a></h3><p>批量查询注意去重</p><p>代码中的批量查询，查询的 id 如果可以去重的话，都进行去重操作（stream 的 distinct）</p><p>特别是非常容易重复的地方，比如各种数据流中 uid 的去重，动态下标签的去重等。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> batchQuerySth</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> idList) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 去重</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        idList </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> idList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">distinct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">collect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Collectors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 最真正的批量查询动作</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        doBatchQuerySth</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(idList)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="并行调用与结果聚合" tabindex="-1"><a class="header-anchor" href="#并行调用与结果聚合"><span>并行调用与结果聚合</span></a></h3><p>合理使用异步查询</p><p>如果代码中要调用多个查询方法，每个查询方法耗时都长，那么使用线程池并行处理这些请求是个好方法。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> querySth</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ExecutorService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> executor </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newFixedThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Future</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Data1</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> data1Future </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">submit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 查询动作1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Future</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Data2</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> data2Future </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">submit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 查询动作2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 组装数据 ......</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>类似的还有 CompletableFuture</p></blockquote><h3 id="本地缓存" tabindex="-1"><a class="header-anchor" href="#本地缓存"><span>本地缓存</span></a></h3><p>对于经常查询但是变化很少的数据进行本地缓存（guava、caffeine）</p><blockquote><p>需合理使用</p></blockquote><h3 id="缓存数据预热" tabindex="-1"><a class="header-anchor" href="#缓存数据预热"><span>缓存数据预热</span></a></h3><p>可预知的数据提前预热到缓存（本地缓存、redis）</p><p>例如：某主播开播前，客户端需要从服务端获取大量数据进行渲染。但是这些数据的组装，填充缓存这些动作都比较耗时。主播开播需要的数据是可预见的，可以再主播开播前提前加载到缓存。</p><h3 id="最小化查询数据" tabindex="-1"><a class="header-anchor" href="#最小化查询数据"><span>最小化查询数据</span></a></h3><p>针对自己想要的数据选择合适的查询方法</p><p>比如查询用户信息，如果只想获取用户的昵称/头像/性别的基本信息，而不需要勋章/刻印等，那么可以直接使用仅查询基本信息的接口。</p><blockquote><p>需要接口提供者进行兼容</p><p>（这里也是个设计原则：写出“小”的代码，然后在进行多个“小”代码的组装。而不是直接写出“大”代码，调用方可能不需要多余的数据但却无可奈何）</p></blockquote><h3 id="rpc-重试次数" tabindex="-1"><a class="header-anchor" href="#rpc-重试次数"><span>rpc 重试次数</span></a></h3><p>调整 motan rpc 查询的重试次数</p><p>默认重试次数为 0，可以调整为 1</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">motan:method</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;checkUserV1&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> argumentTypes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.lang.Long,java.lang.Boolean&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> retries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">requestTimeout=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;500&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="调整-rpc-超时时间" tabindex="-1"><a class="header-anchor" href="#调整-rpc-超时时间"><span>调整 rpc 超时时间</span></a></h3><p>如果经过多种优化措施后，耗时还是很多，那么可以调整超时时间</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">motan:method</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;getBatchUserInfo&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    argumentTypes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.util.List,com.weibo.zb.biz.commons.model.ThirdChannelType,java.lang.Boolean&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      requestTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;5000&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="接口整合与废弃数据清理" tabindex="-1"><a class="header-anchor" href="#接口整合与废弃数据清理"><span>接口整合与废弃数据清理</span></a></h3><p>将查询接口整合，不用的数据删除，重复的数据去重。</p><h3 id="http-调用重试" tabindex="-1"><a class="header-anchor" href="#http-调用重试"><span>HTTP 调用重试</span></a></h3><p>通过 HTTP 调用的查询接口，适当增加重试比如调用微博的广场流/H5的查询/阿里云的查询等</p>`,51)]))}const r=i(h,[["render",e]]),d=JSON.parse('{"path":"/business_issue_accumulations/%E7%BB%8F%E9%AA%8C-%E6%9F%A5%E8%AF%A2%E7%B1%BB%E6%8E%A5%E5%8F%A3%E8%B6%85%E6%97%B6%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7.html","title":"经验-查询类接口超时优化技巧","lang":"en-US","frontmatter":{"title":"经验-查询类接口超时优化技巧","description":"注意，本篇仅涉及代码层面的优化手段，不包括 redis、MySQL 等优化 rt 时间的手段 背景 当前查询类接口成功率要求达到 99.999%，除了对一些常见接口错误处理过后，剩下的接口基本上都是 motan rpc 超时导致的错误，此时需要对这些超时的方法进行专门处理。 跟踪分析超时方法 使用arthas的trace，可以方便的跟踪方法的执行时间情...","head":[["meta",{"property":"og:url","content":"https://blog.guosgbin.cn/business_issue_accumulations/%E7%BB%8F%E9%AA%8C-%E6%9F%A5%E8%AF%A2%E7%B1%BB%E6%8E%A5%E5%8F%A3%E8%B6%85%E6%97%B6%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7.html"}],["meta",{"property":"og:title","content":"经验-查询类接口超时优化技巧"}],["meta",{"property":"og:description","content":"注意，本篇仅涉及代码层面的优化手段，不包括 redis、MySQL 等优化 rt 时间的手段 背景 当前查询类接口成功率要求达到 99.999%，除了对一些常见接口错误处理过后，剩下的接口基本上都是 motan rpc 超时导致的错误，此时需要对这些超时的方法进行专门处理。 跟踪分析超时方法 使用arthas的trace，可以方便的跟踪方法的执行时间情..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-09T16:28:31.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-09T16:28:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"经验-查询类接口超时优化技巧\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-09T16:28:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"超威蓝猫 Dylan Kwok\\",\\"url\\":\\"\\",\\"email\\":\\"guosgbin@163.com\\"}]}"]]},"git":{"createdTime":1744216111000,"updatedTime":1744216111000,"contributors":[{"name":"Dylan Kwok","username":"","email":"guosgbin@163.com","commits":1}]},"readingTime":{"minutes":3.76,"words":1127},"filePathRelative":"business_issue_accumulations/经验-查询类接口超时优化技巧.md","localizedDate":"April 9, 2025","autoDesc":true}');export{r as comp,d as data};
