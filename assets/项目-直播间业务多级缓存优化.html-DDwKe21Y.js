import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as l}from"./app-BXgOmWjE.js";const n="/assets/image-20240305143633816-D1eE6S_F.png",e={};function h(p,i){return l(),a("div",null,i[0]||(i[0]=[t('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><h3 id="现状" tabindex="-1"><a class="header-anchor" href="#现状"><span>现状</span></a></h3><p>平台的主播开播关播，用户会调用很多接口获取直播间的一些信息。在直播间人数少的情况下，对服务影响不大。</p><p>随着 DAU 的上升，有些大主播的直播间的任务非常多。大主播开播、关播，用户同时进入直播间和进入休息室会有大量的接口调用，导致系统 QPS 激增。QPS 激增对系统的冲击比较大，其中表现就是给后端服务器、Redis、DB 等服务的 CPU 会激增。</p><p>为了应对突发流量，设计了直播间的开播和关播时的多级缓存优化。</p><h3 id="数据体现" tabindex="-1"><a class="header-anchor" href="#数据体现"><span>数据体现</span></a></h3><p>以一台服务为例，在关闭直播间的一瞬间时 CPU 的</p><img src="'+n+`" alt="image-20240305143633816" style="zoom:100%;"><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">单机QPS</th><th style="text-align:left;">总QPS</th></tr></thead><tbody><tr><td style="text-align:left;">关播前整体</td><td style="text-align:left;">1.46K</td><td style="text-align:left;">44.07K</td></tr><tr><td style="text-align:left;">关播瞬间</td><td style="text-align:left;">4.05K</td><td style="text-align:left;">122.24K</td></tr></tbody></table><h2 id="优化目标" tabindex="-1"><a class="header-anchor" href="#优化目标"><span>优化目标</span></a></h2><p>降低主播开播关播操作时后端服务器的 CPU 的使用率。</p><h2 id="问题分析思路、过程" tabindex="-1"><a class="header-anchor" href="#问题分析思路、过程"><span>问题分析思路、过程</span></a></h2><h3 id="定位是那些接口导致的-cpu-激增" tabindex="-1"><a class="header-anchor" href="#定位是那些接口导致的-cpu-激增"><span>定位是那些接口导致的 CPU 激增</span></a></h3><p>通过观察 CPU 激增的时间段，以及对应时间的接口的 QPS 监控，发现一些接口的 QPS 瞬间激增。</p><ul><li>梳理这一瞬间 QPS 激增的接口路径，发现很大一部分接口是客户端在用户进入直播间和退出直播间时需要调用的接口；</li><li>梳理开播、关播后 3min 内访问高的接口对比；</li></ul><p>大主播开播 QPS 激增相关接口举例：</p><table><thead><tr><th>接口</th><th>开播前 QPS</th><th>开播瞬间 QPS</th><th>开播后 QPS</th></tr></thead><tbody><tr><td>查询直播间信息</td><td>500</td><td>10000</td><td>1000</td></tr><tr><td>客户端轮询接口，查询统计信息等</td><td>300</td><td>3000</td><td>600</td></tr><tr><td>进入直播间接口</td><td>100</td><td>5000</td><td>300</td></tr></tbody></table><p>大主播关播 QPS 激增相关接口举例：</p><table><thead><tr><th>接口</th><th>关播前 QPS</th><th>关播瞬间 QPS</th><th>关播后 QPS</th></tr></thead><tbody><tr><td>听众结束直播接口</td><td>0</td><td>9000</td><td>1000</td></tr><tr><td>查询直播间信息</td><td>400</td><td>6000</td><td>800</td></tr><tr><td>直播间在线人数</td><td>100</td><td>7000</td><td>4000</td></tr></tbody></table><h3 id="定位接口中的那部分导致-cpu-激增" tabindex="-1"><a class="header-anchor" href="#定位接口中的那部分导致-cpu-激增"><span>定位接口中的那部分导致 CPU 激增</span></a></h3><p>在灰度环境模拟，使用 skywalking 看一下这些接口的跨度，梳理接口的逻辑。</p><p>目前系统中有基本上所有数据都有 Redis 缓存层，但是 QPS 调用量大的接口里面可能需要查询各种各样的信息，导致接口的跨度比较大，可能会查询很多次 Redis 或者 DB。</p><h2 id="方案设计" tabindex="-1"><a class="header-anchor" href="#方案设计"><span>方案设计</span></a></h2><h3 id="方案梳理" tabindex="-1"><a class="header-anchor" href="#方案梳理"><span>方案梳理</span></a></h3><ol><li>降低接口跨度和响应事件： <ol><li>重写业务逻辑降低查询次数；</li><li>优化循环查询，不支持的数据结构进行改造；</li><li>废弃冗余逻辑和老版本逻辑；</li><li>使用线程池异步处理任务；</li></ol></li><li>将一些接口的响应结果存放在缓存里面： <ol><li>对于数据实时性不高的接口数据，将接口结果直接放入缓存 n 秒；</li><li>对于要求实效的接口，梳理是否有可以缓存起来的数据，实时查询和缓存结合；</li></ol></li><li>客户端下掉不必要的接口调用，取消查询客户端不需要的字段： <ol><li>梳理重复调用和不需调用的接口，让客户端不再调用；</li></ol></li></ol><h3 id="最终方案" tabindex="-1"><a class="header-anchor" href="#最终方案"><span>最终方案</span></a></h3><p>最终的方案是：</p><ul><li>将大主播开关播使用的接口数据整合到 Redis 和本地缓存中；</li><li>在开播、关播、数据变更时预先加载数据至缓存中，同时定时刷新缓存数据；</li><li>减少不必要接口调用，精简接口字段；</li><li>缓存采用「算法路由+多节点负载」的架构，保证请求均匀分发到多个实例，避免单点压力；</li></ul><p>数据预热：开播，关播时提前刷新好 redis 缓存。</p><ul><li>开播时倒计时几秒开播，在这几秒钟内做数据预热；</li><li>关闭时倒计时几秒关播，在这几秒钟内做数据预热；</li><li>因为关播用户会全部直接涌入休息室，让客户端在主播关闭时，用户 5 秒钟之内随机调用进入休息室的逻辑；</li></ul><h3 id="本地缓存回种超时优化-异步刷新" tabindex="-1"><a class="header-anchor" href="#本地缓存回种超时优化-异步刷新"><span>本地缓存回种超时优化（异步刷新）</span></a></h3><p>背景：礼物的数据更新的频率不高，使用本地缓存去存储，但是假如本地缓存过期回种的时候只会允许一个线程去刷新数据，其他线程就会等待，导致 RPC 超时，给用户不好的体验。</p><p>优化：针对礼物这种静态数据但请求量大的业务场景，通过异步刷新本地缓存 , 保证本地缓存的数据是最新的。</p><ul><li>查询时先获取上次刷新的时间，如果到了需要刷新的时间仍然返回缓存中的结果，同时启动异步刷新缓存的任务；</li><li>这样可以避免在用户请求线程中回种导致用户请求超时；</li><li>例如有些业务，比如查询主播自定义礼物单次从查询回种需要查询 1900+ 条数据回种必然超时，可以使用这个工具类异步刷新本地缓存；</li></ul><p>主要优化思路：</p><ul><li>一个业务需要保存两个本地缓存的 key，一个实际数据和上次刷新时间；</li><li>如果从本地缓存没有获取到数据，那么还是要同步等待数据刷新；</li><li>如果从本地缓存获取到了数据，但是距离上次刷新时间已经到期了。此次会返回旧数据，然后异步刷新数据；</li></ul><p>部分代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> V</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> get</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> key </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Callable</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">V</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> call){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取缓存值</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    V</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (V) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getIfPresent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取缓存的刷新时间</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> refershTime </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (Long) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getIfPresent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> EXPIREKEY);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (call </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (refershTime </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">warn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;init cache key {} current size {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, key , </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> refresh</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> call)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 判断缓存是否需要刷新，如果需要刷新就异步刷新</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">needRefresh</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(key) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> call </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> refresh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key,call));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 无论缓存是否过期都返回一份数据</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果分析" tabindex="-1"><a class="header-anchor" href="#效果分析"><span>效果分析</span></a></h2><p>降低主播开播关播操作时后端服务器的 CPU 的使用率，已经没有明显峰刺了。</p><h2 id="优化总结" tabindex="-1"><a class="header-anchor" href="#优化总结"><span>优化总结</span></a></h2><p>本地缓存的问题</p><p>问题：本地缓存会出现 「数据漂移」的现象。具体体现为集群中的多个服务中的本地缓存的刷新时机不一样，两台机器内的本地数据的不一样，用户两次请求分别打到了这两个机器上，导致用户看到的效果不同。</p><p>解决：无法解决，使用本地缓存的场景就是为了存储数据变更频率不高的场景，那么对这种数据不一致性是可以接受的。</p>`,44)]))}const r=s(e,[["render",h]]),c=JSON.parse('{"path":"/business_issue_accumulations/%E9%A1%B9%E7%9B%AE-%E7%9B%B4%E6%92%AD%E9%97%B4%E4%B8%9A%E5%8A%A1%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96.html","title":"项目-直播间业务多级缓存优化","lang":"en-US","frontmatter":{"title":"项目-直播间业务多级缓存优化","description":"背景 现状 平台的主播开播关播，用户会调用很多接口获取直播间的一些信息。在直播间人数少的情况下，对服务影响不大。 随着 DAU 的上升，有些大主播的直播间的任务非常多。大主播开播、关播，用户同时进入直播间和进入休息室会有大量的接口调用，导致系统 QPS 激增。QPS 激增对系统的冲击比较大，其中表现就是给后端服务器、Redis、DB 等服务的 CPU ...","head":[["meta",{"property":"og:url","content":"https://blog.guosgbin.cn/business_issue_accumulations/%E9%A1%B9%E7%9B%AE-%E7%9B%B4%E6%92%AD%E9%97%B4%E4%B8%9A%E5%8A%A1%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:title","content":"项目-直播间业务多级缓存优化"}],["meta",{"property":"og:description","content":"背景 现状 平台的主播开播关播，用户会调用很多接口获取直播间的一些信息。在直播间人数少的情况下，对服务影响不大。 随着 DAU 的上升，有些大主播的直播间的任务非常多。大主播开播、关播，用户同时进入直播间和进入休息室会有大量的接口调用，导致系统 QPS 激增。QPS 激增对系统的冲击比较大，其中表现就是给后端服务器、Redis、DB 等服务的 CPU ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-03T07:07:29.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-03T07:07:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"项目-直播间业务多级缓存优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-03T07:07:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"超威蓝猫 Dylan Kwok\\",\\"url\\":\\"\\",\\"email\\":\\"guosgbin@163.com\\"}]}"]]},"git":{"createdTime":1743664049000,"updatedTime":1743664049000,"contributors":[{"name":"Dylan Kwok","username":"","email":"guosgbin@163.com","commits":1}]},"readingTime":{"minutes":5.72,"words":1715},"filePathRelative":"business_issue_accumulations/项目-直播间业务多级缓存优化.md","localizedDate":"April 3, 2025","autoDesc":true}');export{r as comp,c as data};
