import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as i,o as a}from"./app-dJCILimo.js";const n="/assets/db-redis-event-3-CD-iytQa.png",l="/assets/lru_comparison-CTUd92_u.png",r="/assets/db-redis-object-2-3-BoYUh44f.png",d="/assets/p525813-DxbwgMCa.png",p="/assets/p277459-9101775-z5Vdz3WY.png",o="/assets/image-20231022111846907-ov9TpYs6.png",h={};function g(k,t){return a(),s("div",null,t[0]||(t[0]=[i('<h2 id="redis-为什么这么快-重要" tabindex="-1"><a class="header-anchor" href="#redis-为什么这么快-重要"><span>Redis 为什么这么快？ （ 重要）</span></a></h2><ol><li><p><strong>基于内存，数据存在内存中</strong>。Redis 为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以 redis 具有快速和数据持久化的特征。<strong>如果不将数据放在内存中，磁盘 I/O 速度为严重影响 redis 的性能</strong>。 如果设置了最大使用的内存，则数据已有记录数达到内存限值后不能继续插入新值。</p></li><li><p><strong>数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的</strong>；</p></li><li><p><strong>采用单线程来执行命令，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题</strong>。（利用队列技术将并发访问变为串行访问）</p><blockquote><p>Redis 是单线程主要是指执行命令由一个线程来完成的，但 Redis 的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的。</p></blockquote></li><li><p><strong>Redis 的瓶颈主要在 IO 而不是 CPU</strong>。使用多路 IO 复用模型，非阻塞 IO。Redis 采用了多路复用机制使其在网络 IO 操作中能并发处理大量的客户端请求，实现高吞吐率。</p></li></ol><h2 id="redis-的事件模型-重要" tabindex="-1"><a class="header-anchor" href="#redis-的事件模型-重要"><span>Redis 的事件模型（ 重要）</span></a></h2><p>Redis 使用的 IO 多路复用技术主要有：<code>select</code>、<code>epoll</code>、<code>evport</code>和<code>kqueue</code>等。每个 IO 多路复用函数库在 Redis 源码中都对应一个单独的文件，比如<code>ae_select.c</code>，<code>ae_epoll.c</code>， <code>ae_kqueue.c</code>等。Redis 会根据不同的操作系统，按照不同的优先级选择多路复用技术。事件响应框架一般都采用该架构，比如 netty。</p><p>如下图所示，文件事件处理器有四个组成部分，它们分别是套接字、I/O多路复用程序、文件事件分派器以及事件处理器。</p><img src="'+n+'" alt="img" style="zoom:67%;"><p>文件事件是对套接字操作的抽象，每当一个套接字准备好执行 <code>accept</code>、<code>read</code>、<code>write</code>和 <code>close</code> 等操作时，就会产生一个文件事件。因为 Redis 通常会连接多个套接字，所以多个文件事件有可能并发出现。</p><p>I/O多路复用程序负责监听多个套接字，并向文件事件派发器传递那些产生了事件的套接字。</p><p>尽管多个文件事件可能会并发出现，但 <strong>I/O 多路复用程序总是会将所有产生的套接字都放到同一个队列里边，然后文件事件处理器会以有序、同步、单个套接字的方式处理该队列中的套接字</strong>，也就是处理就绪的文件事件。<strong>因为文件事件分派器队列的消费是单线程的，所以 Redis 才叫单线程模型</strong>。</p><h2 id="缓存穿透、缓存击穿、缓存雪崩-重要" tabindex="-1"><a class="header-anchor" href="#缓存穿透、缓存击穿、缓存雪崩-重要"><span>缓存穿透、缓存击穿、缓存雪崩（ 重要）</span></a></h2><h3 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透"><span>缓存穿透</span></a></h3><p><strong>缓存穿透</strong>：指访问的数据是<strong>缓存和 DB 中都没有的数据</strong>。缓存不起作用，请求会穿透到DB，流量大时DB会挂掉。</p><p><strong>针对</strong>：某些 redis key。</p><p>解决方案：</p><ol><li>采用布隆过滤器，使用一个足够大的 bitmap，用于存储可能访问的 key，不存在的 key 直接被过滤；</li><li>从 cache 和 db 都取不到，可以将 key-value 写为 key-null，设置较短过期时间，如 30 秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个 id 暴力攻击。</li></ol><h3 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩"><span>缓存雪崩</span></a></h3><p>**缓存雪崩：**指缓存中大量的数据到了过期时间，导致在缓存在同一时刻全部失效，造成瞬时 DB 请求量大、压力骤增，引起雪崩。</p><p><strong>针对</strong>：大量 redis key。</p><p>解决方案：</p><ol><li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li><li>如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中。</li><li>设置热点数据永远不过期。</li></ol><h3 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿"><span>缓存击穿</span></a></h3><p>**缓存击穿：**指访问的数据是缓存中没有，但是 DB 中有的数据。在该数据缓存过期的一瞬间，同时有大量的请求，这些请求都会击穿到 DB，造成瞬时 DB 请求量大、压力骤增。</p><p><strong>针对</strong>：单个 redis key。</p><p>解决方案：</p><ol><li>设置热点数据永远不过期；</li><li>加互斥锁，所谓的互斥锁，就是保证同一时间只有一个业务线程更新缓存，对于没有获取互斥锁的请求，要么等待锁释放后重新读取缓存，要么就返回空值或者默认值；</li></ol><h2 id="数据库和缓存的一致性问题-重要" tabindex="-1"><a class="header-anchor" href="#数据库和缓存的一致性问题-重要"><span>数据库和缓存的一致性问题（ 重要）</span></a></h2><p>问题来源：使用 redis 做缓存操作，让请求先访问到 redis，而不是直接访问 MySQL 等数据库；读取缓存步骤一般没有什么问题，但是一旦涉及到数据更新：数据库和缓存更新，就容易出现缓存（Redis）和数据库（MySQL）间的数据一致性问题。</p><p><strong>不管是先写 MySQL 数据库，再删除 Redis 缓存；还是先删除缓存，再写库，都有可能出现数据不一致的情况</strong>。举一个例子：</p><ol><li>如果删除了缓存 Redis，还没有来得及写库 MySQL，另一个线程就来读取，发现缓存为空，则去数据库中读取数据写入缓存，此时缓存中为脏数据。</li><li>如果先写了库，在删除缓存前，写库的线程宕机了，没有删除掉缓存，则也会出现数据不一致情况。</li></ol><p>因为写和读是并发的，没法保证顺序,就会出现缓存和数据库的数据不一致的问题。</p><p>一般情况最常用的是：</p><ul><li><strong>读的时候</strong>，先读缓存，缓存没有的话，就读数据库，然后取出数据后放入缓存，同时返回响应。</li><li><strong>更新的时候</strong>，<strong>先更新数据库，然后再删除缓存</strong>。</li></ul><p>其具体逻辑如下：</p><ul><li><strong>失效</strong>：应用程序先从 cache 取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</li><li><strong>命中</strong>：应用程序从 cache 中取数据，取到后返回。</li><li><strong>更新</strong>：先把数据存到数据库中，成功后，再让缓存失效。（删除缓存）</li></ul><p>一个是查询操作，一个是更新操作的并发，首先，没有了删除 cache 数据的操作了，而是先更新了数据库中的数据，此时，缓存依然有效，所以，并发的查询操作拿的是没有更新的数据，但是，更新操作马上让缓存的失效了，后续的查询操作再把数据从数据库中拉出来。</p><p>Facebook 的论文《<a href="https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf" target="_blank" rel="noopener noreferrer">Scaling Memcache at Facebook在新窗口打开</a>》也使用了这个策略。为什么不是写完数据库后更新缓存？你可以看一下Quora上的这个问答《<a href="https://www.quora.com/Why-does-Facebook-use-delete-to-remove-the-key-value-pair-in-Memcached-instead-of-updating-the-Memcached-during-write-request-to-the-backend" target="_blank" rel="noopener noreferrer">Why does Facebook use delete to remove the key-value pair in Memcached instead of updating the Memcached during write request to the backend?在新窗口打开</a>》，主要是怕两个并发的写操作导致脏数据。</p><p>这个就不会有并发问题了？不是的，比如，一个是读操作，但是没有命中缓存，然后就到数据库中取数据，此时来了一个写操作，写完数据库后，让缓存失效，然后，之前的那个读操作再把老的数据放进去，所以，会造成脏数据。</p><p>但，**这个 case 理论上会出现，不过，实际上出现的概率可能非常低，因为这个条件需要发生在读缓存时缓存失效，而且并发着有一个写操作。**而实际上数据库的写操作会比读操作慢得多，而且还要锁表，而读操作必需在写操作前进入数据库操作，而又要晚于写操作更新缓存，所有的这些条件都具备的概率基本并不大。</p><p>所以，要么通过 2PC 或是 Paxos 协议保证一致性，要么就是拼命的降低并发时脏数据的概率，而 Facebook 使用了这个降低概率的玩法，因为 2PC 太慢，而 Paxos 太复杂。当然，<strong>最好还是为缓存设置上过期时间</strong>。</p><h2 id="redis-的键的过期删除策略-重要" tabindex="-1"><a class="header-anchor" href="#redis-的键的过期删除策略-重要"><span>Redis 的键的过期删除策略（ 重要）</span></a></h2><p>redis 采用的是<strong>定期删除 + 惰性删除</strong>策略。</p><p><strong>（1）为什么不用定时删除策略?</strong></p><p>定时删除：在设置 key 的过期时间的同时，为该 key 创建一个定时器，让定时器在 key 的过期时间来临时，对 key 进行删除；定时删除需要用一个定时器来负责监视 key，过期则自动删除。虽然内存及时释放，但是十分消耗 CPU 资源。在大并发请求下，CPU 要将时间应用在处理请求，而不是删除 key，因此没有采用这一策略。</p><p><strong>（2）定期删除+惰性删除是如何工作的呢?</strong></p><p>定期删除，redis 默认每个 100ms 检查（配置 hz 可控制间隔时间），是否有过期的 key，有过期 key 则删除。需要说明的是，redis 不是每个 100ms 将所有的 key 检查一次，而是随机抽取进行检查（如果每隔 100ms，全部 key 进行检查，redis 岂不是卡死）。因此，如果只采用定期删除策略，会导致很多 key 到时间没有删除。</p><p>于是，惰性删除派上用场。也就是说在你获取某个 key 的时候，redis 会检查一下，这个 key 如果设置了过期时间，那么就会判断这个 key 是否过期了？如果过期了此时就会删除。</p><p><strong>（3）采用定期删除+惰性删除就没其他问题了么?</strong></p><p>不是的，如果定期删除没删除 key。然后你也没即时去请求 key，也就是说惰性删除也没生效。这样，redis 的内存会越来越高。那么就应该采用内存淘汰机制。</p><p><strong>在持久化时遇到了过期的缓存会发生什么？</strong></p><ul><li>RDB 方式： <ul><li>持久化：持久化 key 之前，会检查是否过期，过期的 key 不进入 RDB 文件；</li><li>载入： <ul><li>如果 Redis 以主服务器的模式运行，那么会对 RDB 中的键进行时间检查，<strong>过期的键不会被恢复到 Redis 中</strong>；</li><li>如果 Redis 以从服务器的模式运行，那么 RDB 中所有的键都会被载入，忽略时间检查。在从服务器与主服务器进行数据同步的时候，从服务器的数据会先被清空，所以载入过期键不会有问题；</li></ul></li></ul></li><li>AOF 方式：对于 AOF 来说，如果一个键过期了，那么不会立刻对 AOF 文件造成影响。因为 Redis 使用的是<strong>惰性删除和定期删除</strong>，只有这个键被删除了，才会往 AOF 文件中追加一条 DEL 命令。<strong>在重写 AOF 的过程中，程序会检查数据库中的键，已经过期的键不会被保存到 AOF 文件中。</strong></li></ul><p><strong>主从服务对过期键的处理的不同处</strong></p><p>在运行过程中，对于主从复制的 Redis，主服务器和从服务器对于过期键的处理也不相同：</p><ol><li>对于主服务器，一个过期的键被删除了后，会<strong>向从服务器发送 DEL 命令</strong>，通知从服务器删除对应的键</li><li>从服务器接收到读取一个键的命令时，即使这个键已经过期，也不会删除，而是照常处理这个命令。</li><li><strong>从服务器接收到主服务器的 DEL 命令后，才会删除对应的过期键</strong>。</li></ol><p>这么做的主要目的是保证数据一致性，所以当一个过期键存在于主服务器时，也必然存在于从服务器。</p><h2 id="redis-内存淘汰策略-重要" tabindex="-1"><a class="header-anchor" href="#redis-内存淘汰策略-重要"><span>Redis 内存淘汰策略（ 重要）</span></a></h2><table><thead><tr><th>策略</th><th>说明</th></tr></thead><tbody><tr><td>volatile-lru</td><td>从已设置过期时间（Expire）的Key中，删除最近最少使用的Key（LRU算法），且不会考虑Key是否已经过期。</td></tr><tr><td>volatile-lfu</td><td>从已设置过期时间（Expire）的Key中，删除最不常用的Key（LFU算法）。</td></tr><tr><td>volatile-ttl</td><td>从已设置过期时间（Expire）的Key中，根据存活时间（TTL）从小到大排序进行删除。</td></tr><tr><td>volatile-random</td><td>从已设置过期时间（Expire）的Key中，随机删除一些Key。</td></tr><tr><td>allkeys-lru</td><td>从所有Key中，删除最近最少使用的Key（LRU算法）。</td></tr><tr><td>allkeys-lfu</td><td>从所有Key中，删除最不常用的Key（LFU算法）。</td></tr><tr><td>allkeys-random</td><td>从所有Key中，随机删除一些Key。</td></tr><tr><td>no-enviction</td><td>不删除任何Key，当内存达到上限时，将无法写入新数据，数据库会返回错误信息。</td></tr></tbody></table><ul><li><strong>什么时候用 allkeys-lru？</strong><ol><li>如果预计访问请求的特性呈现幂律分布，也就是说预计只有一部分元素会被频繁访问，而其余元素则很少被访问。使用 <strong>allkeys-lru</strong> 策略是一个不错的选择。如果不确定该选择哪种策略，<strong>allkeys-lru</strong> 也是一个很好的备选方案；</li></ol></li><li><strong>什么时候用 allkeys-random?</strong><ol><li>如果需要循环扫描所有键，并且持续访问它们，即所有键有相同的操作频率和重要性，则 <strong>allkeys-random</strong> 策略可以使得所有键被均衡地淘汰，并保证整个键空间的内存使用处于稳定状态；</li><li>如果预计访问请求的分布是均匀的，则 <strong>allkeys-random</strong> 策略也能够适应这种情况。与其他淘汰策略相比，在这种情况下使用随机策略更具有普适性和可靠性；</li></ol></li></ul><h2 id="redis-的-lru-算法-重要" tabindex="-1"><a class="header-anchor" href="#redis-的-lru-算法-重要"><span>Redis 的 LRU 算法（ 重要）</span></a></h2><h3 id="如果要你设计一个-lru-算法你需要考虑什么问题-leetcode-有题" tabindex="-1"><a class="header-anchor" href="#如果要你设计一个-lru-算法你需要考虑什么问题-leetcode-有题"><span>如果要你设计一个 LRU 算法你需要考虑什么问题（leetcode 有题）</span></a></h3><p>java 如何实现 lru 缓存淘汰策略？</p><ul><li>linkedhashmap 考察点： 查询时间复杂度O1、删除修改时间复杂度O1</li><li>有哪些需要考虑的？LRU 算法需要实现下面的特性 <ol><li>实现 get/put 方法 （都为 O(1) 的时间复杂度）</li><li>每次 get 时需要将访问的节点提前至队首</li><li>每次 put 需要判断队列是否已满，满了则将最后的节点删除，并且将该节点放至队首，不满则直接放队首</li></ol></li></ul><h3 id="redis-使用理论的-lru-的问题" tabindex="-1"><a class="header-anchor" href="#redis-使用理论的-lru-的问题"><span>Redis 使用理论的 LRU 的问题</span></a></h3><p>假如使用双链表来实现 LRU，需要用链表管理 Redis 中的所有数据，<strong>大量的节点访问就会带来频繁的链表节点的移动操作，会造成大量的额外空间和时间的消耗，从而降低 Redis 的性能</strong>。</p><h3 id="redis-近似-lru-的效果" tabindex="-1"><a class="header-anchor" href="#redis-近似-lru-的效果"><span>Redis 近似 LRU 的效果</span></a></h3><p>Redis LRU 算法并不是一个精确的实现。这意味着 Redis 每次淘汰键的时候可能没有选择最佳的淘汰对象，也就是说可能不是最久未访问的键。Redis 的实现是通过一个近似的 LRU 的算法淘汰键的，通过<strong>采样一小部分的键，淘汰这一小部分的键中访问时间最早的键</strong>。</p><p>Redis 3.0 改进了这个近似的 LRU 算法，也可以选择一个好的淘汰池。提高了算法的性能，使其能够更接近真实 LRU 算法的行为。</p><p>Redis 的 LRU 算法可以通过更改样本数来调整算法的精度，配置文件通过 <code>maxmemory-samples</code> 配置采样数量。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>maxmemory-samples 5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Redis 不使用真正的 LRU 实现的原因是它需要更多的内存。但是，对于使用 Redis 的应用程序，近似的 LRU 算法实际上已经满足使用要求了。此图将 Redis 使用的 LRU 近似与真实的 LRU 进行了比较。</p><img src="'+l+`" alt="LRU comparison"><ul><li><p><strong>测试过程</strong>：</p><p>生成上述图表的测试用给定数量的键填充了 Redis 服务器。从头到尾访问一次键，所以第一个添加的键在 LRU 算法中是最佳的淘汰对象。后面又添加了 50% 的密钥，以强制驱逐一半的旧键。</p></li><li><p><strong>三种不同颜色的含义</strong></p><ol><li>浅灰色带是被逐出的对象；</li><li>灰色带是未被逐出的对象；</li><li>绿色带是添加的对象；</li></ol></li></ul><p><strong>分析</strong>：</p><ul><li>预期的效果： <ol><li>理论的 LRU 实现预计的效果是在旧键中，前半部分的键将被淘汰；</li><li>Redis LRU 算法只会按概率淘汰旧键；</li></ol></li><li>上图 Theoretical LRU 是理论上的 LRU 的算法；</li><li>Redis 3.0 的近似的 LRU 的算法比 Redis 2.8 的效果要好。Redis 3.0 后的近似 LRU 算法可以调节采样键的数量，可以看到当把采样键的数量设置为 10 的时候和理论上 LRU 的算法的效果差不多了。需要注意的是将采样样本键的数量设置成 10 会产生以一些额外的 CPU 消耗；</li></ul><h3 id="redis-近似-lru-的实现" tabindex="-1"><a class="header-anchor" href="#redis-近似-lru-的实现"><span>Redis 近似 LRU 的实现</span></a></h3><p>Redis 近似的 LRU 实现涉及到了一个<strong>实例级别的全局 LRU 的时钟</strong>，Redis 会使用一个字段保存键值的时钟信息**，每次访问就会更新这个值，保存最新的时间戳**。</p><p>需要注意的是默认情况下这个时钟的精度是 1 秒钟，全局时钟的值更新频率由配置项 <code>hz</code> 控制，每次访问键值对的时候就会保存最新的时间戳，这样当 Redis 存储数据的内存达到了 <code>maxmemory</code> 的限制时，就会根据淘汰策略驱逐数据了，LRU 相关的淘汰策略，<strong>默认采样 5 个 key，通过键值保存的时间戳和全局时钟比较，找到其中最久未访问的数据去驱逐</strong>。</p><p>Redis的key的底层结构</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> redisObject {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    unsigned</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> type:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    unsigned</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> encoding:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 编码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    unsigned</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lru:LRU_BITS;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* LRU time (relative to global lru_clock) or</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   							* LFU data (least significant 8 bits frequency</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     					    * and most significant 16 bits access time). */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> refcount;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 引用计数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ptr;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 指向存储实际值的数据结构的指针，数据结构由 type、encoding 决定。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} robj;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redis-的-lfu-算法-todo-kwok" tabindex="-1"><a class="header-anchor" href="#redis-的-lfu-算法-todo-kwok"><span>Redis 的 LFU 算法 TODO-KWOK</span></a></h2><h2 id="redis-分布式锁原理" tabindex="-1"><a class="header-anchor" href="#redis-分布式锁原理"><span>Redis 分布式锁原理</span></a></h2><p><strong>synchronized 或者 Lock 都是线程锁，对同一个JVM进程内的多个线程有</strong>效。因为锁的本质是内存中存放一个标记，记录获取锁的线程是谁，这个标记对每个线程都可见。分布式环境中多个JVM，内存中的锁显然是不共享的，每个JVM进程都有自己的锁，自然无法保证线程的互斥了，这个时候我们就需要使用到分布式锁了。</p><p>最常见的解决方案是 Redis 实现，<strong>实现分布式锁要满足 3 点：多进程可见，互斥，可重入</strong>。</p><p>原理：</p><ul><li>获取锁的时候，使用 setnx（SETNX key val：当且仅当 key 不存在时，set 一个 key 为 val 的字符串，返回1；若 key 存在，则什么都不做，返回 0）加锁，锁的 value 值为一个随机生成的UUID，在释放锁的时候进行判断。并使用 expire 命令为锁添加一个超时时间，超过该时间则自动释放锁；</li><li><strong>获取锁的时候调用 setnx，如果返回 0，则该锁正在被别人使用，返回 1 则成功获取锁。 还设置一个获取的超时时间，若超过这个时间则放弃获取锁；</strong></li><li>释放锁的时候，通过 UUID 判断是不是该锁，若是该锁，则执行 del 进行锁释放；</li></ul><p>SET lock_key random_value NX PX 5000</p><p>值得注意的是：random_value：是客户端生成的唯一的字符串。NX：代表只在键不存在时，才对键进行设置操作。PX 5000：设置键的过期时间为5000毫秒。这样，如果上面的命令执行成功，则证明客户端获取到了锁。</p><p>解锁：解锁的过程就是将Key键删除。但也不能乱删，不能说客户端1的请求将客户端2的锁给删除掉。这时候random_value的作用就体现出来。</p><p>为了保证解锁操作的原子性，我们用LUA脚本完成这一操作。先判断当前锁的字符串是否与传入的值相等，是的话就删除Key，解锁成功。</p><h2 id="底层数据结构-todo-kwok" tabindex="-1"><a class="header-anchor" href="#底层数据结构-todo-kwok"><span>底层数据结构 TODO-KWOK</span></a></h2><img src="`+r+`" alt="img" style="zoom:67%;"><h2 id="为什么-redis-的-zset-使用跳表-重要" tabindex="-1"><a class="header-anchor" href="#为什么-redis-的-zset-使用跳表-重要"><span>为什么 redis 的 zset 使用跳表？（ 重要）</span></a></h2><p>简单来说，跳表其实是一种<strong>多层的有序链表</strong>。跳表来源于链表，在链表的基础上**结合了二分的思想进行改造。**我们知道：二分查找针对的有序数组，时间复杂度是o(logn)。如果是有序链表，查询和插入的的时间复杂度是o(n)。跳表就是链表的“二分查找”。<strong>跳表的查询，增加和删除的时间复杂度都是 logn 级别的；</strong></p><p>为什么 Zset 的实现用跳表而不用平衡树（如 AVL树、红黑树等）？</p><p>对于<a href="https://link.zhihu.com/?target=https%3A//news.ycombinator.com/item%3Fid%3D1171423" target="_blank" rel="noopener noreferrer">这个问题 (opens new window)</a>，Redis的作者 @<a href="https://www.zhihu.com/search?q=antirez&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2619230497%7D" target="_blank" rel="noopener noreferrer">antirez</a> 是怎么说的：</p><blockquote><p>There are a few reasons:<br> 1、They are not very memory intensive. It&#39;s up to you basically. Changing parameters about the probability of a node to have a given number of levels will make then less memory intensive than btrees.<br> 2、A sorted set is often target of many ZRANGE or ZREVRANGE operations, that is, traversing the skip list as a linked list. With this operation the cache locality of skip lists is at least as good as with other kind of balanced trees.<br> 3、They are simpler to implement, debug, and so forth. For instance thanks to the skip list simplicity I received a <a href="https://www.zhihu.com/search?q=patch&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2619230497%7D" target="_blank" rel="noopener noreferrer">patch</a> (already in Redis master) with augmented skip lists implementing ZRANK in O(log(N)). It required little changes to the code.</p></blockquote><p>主要是从内存占用、对范围查找的支持、实现难易程度这三方面总结的原因，简单翻译一下：</p><ul><li>它们不是非常内存密集型的。基本上由你决定。改变关于节点具有给定级别数的概率的参数将使其比 btree 占用更少的内存。</li><li><strong>Zset 经常需要执行 ZRANGE 或 ZREVRANGE 的命令，即作为链表遍历跳表</strong>。通过此操作，跳表的缓存局部性至少与其他类型的平衡树一样好。</li><li><strong>它们更易于实现、调试等</strong>。例如，由于跳表的简单性，我收到了一个补丁（已经在Redis master中），其中扩展了跳表，在 O(log(N) 中实现了 ZRANK。它只需要对代码进行少量修改。</li></ul><p>我再详细补充点：</p><ul><li><strong>从内存占用上来比较，跳表比平衡树更灵活一些</strong>。平衡树每个节点包含 2 个指针（分别指向左右子树），而跳表每个节点包含的指针数目平均为 1/(1-p)，具体取决于参数 p 的大小。如果像 Redis里的实现一样，取 p=1/4，那么平均每个节点包含 1.33 个指针，比平衡树更有优势。</li><li><strong>在做范围查找的时候，跳表比平衡树操作要简单</strong>。在平衡树上，我们找到指定范围的小值之后，还需要以<a href="https://www.zhihu.com/search?q=%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2619230497%7D" target="_blank" rel="noopener noreferrer">中序遍历</a>的顺序继续寻找其它不超过大值的节点。如果不对平衡树进行一定的改造，这里的中序遍历并不容易实现。而在跳表上进行范围查找就非常简单，只需要在找到小值之后，对第 1 层链表进行若干步的遍历就可以实现。</li><li><strong>从算法实现难度上来比较，跳表比平衡树要简单得多</strong>。平衡树的插入和删除操作可能引发子树的调整，逻辑复杂，而跳表的插入和删除只需要修改相邻节点的指针，操作简单又快速。</li></ul><h2 id="一致性哈希算法-todo-kwok" tabindex="-1"><a class="header-anchor" href="#一致性哈希算法-todo-kwok"><span>一致性哈希算法 TODO-KWOK</span></a></h2><p><a href="https://www.cnblogs.com/lpfuture/p/5796398.html" target="_blank" rel="noopener noreferrer">一致性哈希算法原理</a></p><h2 id="redis-的部署架构-阿里云文档" tabindex="-1"><a class="header-anchor" href="#redis-的部署架构-阿里云文档"><span>Redis 的部署架构（阿里云文档）</span></a></h2><blockquote><p><a href="https://help.aliyun.com/document_detail/54590.html" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/document_detail/54590.html</a></p></blockquote><table><thead><tr><th style="text-align:left;">架构类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://help.aliyun.com/document_detail/52685.htm#concept-fx3-jrg-tdb" target="_blank" rel="noopener noreferrer">标准版-单副本</a></td><td style="text-align:left;">适用于纯缓存场景，支持单节点集群弹性变配，满足高QPS（Queries per Second）场景，提供超高性价比。</td></tr><tr><td style="text-align:left;"><a href="https://help.aliyun.com/document_detail/52226.htm#concept-qf3-kjh-tdb" target="_blank" rel="noopener noreferrer">标准版-双副本</a></td><td style="text-align:left;">系统工作时主节点（Master）和副本（Replica）数据实时同步，若主节点发生故障，系统会快速将业务切换至备节点，全程自动且对业务无影响，保障服务高可用性。</td></tr><tr><td style="text-align:left;"><a href="https://help.aliyun.com/document_detail/59201.htm#concept-ydy-g24-tdb" target="_blank" rel="noopener noreferrer">集群版-单副本</a></td><td style="text-align:left;">单副本集群版实例采用集群架构，每个分片服务器采用单副本模式。适用于纯缓存类业务或者QPS压力较大的业务场景。</td></tr><tr><td style="text-align:left;"><a href="https://help.aliyun.com/document_detail/52228.htm#concept-tds-4mm-tdb" target="_blank" rel="noopener noreferrer">集群版-双副本</a></td><td style="text-align:left;">集群（Cluster）实例采用分布式架构，每个数据分片都支持主从切换（master-replica），能够自动进行容灾切换和故障迁移，保障服务高可用。同时提供多种规格，您可以根据业务压力选择对应规格，还可以随着业务的发展自由变配规格。集群版支持两种连接模式：<a href="https://help.aliyun.com/document_detail/52228.htm#section-h69-izd-531" target="_blank" rel="noopener noreferrer">代理模式</a>：提供智能的连接管理，降低应用开发成本。<a href="https://help.aliyun.com/document_detail/52228.htm#section-dqj-mgc-4ir" target="_blank" rel="noopener noreferrer">直连模式</a>：客户端绕过代理服务器直接访问后端数据分片，可降低网络开销和服务响应时间，适用于对Redis响应速度要求极高的业务。</td></tr><tr><td style="text-align:left;"><a href="https://help.aliyun.com/document_detail/62870.htm#concept-zm4-3mh-tdb" target="_blank" rel="noopener noreferrer">Redis读写分离版</a></td><td style="text-align:left;">与标准版-双副本架构类似，读写分离实例采用主从（Master-Replica）架构提供高可用，主节点挂载只读副本（Read Replica）实现数据复制，支持读性能线性扩展。 只读副本可以有效缓解热点key带来的性能问题，适合高读写比的业务场景。 读写分离实例提供非集群版和集群版：非集群版读写分离实例支持一个只读副本、三个只读副本或五个只读副本三种版本。集群版读写分离实例在每个分片下挂载一个只读副本，提供分片级别的自动读写分离能力，适合超大规模高读写比的业务场景。</td></tr></tbody></table><h2 id="redis-部署架构-阿里云文档" tabindex="-1"><a class="header-anchor" href="#redis-部署架构-阿里云文档"><span>Redis 部署架构（阿里云文档）</span></a></h2><table><thead><tr><th style="text-align:left;">实例架构</th><th style="text-align:left;">简介</th><th style="text-align:left;">适用场景</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://help.aliyun.com/document_detail/52226.htm#concept-qf3-kjh-tdb" target="_blank" rel="noopener noreferrer">标准架构</a></td><td style="text-align:left;">采用主从（master-replica）双副本架构，由主节点提供日常服务访问，备节点提供高可用。当主节点发生故障，系统会自动在30秒内切换至备节点，保障业务平稳运行。</td><td style="text-align:left;">对Redis协议兼容性要求较高的业务。将Redis作为持久化数据存储使用的业务。单个Redis性能压力可控的场景。Redis命令相对简单，排序和计算之类的命令较少的场景。</td></tr><tr><td style="text-align:left;"><a href="https://help.aliyun.com/document_detail/52228.htm#concept-tds-4mm-tdb" target="_blank" rel="noopener noreferrer">集群架构</a></td><td style="text-align:left;">由代理节点、数据分片和配置服务器组件构成，可通过增加数据分片的方式实现横向扩展。每个数据分片均为双副本（分别部署在不同机器上）高可用架构，主节点发生故障后，系统会自动进行主备切换保证服务高可用。</td><td style="text-align:left;">数据量较大的场景。整体读写请求的QPS压力较大的场景。吞吐密集型、高性能应用场景。</td></tr><tr><td style="text-align:left;"><a href="https://help.aliyun.com/document_detail/62870.htm#concept-zm4-3mh-tdb" target="_blank" rel="noopener noreferrer">读写分离架构</a></td><td style="text-align:left;">由代理节点、主从节点和只读节点构成。只读节点采取链式复制架构，扩展只读节点个数可使整体实例性能呈线性增长。</td><td style="text-align:left;">读请求QPS压力较大的场景（如热点数据集中）。对Redis协议兼容性要求较高的业务场景，例如规避集群架构的<a href="https://help.aliyun.com/document_detail/145968.htm#concept-2353537" target="_blank" rel="noopener noreferrer">使用限制</a>。<strong>说明</strong> 由于数据同步至只读节点存在一定延迟，不适用于数据一致性要求高的场景，可选用集群架构。</td></tr></tbody></table><ul><li>代理模式：客户端的请求由代理节点转发至数据分片，可享受代理节点带来的负载均衡、读写分离、故障转移、<a href="https://help.aliyun.com/document_detail/216309.htm#task-2078219" target="_blank" rel="noopener noreferrer">代理查询缓存</a>（仅<a href="https://help.aliyun.com/document_detail/126164.htm#concept-1254543" target="_blank" rel="noopener noreferrer">内存型</a>支持）、长连接等特性能力。更多信息，请参见<a href="https://help.aliyun.com/document_detail/142959.htm#concept-2334147" target="_blank" rel="noopener noreferrer">Redis Proxy特性说明</a>。</li><li>直连模式：可通过直连地址绕过代理，直接访问后端的数据分片（类似连接原生Redis集群）。相比代理模式，直连模式节约了通过代理处理请求的时间，可以在一定程度上提高Redis服务的响应速度。</li></ul><p>读写分离架构的解释：<a href="https://blog.51cto.com/u_15352876/5241656%EF%BC%8C%E4%B8%BB%E8%A6%81%E8%A7%A3%E9%87%8A%E4%BA%86%E6%98%9F%E5%9E%8B%E5%A4%8D%E5%88%B6%E5%92%8C%E9%93%BE%E5%BC%8F%E5%A4%8D%E5%88%B6%EF%BC%9B" target="_blank" rel="noopener noreferrer">https://blog.51cto.com/u_15352876/5241656，主要解释了星型复制和链式复制；</a></p><p>阿里的读写分离架构：<a href="https://help.aliyun.com/document_detail/62870.html" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/document_detail/62870.html</a></p><h2 id="redis-部署容灾方案-阿里云文档" tabindex="-1"><a class="header-anchor" href="#redis-部署容灾方案-阿里云文档"><span>Redis 部署容灾方案（阿里云文档）</span></a></h2><blockquote><p><a href="https://help.aliyun.com/document_detail/100734.html" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/document_detail/100734.html</a></p></blockquote><table><thead><tr><th style="text-align:left;">灾备方案</th><th style="text-align:left;">灾备级别</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://help.aliyun.com/document_detail/100734.htm#section-u3t-f4t-2gb" target="_blank" rel="noopener noreferrer">单可用区高可用方案</a></td><td style="text-align:left;">★★★☆☆</td><td style="text-align:left;">主备节点部署在同一可用区中的不同机器上，当任一节点发生故障时，由高可用HA（High Availability）系统自动执行故障切换，避免单点故障引起的服务中断。</td></tr><tr><td style="text-align:left;"><a href="https://help.aliyun.com/document_detail/100734.htm#section-h5s-zxn-fgb" target="_blank" rel="noopener noreferrer">同城容灾方案</a></td><td style="text-align:left;">★★★★☆</td><td style="text-align:left;">主备节点分别部署在同一地域下两个不同的可用区，当任一可用区因电力、网络等不可抗因素失去通信时，高可用HA系统将执行故障切换，确保整个实例的持续可用。</td></tr><tr><td style="text-align:left;"><a href="https://help.aliyun.com/document_detail/100734.htm#section-zhl-xdp-fgb" target="_blank" rel="noopener noreferrer">跨地域容灾方案</a></td><td style="text-align:left;">★★★★★</td><td style="text-align:left;">由多个子实例构成全球分布式实例，所有子实例通过同步通道保持实时数据同步，由通道管理器负责子实例的健康状态监测、主备切换等等异常事件的处理，适用于异地灾备、异地多活、应用就近访问、分摊负载等场景。更多介绍，请参见<a href="https://help.aliyun.com/document_detail/71881.htm#concept-qf1-mdk-zdb" target="_blank" rel="noopener noreferrer">全球多活</a>。</td></tr></tbody></table><h2 id="预估-redis-内存规格-重要" tabindex="-1"><a class="header-anchor" href="#预估-redis-内存规格-重要"><span>预估 redis 内存规格（重要）</span></a></h2><p>通常情况下，您需要考虑下述因素预估可能消耗的内存容量并在创建实例时选择对应的规格，该操作有助于节约成本、避免频繁变更规格给业务带来的影响，助力业务快速上云。</p><p><strong>重要</strong> 在确定云数据库Redis实例的内存容量时，首先<strong>要考虑存储的业务数据大小</strong>，除此之外，您还需额外<strong>考虑Redis自身运行占用的必要内存开销（例如进程元数据、复制缓冲区、内存碎片等）</strong>。</p><p>不同于自建Redis数据库，选用云数据库Redis时，您无需再额外考虑云数据库Redis持久化Fork写时复制占用的内存开销以及云数据库Redis增强功能（如安全白名单、审计、大Key、热Key等）的内存开销，这些开销由阿里云承担，不计入购买的实例内存容量。</p><p>需要考虑的如下：</p><ul><li><p>Key 的数据类型、长度和数量。</p><p><strong>说明</strong> 如果使用可包含元素的数据类型（例如Hash），您还需要计算每个Key中，各元素的数量和长度。</p></li><li><p>Value 的长度。</p></li><li><p>Key 的过期时间与<a href="https://help.aliyun.com/document_detail/38679.htm#concept-e5v-hs5-ydb" target="_blank" rel="noopener noreferrer">逐出策略</a>。</p></li><li><p>访问模型，例如大量的客户端连接、使用 Lua 脚本或事务等，均需要为其预留适量的内存。</p></li><li><p><strong>中长期的业务增长情况。</strong></p></li></ul><blockquote><p>我一般是通过在测试环境通过 <strong>memory usage 命令看占用的字节数，预估一下</strong></p></blockquote><h2 id="redis-线程模型-重要" tabindex="-1"><a class="header-anchor" href="#redis-线程模型-重要"><span>Redis 线程模型（重要）</span></a></h2><p><a href="https://zhuanlan.zhihu.com/p/639750217" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/639750217</a> 说的非常好</p><p>我们经常会被问到的一个问题：<strong>Redis 真的是单线程吗？</strong></p><p>在回答这个问题之前，我们需要先明确一下问题的边界：当我们说“Redis 采用的是单线程模型”时，实际上我们是针对其使用的网络模型。</p><p>事实上</p><ul><li>Redis 早在 4.0 版本中就已经引入了多线程，但这里的“多线程”是指用于处理一些特定任务的线程，而不是网络模型上的多线程。</li><li>Redis 在 6.0 版本中正式引入多线程网络模型，在这之前，其网络模型一直是单线程模式的。</li></ul><p>从 4.0 版本开始，Redis 采用的是<strong>单线程网络模型</strong> + <strong>多线程后台任务</strong> 这个组合。</p><ul><li>在<strong>主线程</strong>中完成了，包括接收（socket 读）、解析、执行、发送（socket 写）在内的全部流程</li><li>在<strong>主线程</strong>中还实现了周期任务的处理，如删除过期 key、字典 rehash 等</li></ul><p>除此之外，<strong>针对一些非常耗时的操作</strong>，Redis 则通过专用的后台线程来进行处理，避免其阻塞主线程的事件循环。</p><p>我们知道 Redis 的 DEL 命令是用来删除掉一个或多个 key 储存的值，它是一个同步阻塞的命令。大多数情况下你要删除的 key 里存的值不会特别多，最多也就几十上百个对象，所以可以很快执行完，但是如果你要删的是一个超大的键值对，里面有几百万个对象，那么这条命令可能会阻塞至少好几秒，又因为事件循环是单线程的，所以会阻塞后面的其他事件，导致吞吐量下降。</p><p>于是，在 Redis v4.0 之后增加了一些的非阻塞命令如 UNLINK、FLUSHALL ASYNC、FLUSHDB ASYNC。</p><p>UNLINK 命令其实就是 DEL 的异步版本，它不会同步删除数据，而只是把 key 从 keyspace 中暂时移除掉，然后将任务添加到一个异步队列，最后由后台线程去删除。</p><p>Redis 在 6.0 版本中，为其核心网络模型引入了多线程，称为 I/O threading。从此我们就可以放心大胆地说：Redis 采用了 <strong>多线程网络模型</strong> + <strong>多线程后台任务</strong> 这个组合。</p><p>但是，Redis 的多线程模型却并非上面介绍的标准 Reactor 多线程模型。因为 Redis 的 I/O threading 只负责 I/O 读写，不负责命令执行。所以，Redis 其实是将读取客户端请求命令和回写响应数据的逻辑异步化了，实际命令的执行最终还是在主线程上完成。</p><p>阿里的 Tair 多线程模型：Tair内存型将服务各阶段的任务进行分离，通过分工明确的多个线程并行处理各阶段任务，达到提高性能的目的。</p><ul><li>IO线程：负责请求读取、响应发送、命令解析等。</li><li>Worker线程：负责命令处理、定时器事件等。</li><li>辅助线程：负责高可用探测、保活等。</li></ul><p><strong>IO线程读取用户的请求并进行解析，之后将解析结果以命令的形式放在队列中发送给Worker线程处理</strong>。Worker线程将命令处理完成后生成响应，通过另一条队列发送给IO线程。</p><p>Tair内存型最多支持4个IO线程并发运行。为了提高线程的并行度，IO线程和Worker线程之间采用无锁队列和管道进行数据交换。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>IO线程</span></span>
<span class="line"><span>-----&gt;接收请求----&gt;解析请求		       发送响应--------&gt;</span></span>
<span class="line"><span>					\\				  /</span></span>
<span class="line"><span>					 \\			     /</span></span>
<span class="line"><span>worker线程		     \\            /</span></span>
<span class="line"><span>---------------------处理请求----&gt;生成响应-----------&gt;</span></span>
<span class="line"><span>  					  /			   \\</span></span>
<span class="line"><span>				     /				\\</span></span>
<span class="line"><span>IO线程              /					\\</span></span>
<span class="line"><span>-----&gt;接收请求----&gt;解析请求		       发送响应--------&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="集群架构的命令限制" tabindex="-1"><a class="header-anchor" href="#集群架构的命令限制"><span>集群架构的命令限制</span></a></h2><blockquote><p><a href="https://help.aliyun.com/document_detail/145968.html" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/document_detail/145968.html</a></p></blockquote><p>不支持的命令</p><ul><li>SWAPDB</li><li>CLIENT ID</li><li>SORT（<strong>BY</strong>和<strong>GET</strong>参数）</li></ul><p>受限的命令：如需在集群架构实例中执行下述受限制的命令，请使用 hash tag 确保命令所要操作的 key 都分布在 1 个hash slot 中，hash tag 的详细用法请参见<a href="http://redis.io/topics/cluster-spec" target="_blank" rel="noopener noreferrer">Redis官方文档</a>。</p><table><thead><tr><th style="text-align:left;">命令族</th><th style="text-align:left;">具体命令</th></tr></thead><tbody><tr><td style="text-align:left;">HyperLogLog</td><td style="text-align:left;">PFMERGE、PFCOUNT</td></tr><tr><td style="text-align:left;">Keys</td><td style="text-align:left;">RENAME、RENAMENX、SORT</td></tr><tr><td style="text-align:left;">Lists</td><td style="text-align:left;">RPOPLPUSH、BRPOP、BLPOP、BRPOPLPUSH</td></tr><tr><td style="text-align:left;">Scripting</td><td style="text-align:left;">EVAL、EVALSHA、SCRIPT EXISTS、SCRIPT FLUSH、SCRIPT KILL、SCRIPT LOAD</td></tr><tr><td style="text-align:left;">Strings</td><td style="text-align:left;">MSETNX</td></tr><tr><td style="text-align:left;">Transaction</td><td style="text-align:left;">DISCARD、EXEC、MULTI、UNWATCH、WATCH</td></tr></tbody></table><p>由于集群架构对 Lua 脚本的使用存在一定的限制，当实例变配至集群架构时，Lua 脚本可能因脚本内容不符合限制而发生丢失，请务必提前备份，更多信息，请参见<a href="https://help.aliyun.com/document_detail/145968.htm#concept-2353537" target="_blank" rel="noopener noreferrer">集群架构实例的命令限制</a>。</p><p>实例变配至集群架构前，您需要评估集群实例的命令限制对业务的影响，更多信息，请参见<a href="https://help.aliyun.com/document_detail/145968.htm#concept-2353537" target="_blank" rel="noopener noreferrer">集群架构实例的命令限制</a>。</p><h2 id="redis-的一些管理命令-memory-usage-重要" tabindex="-1"><a class="header-anchor" href="#redis-的一些管理命令-memory-usage-重要"><span>Redis 的一些管理命令 memory usage（重要）</span></a></h2><p>memory</p><p>Redis 4.0之前只能通过<code>info memory</code>来了解Redis内部有限的内存信息，Redis 4.0提供了 <code>memory</code> 命令，帮助用户全面了解Redis的内存状态。</p><p>info memory：查看 redis 实例的内存信息；</p><p>memory 相关命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>127.0.0.1:6379&gt; memory help</span></span>
<span class="line"><span>1) &quot;MEMORY DOCTOR                        - Outputs memory problems report&quot;</span></span>
<span class="line"><span>2) &quot;MEMORY USAGE &lt;key&gt; [SAMPLES &lt;count&gt;] - Estimate memory usage of key&quot;</span></span>
<span class="line"><span>3) &quot;MEMORY STATS                         - Show memory usage details&quot;</span></span>
<span class="line"><span>4) &quot;MEMORY PURGE                         - Ask the allocator to release memory&quot;</span></span>
<span class="line"><span>5) &quot;MEMORY MALLOC-STATS                  - Show allocator internal stats&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>memory usage</code></p><p><code>usage</code>子命令可以查看某个key在Redis内部实际占用多少内存。</p><p><strong>注意</strong></p><ul><li>不光key、value需要占用内存，Redis管理这些数据还需要一部分内存。</li><li>对于hash、list、set、sorted set这些类型的key，结果是采样计算的，可以通过<code>SAMPLES</code>来控制采样数量。</li></ul></li><li><p><code>memory stats</code>：</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>127.0.0.1:6379&gt; memory stats</span></span>
<span class="line"><span>1) &quot;peak.allocated&quot;    // Redis从启动到现在，历史最多使用过多少内存</span></span>
<span class="line"><span>2) (integer) 423995952</span></span>
<span class="line"><span>3) &quot;total.allocated&quot;    //当前使用内存</span></span>
<span class="line"><span>4) (integer) 11130320</span></span>
<span class="line"><span>5) &quot;startup.allocated&quot;    //Redis启动初始化以后占用内存</span></span>
<span class="line"><span>6) (integer) 9942928</span></span>
<span class="line"><span>7) &quot;replication.backlog&quot;    //主从复制断开重连时会用到，默认10MB</span></span>
<span class="line"><span>8) (integer) 1048576</span></span>
<span class="line"><span>9) &quot;clients.slaves&quot;    // 主从复制用到的内存</span></span>
<span class="line"><span>10) (integer) 16858</span></span>
<span class="line"><span>11) &quot;clients.normal&quot;    //普通用户客户端的读写缓冲区</span></span>
<span class="line"><span>12) (integer) 49630</span></span>
<span class="line"><span>13) &quot;aof.buffer&quot;    //aof持久化使用的缓存和aofrewrite时产生的缓存之和</span></span>
<span class="line"><span>14) (integer) 3253</span></span>
<span class="line"><span>15) &quot;db.0&quot;    //每个db的元数据所占用内存</span></span>
<span class="line"><span>16) 1) &quot;overhead.hashtable.main&quot;</span></span>
<span class="line"><span>2) (integer) 5808</span></span>
<span class="line"><span>3) &quot;overhead.hashtable.expires&quot; //管理带过期时间的数据所额外消耗内存</span></span>
<span class="line"><span>4) (integer) 104</span></span>
<span class="line"><span>17) &quot;overhead.total&quot;    //上面提到的各项内存消耗之和</span></span>
<span class="line"><span>18) (integer) 11063904</span></span>
<span class="line"><span>19) &quot;keys.count&quot;    //当前存储的key的总量</span></span>
<span class="line"><span>20) (integer) 94</span></span>
<span class="line"><span>21) &quot;keys.bytes-per-key&quot;    //当前内存中平均每个key大小</span></span>
<span class="line"><span>22) (integer) 12631</span></span>
<span class="line"><span>23) &quot;dataset.bytes&quot;        //用户数据所占用内存(= 总内存 - Redis元数据所占内存)</span></span>
<span class="line"><span>24) (integer) 66416</span></span>
<span class="line"><span>25) &quot;dataset.percentage&quot;    //100 * dataset.bytes / (total.allocated - startup.allocated)</span></span>
<span class="line"><span>26) &quot;5.5934348106384277&quot;</span></span>
<span class="line"><span>27) &quot;peak.percentage&quot;    // 100 * total.allocated / peak_allocated</span></span>
<span class="line"><span>28) &quot;2.6251003742218018&quot;</span></span>
<span class="line"><span>29) &quot;fragmentation&quot;    //内存碎片率</span></span>
<span class="line"><span>30) &quot;1.1039986610412598&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redis-数据结构的使用建议" tabindex="-1"><a class="header-anchor" href="#redis-数据结构的使用建议"><span>Redis 数据结构的使用建议</span></a></h2><table><thead><tr><th>数据类型</th><th>建议</th></tr></thead><tbody><tr><td>List 数据类型</td><td>List 及其包含的元素个数无限制，单个元素最大值为 512 MB，推荐 List 的元素个数小于 8192，Value最大长度不超过 1 MB。</td></tr><tr><td>Set 数据类型</td><td>Set 及其包含的元素个数无限制，单个元素最大值为 512 MB，推荐 Set 的元素个数小于 8192， Value最大长度不超过 1 MB。</td></tr><tr><td>Sorted set 数据类型</td><td>Sorted Set 及其包含的元素个数无限制，单个元素最大值为 512 MB，推荐 Sorted Set 的元素个数小8192，Value最大长度不超过1 MB。</td></tr><tr><td>Hash 数据类型</td><td>Hash 及其包含的元素个数无限制，单个元素最大值为 512 MB，推荐元素个数小于 8192， Value 最大长度不超过 1 MB。</td></tr></tbody></table><h2 id="redis-配置参数设置-配置文件-重要" tabindex="-1"><a class="header-anchor" href="#redis-配置参数设置-配置文件-重要"><span>Redis 配置参数设置（配置文件）（重要）</span></a></h2><table><thead><tr><th>配置项</th><th></th><th></th></tr></thead><tbody><tr><td><strong>appendfsync</strong></td><td>AOF（AppendOnly File）持久化功能的fsync频率<br>仅在<strong>appendonly</strong>参数开启时生效，<br>默认为 everysec</td><td></td></tr><tr><td><strong>appendonly</strong></td><td>开启或关闭主节点的 AOF 持久化功能，可选值： <br> yes：默认值，开启 AOF 持久化。<br> no：关闭 AOF 持久化。</td><td></td></tr><tr><td><strong>dynamic-hz</strong></td><td>开启或关闭动态hz，可选值： yes：默认值，开启。 no：关闭。</td><td>高版本才有</td></tr><tr><td><strong>hash-max-ziplist-entries</strong><br><strong>hash-max-ziplist-value</strong></td><td>当哈希对象同时满足以下两个条件时， 使用ziplist编码。<br>1、哈希对象保存的键值对数量小于<strong>hash-max-ziplist-entries</strong>的值。<br>2、 哈希对象保存的所有键值对的键和值的字符串长度的字节数都小于<strong>hash-max-ziplist-value</strong>的值。</td><td>Redis 6 以下版本</td></tr><tr><td><strong>hz</strong></td><td>设置 Redis 后台任务执行频率，例如清除过期键任务。取值范围为 1~500，默认值为 10，即每秒执行 10 次。<br>该值越大，CPU资源消耗越多，但在过期键较多的情况下清理频率也更高，同时Redis能够更精确地处理超时。建议取值不要超过100。</td><td></td></tr><tr><td><strong>lazyfree-lazy-eviction</strong></td><td>是否开启基于lazyfree的驱逐功能，可选值：<br> yes：开启。 no：默认值，不开启。</td><td></td></tr><tr><td><strong>lazyfree-lazy-expire</strong></td><td>是否开启基于lazyfree的过期Key删除功能，可选值： <br> yes：默认值，开启。 no：不开启。</td><td></td></tr><tr><td><strong>lazyfree-lazy-server-del</strong></td><td><strong>DEL</strong>命令是否基于lazyfree异步删除数据，可选值：<br> yes：默认值，开启。 no：不开启。</td><td></td></tr><tr><td><strong>maxmemory-policy</strong></td><td>数据逐出策略。当Redis实例内存不足，使用量达到<strong>Maxmemory</strong>时，会触发数据逐出，您可以选择不同的数据逐出策略。取值如下：<br>LRU表示最近最少使用的。LFU表示最不常用的。LRU、LFU和volatile-ttl都是使用近似随机算法实现的。</td><td></td></tr><tr><td><strong>slowlog-log-slower-than</strong></td><td>设置慢日志的记录阈值，即设置对执行时间大于多少微秒的操作进行记录。取值范围10000~10000000，默认值为20000。</td><td></td></tr><tr><td><strong>slowlog-max-len</strong></td><td>慢日志最多保存记录条数，取值范围100~10000，默认值为1024。</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="慢日志排查超时问题" tabindex="-1"><a class="header-anchor" href="#慢日志排查超时问题"><span>慢日志排查超时问题</span></a></h2><p>慢请求引起的连接超时等问题是影响 Redis 服务质量的常见问题</p><blockquote><p>阿里云的：</p><p>云数据库 Redis 的慢日志系统能够帮助您快速找到慢请求问题发生的位置，定位发出请求的客户端 IP，为彻底解决超时问题提供可靠的依据。</p><p>Redis 的慢日志会记录执行时间超过指定阈值的请求，慢日志分为数据节点慢日志和代理慢日志。（阿里的架构有代理）</p><p>Redis 服务超时的原因通常比较复杂，很多情况下与慢请求相关。您可以按照下述步骤来排查超时问题。</p><ul><li>当 Redis 服务出现超时问题，首先查看代理慢日志； <ul><li>如果代理慢日志内容为空，您可以排查客户端与 Redis 实例间的网络状况。</li></ul></li><li>定位最早的代理慢日志由哪条命令引发。 <ul><li><strong>说明</strong> 代理节点的慢日志通常是因为数据节点中出现慢请求，引起命令堆积而导致的。</li></ul></li><li>查看数据节点慢日志以确认代理慢日志中的哪些日志引起了超时问题。 <ul><li><strong>说明</strong> 通常情况下，在代理慢日志中最先产生慢日志的命令，也会在数据节点生成慢日志。数据节点的慢日志一般比代理节点慢日志少，这与二者对执行时间的定义以及慢日志阈值不同有关。</li></ul></li><li>在代理慢日志中，根据上一步骤定位到的命令精确搜索，可找到使用这些命令的客户端IP，随后进行优化。</li></ul></blockquote><p>针对慢日志，Redis 提供配置参数：</p><ul><li><strong>slowlog-log-slower-than</strong>：设置数据节点慢日志阈值，默认为20000微秒（即20毫秒）； <ul><li>通常情况下您感知到的延迟实际会高于本参数设置的值，因为感知时间中包含了数据在客户端、代理、数据节点之间传输和处理所消耗的时间；</li></ul></li><li><strong>slowlog-max-len</strong>：设置最大慢日志条目数，默认为1024；</li></ul><p>那么我们怎么看慢日志呢？Redis 提供了命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SLOWLOG GET [count]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>127.0.0.1:6379&gt; slowlog get</span></span>
<span class="line"><span>1) 1) (integer) 4</span></span>
<span class="line"><span>   2) (integer) 1680796134</span></span>
<span class="line"><span>   3) (integer) 560</span></span>
<span class="line"><span>   4) 1) &quot;set&quot;</span></span>
<span class="line"><span>      2) &quot;name&quot;</span></span>
<span class="line"><span>      3) &quot;hello&quot;</span></span>
<span class="line"><span>   5) &quot;127.0.0.1:51612&quot;</span></span>
<span class="line"><span>   6) &quot;&quot;</span></span>
<span class="line"><span>2) 1) (integer) 3</span></span>
<span class="line"><span>   2) (integer) 1680796120</span></span>
<span class="line"><span>   3) (integer) 6027</span></span>
<span class="line"><span>   4) 1) &quot;config&quot;</span></span>
<span class="line"><span>      2) &quot;rewrite&quot;</span></span>
<span class="line"><span>   5) &quot;127.0.0.1:51612&quot;</span></span>
<span class="line"><span>   6) &quot;&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>慢查询日志中的每个条目由下面 6 个值组成：</p><ol><li>慢查询日志的标识 ID（唯一性）；</li><li>记录日志的 Unix 时间戳；</li><li>命令耗时（微秒）；</li><li>执行命令和参数的数组；</li><li>客户端 IP 和端口（仅限 4.0 或更高版本）；</li><li>客户端名称（如果通过 CLIENT SETNAME 命令设置，仅限 4.0 或更高版本）；</li></ol><h2 id="redis持久化与备份恢复方案-重要" tabindex="-1"><a class="header-anchor" href="#redis持久化与备份恢复方案-重要"><span>Redis持久化与备份恢复方案（重要）</span></a></h2><blockquote><p><a href="https://help.aliyun.com/document_detail/43886.html" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/document_detail/43886.html</a></p></blockquote><h3 id="rdb-持久化" tabindex="-1"><a class="header-anchor" href="#rdb-持久化"><span>RDB 持久化</span></a></h3><p>RDB 是一种快照模式，周期性的创建快照，每次全量备份，快照是内存数据的二进制序列化形式，存储紧凑。优点就是占用空间小，便于移动，非常适合用于备份或迁移指定时间点的 Redis 数据。</p><p>RDB 持久化产生的文件是以 .rdb 后缀结尾，其中 rdb 表示 Redis Database。Redis 有多种方式创建 RDB 文件：</p><ul><li><p><strong>SAVE 命令</strong>；（SAVE 命令会阻塞 Redis 服务器进程）</p></li><li><p><strong>BGSAVE 命令</strong>；（因为 BGSAVE 是 fork 一个子进程来创建 RDB 的，所以当父进程占用的内存数量越大，创建子进程这一操作耗费的时间也会越长，所以 Redis 服务器在执行 BGSAVE 命令的时候也可能会因为 fork 子进程而短暂阻塞。）</p></li><li><p><strong>配置文件配置触发创建 RDB 文件的条件</strong>；</p><p>如果服务器在 seconds 秒的时间内，对各个数据库总共执行了至少 changes 次修改，服务器就会自动执行一次 BGSAVE。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>save 900 1</span></span>
<span class="line"><span>save 300 10</span></span>
<span class="line"><span>save 60 10000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>RDB 持久化的原理</strong></p><p>一般都是使用 BGSAVE 来完成持久化操作的。Redis 会调用 glibc 的 fork 函数产生一个子进程，<strong>RDB 持久化由这个子进程来处理，父进程继续处理客户端的请求。子进程刚刚产生时，它和父进程共享内存里面的代码段和数据段。</strong></p><p>Redis 需要一边持久化，一边响应客户端的请求。持久化操作的同时，内存的数据结构还在改变。这时候<strong>需要使用 COW（Copy on Write）机制来实现 RDB 的持久化。</strong></p><p>数据段是一个由多个操作系统的页面（4KB）组成的，当父进程对其中的一个页面的数据进行修改时，会将被共享的页面复制一份分离出来，然后对这个复制的页面进行修改。这时子进程相应的页面是没有变化的，还是进程产生时的那一瞬间的数据。</p><p>随着父进程修改操作的持续进行，越来越多的共享页面被分离出来，内存就会持续增长，但是也不会超过原有数据内存的 2 倍。另外 Redis 实例里面的冷数据的比例比例也是很高的，所以很少会出现所有页面都被分离的情况。</p><p><strong>RDB 持久化的优点：</strong></p><ol><li>RDB 是一个进紧凑的二进制文件，代表某个时间点上的数据快照。非常适合备份，全量复制等场景。我们可以每隔几个小时执行 bgsave 备份；</li><li>Redis 加载 RDB 文件恢复数据的速度比 AOF 的方式快很多；</li></ol><p><strong>RBD 持久化的缺点</strong></p><ol><li>使用 RDB 持久化策略，可能会丢失几分钟的数据。因为 RDB 是一种时间点快照（point-in-time snapshot），对于 RDB 持久化来说，服务器停机时丢失的数据量取决于最后一次成功执行 RDB 持久化操作的开始执行时间。</li><li>为了使用子进程持久化到磁盘，RDB 需要经常调用 fork()。如果数据集很大，fork() 可能会耗费很长时间，并且如果数据集非常大且 CPU 性能不太好，则可能导致 Redis 在几毫秒甚至一秒钟内停止为客户端提供服务；</li></ol><h3 id="aof-持久化" tabindex="-1"><a class="header-anchor" href="#aof-持久化"><span>AOF 持久化</span></a></h3><p><strong>核心原理</strong>：服务器每次执行完写命令之后，都会以协议文本的方式将被执行的命令追加到 AOF 文件的末尾。在服务器停机之后，只要重新执行 AOF 文件中保存的命令，就可以将数据库恢复到停机之前的状态。</p><p><strong>主要工作流程如下：</strong></p><ol><li>所有的写入命令会追加到 aof_buf（ 缓冲区）中；</li><li>AOF 缓冲区根据对应的策略向硬盘做同步操作；</li><li>随着 AOF 文件越来越大， 需要定期对 AOF 文件进行重写， 达到压缩的目的；</li><li>当 Redis 服务器重启时， 可以加载 AOF 文件进行数据恢复；</li></ol><p><strong>为什么要把命令先写入到一个缓冲区中呢</strong>？因为如果每次都把 AOF 文件命令都直接刷新到磁盘，性能很低。一般的操作时，将对硬盘的多次写入操作优化成一次写入操作，当程序调用 write 系统调用对文件进行写入时，系统会将数据写入位于内存的缓冲区中，等到指定的时长或者满足某些写入条件时，系统才会执行 flush 系统调用，将缓冲区中的数据刷新到磁盘。</p><p>Redis 提供了三种 AOF 文件刷新频率的配置，由参数 appendfsync 控制：</p><ul><li>always：每执行一个写命令，就对 AOF 文件执行一次刷新操作。也就是命令写入缓冲区后调用系统调用 fsync 操作同步到 AOF 文件，fsync 后线程立即返回；</li><li>everysec：每隔 1s，就对 AOF 文件执行一次刷新操作。也就是命令写入缓冲区后调用系统调用 write 操作，write 完后线程返回。 fsync 同步到 AOF 文件的操作有专门的线程控制 1s 一次；</li><li>no：不主动对 AOF 进行刷新操作，由操作系统决定什么时候对 AOF 进行刷新。也就是命令写入缓冲区后调用系统调用 write 操作，write 完后线程返回。 不对 AOF 文件做 fsync 操作，同步到磁盘的操作由操作系统控制，一般同步周期最长 30 秒；</li></ul><p>fsync 针对单个文件操作，做强制磁盘同步，fsync 将阻塞直到写入硬盘完成后返回，保证了数据的持久化。</p><p><strong>AOF 文件的重写</strong></p><p>随着命令不断写入 AOF 文件，AOF 文件会越来越大，Redis 使用重写机制压缩文件体积。AOF 文件重写是把 Redis 进程内的数据转化为写命令同步到新的 AOF 文件的过程；</p><p><strong>为什么 AOF 文件可以压缩呢？</strong></p><p>如果对相同的键执行过多次修改，那么 AOF 文件中会出现多个冗余命令；多条写命令可以合并成一个，例如 lpush list a、lpush list b、lpush list c 可以转化为 lpush list a b c。为了防止单条命令过大造成客户端缓冲区溢出，对于 list、 set、 hash、 zset 等类型操作， 以 64 个元素为界拆分为多条。</p><p>AOF 重写同样是基于 copy-on-write 实现的。</p><p><strong>AOF 的优缺点</strong></p><p>优点就是 AOF 持久化的安全性要高很多，通过使用 everysec 选项，用户可以将数据丢失的时间限制在 1s 以内。</p><p>缺点：</p><ul><li>AOF 存储的是协议文本，所以体积会比相同数据量的 RBD 文件要大很多，并且生成 AOF 文件需要的时间也比 RDB 文件要长；</li><li>RDB 的恢复数据的速度要比 AOF 块很多。因为 RDB 是直接的数据恢复操作，AOF 是间接的数据恢复操作，它要通过执行命令来恢复数据；</li><li>AOF 重写命令 BGREWRITEAOF 和 RBD 使用的 BGSAVE 命令一样都要创建子进程，索引数据库体积比较大的情况下，进行 AOF 文件重写将占用大量资源，并导致服务器被短暂阻塞；</li></ul><h3 id="rdb-aof-混合持久化" tabindex="-1"><a class="header-anchor" href="#rdb-aof-混合持久化"><span>RDB-AOF 混合持久化</span></a></h3><p>开启混合持久化，前提是打开 AOF 持久化功能了，然后将下面的值设置了 yes</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>aof-use-rdb-preamble &lt;value&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那么服务器在执行 AOF 重写时，就会像执行 BGSAVE 命令那样，根据数据库当前的状态生成出相应的 RDB 数据，并且将这些数据写入新建的 AOF 文件中，至于那些在 AOF 重写开始之后执行的 Redis 命令，则会继续以协议文本的方式追加到新 AOF 文件的末尾，也就是已由的 RDB 数据的后面。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>| RDB 数据 | AOF 数据 |</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当一个支持 RDB-AOF 混合持久化模式的 Redis 服务器启动并载入 AOF 文件时，它会检查 AOF 文件的开头是否包含了 RDB 格式的内容；</p><ul><li>如果包含，那么服务器会先加载开头的 RDB 数据，然后再加载之后的 AOF 数据；</li><li>如果 AOF 文件只包含 AOF 数据，那么服务器会直接加载 AOF 数据；</li></ul><h2 id="如何处理-redis-集群数据倾斜-重要" tabindex="-1"><a class="header-anchor" href="#如何处理-redis-集群数据倾斜-重要"><span>如何处理 redis 集群数据倾斜（重要）</span></a></h2><blockquote><p><a href="https://help.aliyun.com/document_detail/467543.html" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/document_detail/467543.html</a></p></blockquote><h3 id="什么是集群数据倾斜" tabindex="-1"><a class="header-anchor" href="#什么是集群数据倾斜"><span>什么是集群数据倾斜</span></a></h3><p>什么是 Redis 的集群数据倾斜：在 Redis 集群中，若个别的数据分片的下面几个指标远远高于其他数据分片，该 Redis 集群可能已经产生数据倾斜：</p><ul><li>内存使用率；</li><li>CPU 使用率；</li><li>带宽使用率；</li><li>延时；</li></ul><p>Redis 集群分片的数据倾斜严重时，会导致集群在整体内存使用率不高的情况下可能会出现下面的异常情况：</p><ul><li>内存逐出；</li><li>内存溢出；</li><li>实例响应时间上升等问题；</li></ul><h3 id="背景信息" tabindex="-1"><a class="header-anchor" href="#背景信息"><span>背景信息</span></a></h3><p>Redis 集群架构作为一个分布式系统，<strong>整个数据库空间会被分为 16384 个槽（Slot）</strong>，每个数据分片节点将存储与处理指定Slot的数据（Key），例如 3 分片集群实例，3 个分片分别负责的 Slot 为：[0,5460]、[5461,10922]、[10923,16383]。当用户写入或更新数据时，客户端会通过 CRC 算法计算出 Key 所属的 Slot，具体公式为 <code>Slot=CRC16(key)%16384</code>，并将数据写入 Slot 所属的数据分片节点。<strong>通常情况下，各数据分片节点的 Key 数量是均匀分布的，同时内存使用率、CPU 使用率等性能指标也是相近的。</strong></p><p>但在使用数据库的过程中，<strong>可能会由于前期规划不足、不规范的数据写入及突发的访问量，造成数据量倾斜或数据访问倾斜，最终引起数据倾斜。</strong></p><blockquote><p><strong>说明</strong> 数据倾斜通常是指大多数据分片节点的性能指标较低，而个别节点的性能指标较高的情况，高或低没有明确的标准。<strong>通常情况下，若某数据分片节点（最高）的性能指标高出其他数据分片节点（最低）20%及以上时，可认为已产生数据倾斜</strong>，差值越大，数据倾斜程度越严重。</p></blockquote><img src="`+d+`" alt="img"><p>如上图所示，虽然 Key 均匀地分布在集群中，每个数据分片节点 2 个 Key，但仍产生了数据倾斜：</p><ul><li><code>Replica 1</code> 节点中 <code>key1</code> 的 QPS 明显高于其他 Key，属于典型的<strong>数据访问倾斜</strong>，会导致该 Key 所在的数据分片节点CPU 使用率、带宽使用率升高，从而影响该分片上所有 Key 的处理。</li><li><code>Replica 2</code> 节点中 <code>key5</code>的 QPS 虽然不高，但该 Key 的大小为 1 MB，属于典型的<strong>数据量倾斜</strong>，会导致该 Key 所在的数据分片节点的内存使用率、带宽使用率升高，从而影响该分片上所有 Key 的处理。</li></ul><h3 id="发生数据倾斜的临时方案" tabindex="-1"><a class="header-anchor" href="#发生数据倾斜的临时方案"><span>发生数据倾斜的临时方案</span></a></h3><p>若实例已产生数据倾斜，您可以通过如下临时方案进行过渡。但以下临时方案，例如对实例进行重启、变配、扩容等操作，无法解决数据倾斜的根源问题。</p><p>同时，您也可以在短时间内可降低大 Key、热 Key 的请求量，暂缓数据倾斜问题，但大 Key、热 Key 问题只能通过业务上的改造才能解决。建议您及时对实例进行数据倾斜的原因排查，并根据对应处理方法在业务层进行改造，对实例进行优化</p><table><thead><tr><th style="text-align:left;">倾斜场景</th><th style="text-align:left;">可能原因</th><th style="text-align:left;">临时方案</th></tr></thead><tbody><tr><td style="text-align:left;">内存倾斜</td><td style="text-align:left;">大Key、Hash Tags。</td><td style="text-align:left;">升级实例规格。在成功升级实例规格后，会改善内存倾斜问题，但可能也引起带宽倾斜或CPU倾斜。</td></tr><tr><td style="text-align:left;">带宽倾斜</td><td style="text-align:left;">大Key、热Key、高消耗命令。</td><td style="text-align:left;">提升实例中指定 1 个或多个分片的带宽。<strong>说明</strong> 由于单个实例分片带宽最大可调整至当前实例分片规格对应带宽上限的3倍，若当前业务流量大于该值，则只能在业务层进行改造。</td></tr><tr><td style="text-align:left;">CPU使用率倾斜</td><td style="text-align:left;">大Key、热Key、高消耗命令。</td><td style="text-align:left;">无临时方案，请进行原因排查并在业务层进行改造。</td></tr></tbody></table><h3 id="数据倾斜的原因和处理方法" tabindex="-1"><a class="header-anchor" href="#数据倾斜的原因和处理方法"><span>数据倾斜的原因和处理方法</span></a></h3><p><strong>提前规划业务增长率，合理地拆分大 Key，并保持规范的数据写入</strong>，才能解决数据倾斜的根源问题。</p><table><thead><tr><th style="text-align:left;">产生倾斜原因</th><th style="text-align:left;">说明</th><th style="text-align:left;">处理方法</th></tr></thead><tbody><tr><td style="text-align:left;">大Key</td><td style="text-align:left;">大 Key 通常以 Key 的大小和 Key 中成员的数量来综合判定。常见于在KKV（Key-key-value）类型的数据结构中，例如Hash、List、Set、Zset等，存放过多或过大的 field，从而导致单个 Key 过大，产生实例数据倾斜。</td><td style="text-align:left;">避免使用大 Key。对大 Key 进行拆分，例如将含有数万成员的一个HASH Key 拆分为多个 HASH Key，并确保每个 Key的成员数量在合理范围。</td></tr><tr><td style="text-align:left;">热Key</td><td style="text-align:left;">热 Key 指某个 Key 或者少部分 Key 的操作 QPS 明显高于其他 Key。常见于压测时选了单一 Key 或秒杀场景下热点商品ID Key。</td><td style="text-align:left;">请避免使用热Key。</td></tr><tr><td style="text-align:left;">高消耗命令</td><td style="text-align:left;">不同的命令具有不同的复杂度，高复杂度的命令会消耗大量性能资源，例如 <code>HGETALL</code> 命令的复杂度为 O(n)，该命令会随着您存储的Field 越多，消耗越大。同时，简单的 <code>SET</code> 或 <code>GET</code> 命令也会在 Value过大时，消耗大量数据分片节点的性能资源。</td><td style="text-align:left;">可以通过慢查询日志来查看是那些命令比较慢，业务侧需减少或禁止使用高消耗命令</td></tr><tr><td style="text-align:left;">Hash Tags</td><td style="text-align:left;">若 Key名称中包含<code>{}</code>，例如<code>{item}id1</code>，则 Redis 仅会对<code>{}</code>中的内容进行 Slot 计算并选择数据分片节点。若存在<code>{item}id1</code>、<code>{item}id2</code>、<code>{item}id3</code>等等大量Key，由于<code>{}</code>中的内容相同，上述 Key 均会被分配至同一数据分片节点，导致该数据分片节点的内存资源、性能消耗大幅升高。</td><td style="text-align:left;">避免在Key名称中使用<code>{}</code>。<strong>说明</strong> 如需在Key名称中使用<code>{}</code>，需保证<code>{}</code>中的内容尽可能不同，从而使Key尽量均匀地分布在集群的不同数据分片节点上。</td></tr></tbody></table><h2 id="排查-redis-实例-cpu-使用率高的问题-重要" tabindex="-1"><a class="header-anchor" href="#排查-redis-实例-cpu-使用率高的问题-重要"><span>排查 Redis 实例 CPU 使用率高的问题（重要）</span></a></h2><blockquote><p><a href="https://help.aliyun.com/document_detail/200630.html" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/document_detail/200630.html</a></p></blockquote><p>**Redis 实例的 CPU 使用率升高会影响整体的吞吐量和应用的响应速度，极端情况下甚至会导致应用不可用。**当平均 CPU 使用率高于 50%、连续 5 分钟内的 CPU 平均峰值使用率高 于90% 时，您需要及时关注并排查该问题，以保障应用的稳定运行。</p><h3 id="查找并禁用高消耗命令" tabindex="-1"><a class="header-anchor" href="#查找并禁用高消耗命令"><span>查找并禁用高消耗命令</span></a></h3><p>高消耗命令：即时间复杂度为 O(N) 或更高的命令。通常情况下，命令的时间复杂度越高，在执行时会消耗较多的资源，从而导致 CPU 使用率上升。</p><p><strong>由于单线程的特性，Redis 在执行高消耗命令时会引发排队导致应用响应变慢。极端情况下，甚至可能导致实例被整体阻塞，引发应用超时中断或流量跳过缓存层直接到达后端的数据库侧，引发雪崩效应。</strong></p><p><strong>评估并禁用高风险命令和高消耗命令</strong>，例如<strong>FLUSHALL</strong>、<strong>KEYS</strong>、<strong>HGETALL</strong>等。具体操作，优化业务，例如避免频繁执行数据排序操作。</p><p>**可选操作：**根据业务情况，调整实例为<a href="https://help.aliyun.com/document_detail/62870.htm#concept-zm4-3mh-tdb" target="_blank" rel="noopener noreferrer">读写分离架构</a>，对高消耗命令或应用进行分流。</p><h3 id="优化热点-key" tabindex="-1"><a class="header-anchor" href="#优化热点-key"><span>优化热点 key</span></a></h3><p><strong>现象</strong>：Redis实例为<a href="https://help.aliyun.com/document_detail/52228.htm#concept-tds-4mm-tdb" target="_blank" rel="noopener noreferrer">集群架构</a>或<a href="https://help.aliyun.com/document_detail/62870.htm#concept-zm4-3mh-tdb" target="_blank" rel="noopener noreferrer">读写分离架构</a>，实例中部分数据节点的 CPU 使用率高。</p><p>具体怎么优化热点 key，得看业务。</p><h3 id="优化短连接" tabindex="-1"><a class="header-anchor" href="#优化短连接"><span>优化短连接</span></a></h3><p><strong>现象</strong>：频繁地建立连接，导致 Redis 实例的大量资源消耗在连接处理上。具体表现为 CPU 使用率较高，连接数较高，但QPS（每秒访问次数）未达到预期的情况。</p><p><strong>解决方法</strong>：<strong>将短连接调整为长连接，例如使用 JedisPool 连接池连接</strong>。</p><h3 id="关闭-aof" tabindex="-1"><a class="header-anchor" href="#关闭-aof"><span>关闭 AOF</span></a></h3><p><strong>现象</strong>：Redis 实例开启了 AOF（append-only file）后，当实例处于高负载状态时，频繁地执行 AOF 会一定程度上导致 CPU使用率升高。</p><p><strong>解决方法</strong>：在业务允许的前提下，例如数据可以从其他地方恢复时，可以考虑关闭持久化。另外将 Redis 数据备份时间设定到低访问/维护时间窗口内，降低影响。</p><h3 id="优化批量操作管道的使用" tabindex="-1"><a class="header-anchor" href="#优化批量操作管道的使用"><span>优化批量操作管道的使用</span></a></h3><p><strong>现象</strong>：Redis 实例为<a href="https://help.aliyun.com/document_detail/52228.htm#concept-tds-4mm-tdb" target="_blank" rel="noopener noreferrer">集群架构</a>或<a href="https://help.aliyun.com/document_detail/62870.htm#concept-zm4-3mh-tdb" target="_blank" rel="noopener noreferrer">读写分离架构</a>，各个 redis CPU 使用率不均衡，差额过大。</p><p><strong>不均衡</strong>：通常因 <strong>pipeline</strong> 或 <strong>batch</strong> 的操作规模过大引起，需要减少对应的操作规模，例如将其拆分为多个操作来执行。</p><h3 id="评估服务能力" tabindex="-1"><a class="header-anchor" href="#评估服务能力"><span>评估服务能力</span></a></h3><p>经过上述方法优化后，在业务正常运行的情况下，还是经常遇到实例整体的负载较高（平均 CPU 使用率在 50% 以上），<strong>可能存在性能瓶颈</strong>。</p><p><strong>首先，应排查是否存在异常的业务访问，例如异常的命令、来自某台应用主机的异常访问等，此类情况需要从业务上进行优化</strong>。如果均为正常访问，此时的高负载是正常业务行为，为保障业务平稳运行，建议升级实例的规格，或将其升级为<a href="https://help.aliyun.com/document_detail/52228.htm#concept-tds-4mm-tdb" target="_blank" rel="noopener noreferrer">集群架构</a>或<a href="https://help.aliyun.com/document_detail/62870.htm#concept-zm4-3mh-tdb" target="_blank" rel="noopener noreferrer">读写分离架构</a>。</p><h2 id="排查redis实例内存使用率高的问题-重要" tabindex="-1"><a class="header-anchor" href="#排查redis实例内存使用率高的问题-重要"><span>排查Redis实例内存使用率高的问题（重要）</span></a></h2><blockquote><p><a href="https://help.aliyun.com/document_detail/200631.html" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/document_detail/200631.html</a></p></blockquote><p>云数据库 Redis 可提供高效的数据库服务，当内存不足时，可能导致 Key 频繁被逐出、响应时间上升、QPS（每秒访问次数）不稳定等问题，进而影响业务运行。通常情况下，当内存使用率超过 95% 时需要及时关注。</p><h3 id="redis-内存占用情况" tabindex="-1"><a class="header-anchor" href="#redis-内存占用情况"><span>redis 内存占用情况</span></a></h3><p>Redis 的内存占用主要由以下三部分组成：</p><table><thead><tr><th style="text-align:left;">内存占用</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">链路内存（动态）</td><td style="text-align:left;">主要包括Input Buff、Output Buff、JIT Overhead、Fake Lua Link、Lua执行缓存等，例如可执行<strong>INFO</strong>命令，通过返回结果的 <strong>Clients</strong> 中查看客户端缓存信息。<br><strong>说明</strong> Input buff与Output buff与每个客户端的连接有关，通常较小。当执行客户端 Range 类操作或大 Key 收发较慢时，Input buff 与 Output buff 占用的内存会增大，从而影响数据区，甚至会造成内存溢出 OOM。</td></tr><tr><td style="text-align:left;">数据内存</td><td style="text-align:left;">用户数据区，即实际存储的 Value 信息，通常作为重点分析的对象。</td></tr><tr><td style="text-align:left;">管理内存（静态）</td><td style="text-align:left;">启动时较小且相对恒定，该区域由管理数据的 Hash 内存开销、Repl-buff 与 aof-buff 的内存开销（约 32 MB～64 MB）等构成。<br><strong>说明</strong> 当Key数量特别多时（例如几亿个），会占用较大的内存。</td></tr></tbody></table><blockquote><p><strong>说明</strong> 大部分 OOM 场景是由于动态内存管理失效引起，例如限流时请求堆积导致动态内存快速上升、过于复杂或不合理的 Lua 脚本也可能导致 OOM</p></blockquote><h3 id="步骤-一-分析内存使用情况" tabindex="-1"><a class="header-anchor" href="#步骤-一-分析内存使用情况"><span>步骤 一：分析内存使用情况</span></a></h3><ol><li><p>查看监控数据，查看内存使用率；</p></li><li><p><strong>查询历史累计逐出的 Key 总数和命令的最大时延</strong>，分析是否呈现明显的上升趋势；</p><blockquote><p><strong>说明</strong> 需关注的监控指标为<strong>Evicted Keys</strong>（历史累计逐出的Key总数）和<strong>Max Rt</strong>（数据节点从接收命令到发出响应最大时延）。</p></blockquote></li><li><p>**可选：**当Redis的内存使用率不符合预期时，可以使用 <strong>MEMORY STATS</strong> 命令查询内存使用详情。Redis实例的内存开销主要由两部分组成：</p><ul><li><p><strong>业务数据的内存开销，该部分一般作为重点分析对象</strong>。</p></li><li><p><strong>非业务数据的内存开销，例如主备复制的积压缓冲区、Redis进程初始化消耗的内存等</strong>。</p></li></ul></li></ol><p>返回示例及各参数对应的解释如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;peak.allocated&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //Redis进程自启动以来消耗内存的峰值。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) (integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">79492312</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;total.allocated&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //Redis使用其分配器分配的总字节数，即当前的总内存使用量。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) (integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">79307776</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;startup.allocated&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //Redis启动时消耗的初始内存量。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) (integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">45582592</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;replication.backlog&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //复制积压缓冲区的大小。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) (integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">33554432</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 9</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;clients.slaves&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //主从复制中所有从节点的读写缓冲区大小。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) (integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">17266</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;clients.normal&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //除从节点外，所有其他客户端的读写缓冲区大小。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) (integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">119102</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">13</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;aof.buffer&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //AOF持久化使用的缓存和AOF重写时产生的缓存。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">14</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) (integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">15</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;db.0&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //业务数据库的数量。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;overhead.hashtable.main&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //当前数据库的hash链表开销内存总和，即元数据内存。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) (integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">144</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;overhead.hashtable.expires&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //用于存储key的过期时间所消耗的内存。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    4</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) (integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">17</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;overhead.total&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //数值=startup.allocated+replication.backlog+clients.slaves+clients.normal+aof.buffer+db.X。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) (integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">79273616</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">19</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;keys.count&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //当前Redis实例的key总数</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) (integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">21</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;keys.bytes-per-key&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //当前Redis实例每个key的平均大小，计算公式：(total.allocated-startup.allocated)/keys.count。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">22</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) (integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16862592</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">23</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dataset.bytes&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //纯业务数据占用的内存大小。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">24</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) (integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">34160</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dataset.percentage&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //纯业务数据占用的内存比例，计算公式：dataset.bytes*100/(total.allocated-startup.allocated)。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">26</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1012892946600914&quot;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">27</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;peak.percentage&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //当前总内存与历史峰值的比例，计算公式：total.allocated*100/peak.allocated。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">28</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;99.767860412597656&quot;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">29</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fragmentation&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //内存的碎片率。</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.45836541056632996&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>在Redis命令行中，执行<strong>MEMORY USAGE</strong>命令查询指定Key消耗的内存（单位为字节）。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MEMORY</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> USAGE</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Key0089393003</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(integer) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000072</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在Redis命令行中，执行<strong>MEMORY DOCTOR</strong>命令获取内存诊断建议。</p><p>MEMORY DOCTOR会从以下维度为Redis实例的提供内存诊断建议，您可以根据诊断建议制定相应的优化策略：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> empty </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     /* Instance is empty or almost empty. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> big_peak </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       /* Memory peak is much larger than used mem. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> high_frag </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      /* High fragmentation. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> high_alloc_frag </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* High allocator fragmentation. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> high_proc_rss </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* High process rss overhead. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> high_alloc_rss </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* High rss overhead. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> big_slave_buf </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* Slave buffers are too big. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> big_client_buf </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* Client buffers are too big. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> many_scripts </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   /* Script cache has too many scripts. */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="步骤二-优化内存使用率" tabindex="-1"><a class="header-anchor" href="#步骤二-优化内存使用率"><span>步骤二：优化内存使用率</span></a></h3><ol><li>查询现有的 Key 是否符合业务预期，<strong>及时清理无用的 Key</strong>；</li><li><strong>通过一些 rdb 文件的内存分析工具，分析大 Key 分布和 Key 的 TTL 过期策略</strong>。 <ol><li>分析 Key 是否有合理的 TTL 策略。建议根据业务需求来衡量，并在应用端设置合理的过期时间；</li><li>对大 Key 进行评估，然后从业务方向对大 Key 进行拆分；</li></ol></li><li>根据业务需求，设置<strong>合理的数据逐出策略</strong>（即调整<strong>maxmemory-policy</strong>参数的值）</li><li>根据业务需求，设置<strong>合理的过期 Key 主动删除的执行频率（即调整 hz 参数的值）</strong>。<strong>hz</strong> 的取值建议在 100 以内，如果该值过大将对 CPU 的使用率产生较大影响。您也可以设置为自动调整（要求 Redis 实例的大版本为5.0及以上版本）</li><li>经过上述步骤优化后，内存使用率依旧较高，可能是性能瓶颈，可评估升级至更大内存的规格，以承载更多数据并改善性能。</li></ol><h2 id="排查-redis-实例流量使用率高的问题" tabindex="-1"><a class="header-anchor" href="#排查-redis-实例流量使用率高的问题"><span>排查 Redis 实例流量使用率高的问题</span></a></h2><blockquote><p><a href="https://help.aliyun.com/zh/redis/user-guide/troubleshoot-high-traffic-usage-on-an-apsaradb-for-redis-instance" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/zh/redis/user-guide/troubleshoot-high-traffic-usage-on-an-apsaradb-for-redis-instance</a></p></blockquote><p>Redis 实例作为更靠近应用服务的数据层，通常会执行较多的数据存取并消耗网络带宽。不同的实例规格对应的最大带宽有所不同，<strong>当超过该规格的最大带宽时，将对应用服务的数据访问性能造成影响。</strong></p><h3 id="步骤一-查询流量使用率" tabindex="-1"><a class="header-anchor" href="#步骤一-查询流量使用率"><span>步骤一：查询流量使用率</span></a></h3><p>查监控查询实例在指定时段的流量使用率，即入流量和出流量的使用率：</p><blockquote><p><strong>说明</strong></p><ul><li>通常来说，流量的平均使用率持续保持在 80% 时需引起注意，可能流量不足；</li><li>需关注的监控指标为<strong>入流量使用率</strong>和<strong>出流量使用率</strong>；</li></ul></blockquote><h3 id="步骤二-优化流量使用率" tabindex="-1"><a class="header-anchor" href="#步骤二-优化流量使用率"><span>步骤二：优化流量使用率</span></a></h3><ul><li><strong>调整实例的带宽，降低对业务的影响并获得较长的时间窗口来排查问题</strong>；</li><li><strong>当业务的访问量与预期带宽消耗不匹配，例如流量使用率的增长趋势和 QPS 的增长趋势明显不一致</strong>。您可以通过缓存分析功能，发现实例中存在的<strong>大Key</strong>。</li><li>对**大Key（通常大于10 KB）**进行优化，例如将大 Key 拆分、减少对大 Key 的访问、删除不必要的大 Key 等。</li><li><strong>经过上述步骤优化后，流量使用率依旧较高，可能是性能瓶颈，可评估升级至更大内存的规格</strong>，以承载更大的网络流量。</li></ul><h2 id="发现并处理redis的大key和热key-重要" tabindex="-1"><a class="header-anchor" href="#发现并处理redis的大key和热key-重要"><span>发现并处理Redis的大Key和热Key（重要）</span></a></h2><p>在使用 Redis 的过程中，如果未能及时发现并处理 Big keys（下文称为“大 Key ”）与 Hotkeys（下文称为“热 Key ”），可能会导致服务性能下降、用户体验变差，甚至引发大面积故障。介绍大 Key 与热 Key 产生的原因、其可能引发的问题及如何快速找出大 Key 与热 Key 并将其优化的方案。</p><h3 id="大-key-和热-key-的定义" tabindex="-1"><a class="header-anchor" href="#大-key-和热-key-的定义"><span>大 Key 和热 Key 的定义</span></a></h3><table><thead><tr><th style="text-align:left;">名词</th><th style="text-align:left;">解释</th></tr></thead><tbody><tr><td style="text-align:left;">大Key</td><td style="text-align:left;">通常以 Key 的大小和 Key 中成员的数量来综合判定，例如：<br>Key 本身的数据量过大：一个 String 类型的 Key，它的值为 5 MB。<br>Key 中的成员数过多：一个 ZSET 类型的 Key，它的成员数量为 10,000 个。<br>Key 中成员的数据量过大：一个 Hash 类型的 Key，它的成员数量虽然只有 1,000 个但这些成员的 Value（值）总大小为 100 MB。</td></tr><tr><td style="text-align:left;">热Key</td><td style="text-align:left;">通常以其接收到的 Key 被请求频率来判定，例如：<br><strong>QPS 集中在特定的 Key</strong>：Redis 实例的总 QPS（每秒查询率）为 10,000，而其中一个 Key 的每秒访问量达到了7,000。<br><strong>带宽使用率集中在特定的 Key</strong>：对一个拥有上千个成员且总大小为 1 MB 的 HASH Key 每秒发送大量的**HGETALL **操作请求。<br><strong>CPU使用时间占比集中在特定的Key</strong>：对一个拥有数万个成员的 Key（ZSET类型）每秒发送大量的 <strong>ZRANGE</strong> 操作请求。</td></tr></tbody></table><blockquote><p><strong>说明</strong> 上述例子中的具体数值仅供参考，在实际业务中，您需要根据Redis的实际业务场景进行综合判断。</p></blockquote><h3 id="大-key-和热-key-引发的问题" tabindex="-1"><a class="header-anchor" href="#大-key-和热-key-引发的问题"><span>大 Key 和热 Key 引发的问题</span></a></h3><table><thead><tr><th style="text-align:left;">类别</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">大Key</td><td style="text-align:left;">1、客户端执行命令的时长变慢。<br>2、Redis 内存达到 <strong>maxmemory</strong> 参数定义的上限引发操作阻塞或重要的 Key 被逐出，甚至引发内存溢出。<br>3、集群架构下，某个数据分片的内存使用率远超其他数据分片，无法使数据分片的内存资源达到均衡。<br>4、对大 Key 执行读请求，会使 Redis 实例的带宽使用率被占满，导致自身服务变慢，同时易波及相关的服务。<br>5、对大 Key 执行删除操作，易造成主库较长时间的阻塞，进而可能引发同步中断或主从切换。</td></tr><tr><td style="text-align:left;">热Key</td><td style="text-align:left;">1、占用大量的 CPU 资源，影响其他请求并导致整体性能降低。<br>2、集群架构下，产生访问倾斜，即某个数据分片被大量访问，而其他数据分片处于空闲状态，可能引起该数据分片的连接数被耗尽，新的连接建立请求被拒绝等问题。<br>3、在抢购或秒杀场景下，可能因商品对应库存 Key 的请求量过大，超出 Redis 处理能力造成超卖。<br>4、热 Key 的请求压力数量超出 Redis 的承受能力易造成缓存击穿，即大量请求将被直接指向后端的存储层，导致存储访问量激增甚至宕机，从而影响其他业务。</td></tr></tbody></table><h3 id="大key和热key产生的原因" tabindex="-1"><a class="header-anchor" href="#大key和热key产生的原因"><span>大Key和热Key产生的原因</span></a></h3><p>未正确使用 Redis、业务规划不足、无效数据的堆积、访问量突增等都会产生大 Key 与热 Key，如：</p><ul><li>大 key <ul><li>在不适用的场景下使用 Redis，易造成 Key 的 value 过大，如使用 String 类型的 Key 存放大体积二进制文件型数据；</li><li>业务上线前规划设计不足，没有对 Key 中的成员进行合理的拆分，造成个别 Key 中的成员数量过多；</li><li>未定期清理无效数据，造成如 HASH 类型 Key 中的成员持续不断地增加；</li><li>使用 LIST 类型 Key 的业务消费侧发生代码故障，造成对应 Key 的成员只增不减。</li></ul></li><li>热 key <ul><li>预期外的访问量陡增，如突然出现的爆款商品、访问量暴涨的热点新闻、直播间某主播搞活动带来的大量刷屏点赞、游戏中某区域发生多个工会之间的战斗涉及大量玩家等。</li></ul></li></ul><h3 id="快速找出大-key-和热-key" tabindex="-1"><a class="header-anchor" href="#快速找出大-key-和热-key"><span>快速找出大 Key 和热 Key</span></a></h3><p>Redis 提供多种方案帮助您轻松找出大 Key 与热 Key。</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">优缺点</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://help.aliyun.com/document_detail/279446.htm#task-2096542" target="_blank" rel="noopener noreferrer">实时Top Key统计</a>（推荐）<br>阿里云的<br><strong>它这其实是代理层做收集做的</strong></td><td style="text-align:left;">优点：准确性高、对性能几乎无影响。<br>缺点：展示的 Key 数量有一定限制，但能满足常规场景下的需求。</td><td style="text-align:left;">可实时展示实例中的大 Key 和热 Key 信息，同时支持查看 4 天内大 Key 和热 Key 的历史信息。该功能可帮助您掌握 Key 在内存中的占用、Key 的访问频次等信息，溯源分析问题，为您的优化操作提供数据支持。</td></tr><tr><td style="text-align:left;"><a href="https://help.aliyun.com/document_detail/102093.htm#concept-ufz-byl-jgb" target="_blank" rel="noopener noreferrer">离线全量Key分析</a><br>阿里云的</td><td style="text-align:left;">优点：可对历史备份数据进行分析，对线上服务无影响。缺点：时效性差，RDB文件较大时耗时较长。</td><td style="text-align:left;">对 Redis 的 RDB 备份文件进行定制化的分析，帮助您发现实例中的大Key，掌握 Key 在内存中的占用和分布、Key 过期时间等信息，为您的优化操作提供数据支持，帮助您避免因 Key倾斜引发的内存不足、性能下降等问题。</td></tr><tr><td style="text-align:left;">通过 redis-cli 的 <strong>bigkeys</strong> 和<strong>hotkeys</strong> 参数查找大 Key 和热 Key</td><td style="text-align:left;">优点：方便、快速、安全。<br>缺点：分析结果不可定制化，准确性与时效性差。</td><td style="text-align:left;">Redis 提供了 <strong>bigkeys</strong> 参数能够使 redis-cli 以遍历的方式分析 Redis 实例中的所有Key，并返回 Key 的整体统计信息与每个数据类型中 Top1 的大 Key，<strong>bigkeys <strong>仅能分析并输入六种数据类型（STRING、LIST、HASH、SET、ZSET、STREAM），命令示例为<code>redis-cli -h &lt;host&gt; -a &lt;password&gt; --bigkeys</code>。<br><strong>说明</strong> 若您只需要分析 STRING 类型的大 key 或是找出成员数量超过 10 个的HASH Key，则</strong>bigkeys</strong>参数无法直接实现该类需求。同时，自Redis 4.0版本起提供了 <strong>hotkeys</strong> 参数，可以快速帮您找出业务中的热 Key，具体操作，请参见<a href="https://help.aliyun.com/document_detail/101108.htm#concept-pw3-snd-ggb" target="_blank" rel="noopener noreferrer">通过redis-cli的hotkeys参数查找热Key</a>。</td></tr><tr><td style="text-align:left;">通过 Redis 内置命令对目标Key 进行分析</td><td style="text-align:left;">优点：方便、对线上服务影响小。<br>缺点：返回的Key 序列化长度并不等同于它在内存空间中的真实长度，因此不够准确，仅可作为参考。</td><td style="text-align:left;">对不同数据类型的目标Key，分别通过如下风险较低的命令进行分析，来判断目标 Key 是否符合大 Key 判定标准。<br>STRING 类型：执行<strong>STRLEN</strong>命令，返回对应 Key 的 value 的字节数。<br>LIST类型：执行 <strong>LLEN</strong> 命令，返回对应 Key 的列表长度。<br>HASH类型：执行 <strong>HLEN</strong> 命令，返回对应 Key 的成员数量。<br>SET类型：执行 <strong>SCARD</strong> 命令，返回对应 Key 的成员数量。<br>ZSET类型：执行 <strong>ZCARD</strong> 命令，返回对应 Key 的成员数量。<br>STREAM类型：执行 <strong>XLEN</strong> 命令，返回对应 Key 的成员数量。<br><strong>说明</strong> <strong>DEBUG OBJECT</strong>与<strong>MEMORY USAGE</strong>命令在执行时需占用较多资源，且时间复杂度为 O(N)，有阻塞 Redis 实例的风险，不建议使用。</td></tr><tr><td style="text-align:left;">通过业务层定位热 Key</td><td style="text-align:left;">优点：可准确并及时地定位热 Key。<br>缺点：业务代码复杂度的增加，同时可能会降低一些性能。</td><td style="text-align:left;"><strong>通过在业务层增加相应的代码对 Redis 的访问进行记录并异步汇总分析。</strong><br>例如改造 jedis 客户端，在每个命令操作记录下来，用来分析热 key。</td></tr><tr><td style="text-align:left;">通过 redis-rdb-tools 工具以定制化方式找出大Key</td><td style="text-align:left;">优点：支持定制化分析，对线上服务无影响。<br>缺点：时效性差，RDB文件较大时耗时较长。</td><td style="text-align:left;"><a href="https://github.com/sripathikrishnan/redis-rdb-tools?spm=a2c4g.11186623.0.0.27ed6cc9yjBefB" target="_blank" rel="noopener noreferrer">Redis-rdb-tools</a>是通过Python编写，支持定制化分析 Redis RDB 快照文件的开源工具。您可以根据您的精细化需求，全面地分析 Redis 实例中所有Key 的内存占用情况，同时也支持灵活地分析查询。</td></tr><tr><td style="text-align:left;">通过<strong>MONITOR</strong>命令找出热Key</td><td style="text-align:left;">优点：方便、安全。<br>缺点：会占用CPU、内存、网络资源，时效性与准确性较差。</td><td style="text-align:left;">Redis 的 <strong>MONITOR</strong> 命令能够忠实地打印 Redis 中的所有请求，包括时间信息、Client信息、命令以及 Key 信息。在发生紧急情况时，可以通过短暂执行 <strong>MONITOR</strong> 命令并将返回信息输入至文件，在关闭 <strong>MONITOR</strong> 命令后，对文件中请求进行归类分析，找出这段时间中的热 Key。<br><strong>说明</strong> 由于 <strong>MONITOR</strong> 命令对 Redis 实例性能消耗较大，非特殊情况不推荐使用 <strong>MONITOR</strong> 命令。</td></tr></tbody></table><h3 id="优化大-key" tabindex="-1"><a class="header-anchor" href="#优化大-key"><span>优化大 key</span></a></h3><ul><li><p><strong>对大 Key 进行拆分</strong></p><ul><li>例如将含有数万成员的一个 HASH Key 拆分为多个 HASH Key，并确保每个 Key 的成员数量在合理范围。在 Redis 集群架构中，拆分大 Key 能对数据分片间的内存平衡起到显著作用。</li></ul></li><li><p><strong>对大 Key 进行清理</strong>：将不适用 Redis 能力的数据存至其它存储，并在 Redis 中删除此类数据。</p><ul><li>Redis 4.0及之后版本：您可以通过 <strong>UNLINK</strong> 命令安全地删除大 Key 甚至特大 Key，该命令能够以非阻塞的方式，逐步地清理传入的Key。</li><li>Redis 4.0之前的版本：建议先通过 <strong>SCAN</strong> 命令读取部分数据，然后进行删除，避免一次性删除大量 key 导致 Redis阻塞。</li></ul></li><li><p>监控 Redis 的内存水位，报警</p><ul><li>您可以<strong>通过监控系统设置合理的 Redis 内存报警阈值进行提醒</strong>，例如 Redis 内存使用率超过 70%、Redis 的内存在 1 小时内增长率超过 20% 等。通过此类监控手段，可以提前规避许多问题，例如 LIST 数据类型的消费程序故障造成对应 Key 的列表数量持续增长，将告警转变为预警从而避免故障的发生。</li></ul></li><li><p>对过期数据进行定期清理</p><p>堆积大量过期数据会造成大 Key 的产生，例如在 HASH 数据类型中以增量的形式不断写入大量数据而忽略了数据的时效性。可以通过定时任务的方式对失效数据进行清理。</p><p><strong>说明</strong> 在清理 HASH 数据时，建议通过<strong>HSCAN</strong>命令配合 <strong>HDEL</strong> 命令对失效数据进行清理，避免清理大量数据造成 Redis阻塞。</p></li></ul><h3 id="优化热-key" tabindex="-1"><a class="header-anchor" href="#优化热-key"><span>优化热 key</span></a></h3><ul><li><p><strong>在 Redis 集群架构中对热 Key 进行复制</strong></p><p>在 Redis 集群架构中，由于热 Key 的迁移粒度问题，无法将请求分散至其他数据分片，导致单个数据分片的压力无法下降。此时，可以将对应热 Key 进行复制并迁移至其他数据分片，例如将热 Key foo 复制出 3 个内容完全一样的 Key 并名为 foo2、foo3、foo4，将这三个 Key 迁移到其他数据分片来解决单个数据分片的热 Key 压力。</p><blockquote><p><strong>说明</strong> 该方案的缺点在于需要联动修改代码，同时带来了数据一致性的挑战（由原来更新一个Key演变为需要更新多个Key），仅建议该方案用来解决临时棘手的问题。</p></blockquote></li><li><p><strong>使用读写分离架构</strong></p><p>如果热 Key 的产生来自于读请求，您可以将实例改造成读写分离架构来降低每个数据分片的读请求压力，甚至可以不断地增加从节点。但是读写分离架构在增加业务代码复杂度的同时，也会增加 Redis 集群架构复杂度。不仅要为多个从节点提供转发层（如Proxy，LVS等）来实现负载均衡，还要考虑从节点数量显著增加后带来故障率增加的问题。Redis 集群架构变更会为监控、运维、故障处理带来了更大的挑战。</p><blockquote><p><strong>说明</strong> 读写分离架构同样存在缺点，在请求量极大的场景下，读写分离架构会产生不可避免的延迟，此时会有读取到脏数据的问题。因此，在读、写压力都较大且对数据一致性要求很高的场景下，读写分离架构并不是最优方案。</p></blockquote></li></ul><h2 id="redis-性能边界" tabindex="-1"><a class="header-anchor" href="#redis-性能边界"><span>redis 性能边界</span></a></h2><img src="`+p+'" alt="Redis性能边界" style="zoom:75%;"><table><thead><tr><th style="text-align:left;">资源类别</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">计算资源</td><td style="text-align:left;">使用通配符、Lua 并发、1 对多的 PUBSUB、热点 Key 等会大量消耗计算资源，<a href="https://help.aliyun.com/document_detail/52228.htm#concept-tds-4mm-tdb" target="_blank" rel="noopener noreferrer">集群架构</a>下还会导致访问倾斜，无法有效利用所数据分片。</td></tr><tr><td style="text-align:left;">存储资源</td><td style="text-align:left;">Streaming 慢消费、大 Ke y等会占用大量存储资源，<a href="https://help.aliyun.com/document_detail/52228.htm#concept-tds-4mm-tdb" target="_blank" rel="noopener noreferrer">集群架构</a>下还会导致数据倾斜，无法有效利用所有数据分片。</td></tr><tr><td style="text-align:left;">网络资源</td><td style="text-align:left;">扫描全库（<strong>KEYS</strong>命令）、大 Value、大 Key 的范围查询（如 <strong>HGETALL</strong> 命令）等会消耗大量的网络资源，且极易引发线程阻塞。<br><strong>注意</strong> Redis 的高并发能力不等同于高吞吐能力，例如将大 Value 存在 Redis 里以期望提升访问性能，此类场景往往不会有特别大的收益，反而会影响 Redis 整体的服务能力。</td></tr></tbody></table><h2 id="业务部署规范" tabindex="-1"><a class="header-anchor" href="#业务部署规范"><span>业务部署规范</span></a></h2><p><strong>高速缓存</strong>：将 Redis 作为高速缓存使用，<strong>常见的架构为 应用+高速缓存+持久化存储</strong>，可为后端的 MySQL 缓解读写压力，<strong>侧重关注 QPS 和延时能力，对数据可靠性要求不高</strong>；</p><p><strong>内存数据库</strong>：直接将 Redis 数据库作为持久化存储，可以将目前流程的 应用+高速缓存+持久化存储，演进为更加简洁的 <strong>应用 + 内存数据库的架构模型，侧重关注数据可靠性和持久化能力，同时兼顾 QPS 和延时能力</strong>；</p><table><thead><tr><th style="text-align:left;">重要程度</th><th style="text-align:left;">规范</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">★★★★★</td><td style="text-align:left;">确定使用场景为 <strong>高速缓存</strong> 或 <strong>内存数据库</strong>。</td><td style="text-align:left;">高速缓存：建议关闭 AOF以降低开销，同时，由于数据可能会被淘汰，业务设计上避免强依赖缓存中的数据。例如 Redis 被写满后，会触发数据淘汰策略以挪移出空间给新的数据写入，根据业务的写入量会相应地导致延迟升高。</td></tr><tr><td style="text-align:left;">★★★★★</td><td style="text-align:left;">就近部署业务，例如将业务部署在同一个专有网络VPC下的ECS实例中。</td><td style="text-align:left;">Redis 具备极强的性能，如果部署位置过远（例如 业务服务器 与 Redis 实例通过公网连接），网络延迟将极大影响读写性能。</td></tr><tr><td style="text-align:left;">★★★★☆</td><td style="text-align:left;">为每个业务提供单独的 Redis 实例。</td><td style="text-align:left;">避免业务混用，尤其需要避免将同一 Redis 实例同时用作高速缓存和内存数据库业务。带来的影响例如针对某个业务淘汰策略设置、产生的慢请求或执行 <strong>FLUSHDB</strong> 命令影响将扩散至其他业务。</td></tr><tr><td style="text-align:left;">★★★★☆</td><td style="text-align:left;">设置合理的过期淘汰策略。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">★★★☆☆</td><td style="text-align:left;">合理控制压测的数据和压测时间。</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="key-设计规范-重要" tabindex="-1"><a class="header-anchor" href="#key-设计规范-重要"><span>Key 设计规范（重要）</span></a></h2><table><thead><tr><th style="text-align:left;">重要程度</th><th style="text-align:left;">规范</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">★★★★★</td><td style="text-align:left;">设计合理的 Key 中 Value 的大小，推荐小于10 KB。</td><td style="text-align:left;">过大的 Value 会引发数据倾斜、热点 Key、实例流量或 CPU 性能被占满等问题，应从设计源头上避免此类问题带来的影响。</td></tr><tr><td style="text-align:left;">★★★★★</td><td style="text-align:left;">设计合理的 Key 名称与长度。</td><td style="text-align:left;"><strong>Key名称</strong>：<br>1、使用可读字符串作为 Key 名，如果使用 Key 名拼接库、表和字段名时，推荐使用英文冒号（:）分隔。例如<code>project:user:001</code>。<br>2、在能完整描述业务的前提下，尽量简化 Key 名的长度，例如<code>username</code>可简化为<code>u</code>。<br>3、由于大括号（{}）为 Redis 的 hash tag 语义，如果使用的是集群架构的实例，Key 名称需要正确地使用大括号避免引发数据倾斜 ，更多信息，请参见<a href="https://redis.io/topics/cluster-spec#keys-hash-tags" target="_blank" rel="noopener noreferrer">keys-hash-tags</a>。<br>4、<strong>说明</strong> 集群架构下执行同时操作多个 Key 的命令时（例如<strong>RENAME</strong>命令），如果被操作的 Key 未使用 hash tag 让其处于相同的数据分片，则命令无法正常执行。<br><br><strong>长度</strong>：推荐 Key 名的长度不超过 128 字节（越短越好）。</td></tr><tr><td style="text-align:left;">★★★★★</td><td style="text-align:left;">对于支持子 Key 的复杂数据结构，应避免一个 Key 中包含过多的子 Key（推荐低1,000）。<br><br><strong>说明</strong> 常见的复杂数据结构例如 Hash、Set、Zset、Geo、Stream</td><td style="text-align:left;">由于某些命令（例如<strong>HGETALL</strong>）的时间复杂度直接与 Key 中的子Key数量相关。如果频繁执行时间复杂度为 <strong>O(N)</strong> 及以上的命令，且 Key中的子 Key 数量过多容易引发慢请求、数据倾斜或热点 Key 问题。</td></tr><tr><td style="text-align:left;">★★★★☆</td><td style="text-align:left;">推荐使用串行化方法将 Value转变为可读的结构。</td><td style="text-align:left;">由于编程语言的字节码随着版本可能会变化，如果存储裸对象（例如Java Object、C#对象）会导致整个软件栈升级困难，推荐使用串行化方法将 Value 变成可读的结构。</td></tr></tbody></table><h2 id="命令使用规范" tabindex="-1"><a class="header-anchor" href="#命令使用规范"><span>命令使用规范</span></a></h2><table><thead><tr><th style="text-align:left;">重要程度</th><th style="text-align:left;">规范</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">★★★★★</td><td style="text-align:left;">避免执行范围查询（例如<strong>KEYS *</strong>），使用多次单点查询或 <strong>SCAN</strong> 命令来获取延迟优势。</td><td style="text-align:left;">执行范围查询可能导致服务发生抖动、引发慢请求或产生阻塞。</td></tr><tr><td style="text-align:left;">★★★★★</td><td style="text-align:left;">避免使用Lua脚本</td><td style="text-align:left;">Lua 脚本会占用较多的计算和内存资源，且无法被多线程加速，过于复杂或不合理的 Lua 脚本可能导致资源被占满的情况。</td></tr><tr><td style="text-align:left;">★★★★☆</td><td style="text-align:left;">合理使用管道（pipeline）降低链路的往返时延RTT（Round-trip time）。</td><td style="text-align:left;">如果有多个操作命令需要被迅速提交至服务器端，且客户端不依赖每个操作返回的结果，那么可以通过管道来作为优化性能的批处理工具，<br>注意事项如下：<br>1、管道执行期间客户端将独占与服务器端的连接，推荐为管道单独建立一个连接，将其与常规操作分离。<br>2、<strong>每个管道应包含合理的命令数量（不超过100个）</strong>。</td></tr><tr><td style="text-align:left;">★★★★☆</td><td style="text-align:left;">正确使用Redis社区版命令支持</td><td style="text-align:left;">使用事务（Transaction）时，需要注意其限制：<br>1、事务本身没有回滚条件。对于集群架构的实例，需要使用hash tag确保命令所要操作的Key都分布在1个Hash槽中，同时还需要避免hash tag带来的存储倾斜问题。<br>2、避免在Lua脚本中封装事务命令，可能因编译加载消耗较多的计算资源。</td></tr><tr><td style="text-align:left;">★★★★☆</td><td style="text-align:left;">避免使用Redis社区版命令支持执行大量的消息分发工作。</td><td style="text-align:left;">由于 Pub 和 Sub 不支持数据持久化，且不支持 ACK 应答机制无法实现数据可靠性，当执行大量消息分发工作时（例如订阅客户端数量超过 100且 Value 超过 1 KB），订阅客户端可能因服务端资源被占满而无法接收到数据。</td></tr></tbody></table><h2 id="发布订阅-todo-kwok" tabindex="-1"><a class="header-anchor" href="#发布订阅-todo-kwok"><span>发布订阅 TODO-KWOK</span></a></h2><h2 id="管道传输" tabindex="-1"><a class="header-anchor" href="#管道传输"><span>管道传输</span></a></h2><p>客户端和服务端是通过网络连接的，网络连接可能很快，也可能很慢。无论网络延迟如何，<strong>数据包从客户端传输到服务器，再从服务器写到响应信息返回到客户端都需要时间</strong>。</p><p>这个时间就叫做 <strong>RTT（Round Trip Time</strong>），当客户端需要连续执行许多请求时，多次网络 IO 很影响系统的性能；假如 Redis 服务器每秒能够处理 100k 个请求，如果 RTT 是 250 毫秒（网络连接很慢），那么我们每秒最多也只能处理 4 个请求。</p><p>Redis Pipeline 是一种通过一次发出多个命令而无需等待对每个命令的响应来提高性能的技术。大多数 Redis 的客户端都支持 Pipeline。<strong>客户端发送一个命令后无需等待执行结果，会继续发送其他命令；在全部请求发送完毕后，客户端关闭请求，开始接收响应，收到执行结果后再与之前发送的命令按顺序进行一一匹配</strong>。在Pipeline模式的具体实现中，大部分Redis客户端采用批处理的方式，即一次发送多个命令，在接收完所有命令执行结果后再返回给上层业务。</p><img src="'+o+'" alt="image-20231022111846907" style="zoom:67%;"><p>通过使用 Pipeline ，我们可以将执行多个命令所需的网络通信次数从原来的 N 次降低为 1 次，这样可以大幅度减少程序在网络通信方面的耗时，提高程序的执行效率；</p><blockquote><p>虽然 Redis 服务器并不会限制客户端在 Pipeline 中包含的命令数量，但是却会为客户端的输入缓冲区设置默认值为 1 GB 的上限，当客户端发送的数据量超过这个限制时，Redis 服务器将会强制关闭该客户端。而且当客户端使用 Pipeline 发送命令时，服务器将被迫使用内存对响应进行排队。因此，<strong>需要使用 Pipeline 发送大量命令，最好将它们分批发送，每批包含一个合理的数量</strong>。例如 每批 10k 命令，读取回复，然后再次发送另外 10k 命令，依此类推。这两种操作的速度将几乎相同，但<strong>使用的额外内存</strong>最多为将这些 10k 命令的回复排队所需的内存量。</p></blockquote><p>使用 redis 管道的注意事项：</p><ul><li><p><strong>不要在 Pipeline 中使用太多的命令；</strong></p><p>但是如果一次性发送的命令过多，可能会导致网络阻塞，反而影响性能。</p></li><li><p><strong>Pipeline 不能保证原子性。</strong></p><p>Pipeline 模式只是将客户端发送命令的方式改为发送批量命令，而服务端在处理批量命令的数据流时，仍然是解析出多个单命令并按顺序执行，各个命令相互独立，即服务端仍有可能在该过程中执行其他客户端的命令。如需保证原子性，请使用事务或 Lua 脚本。</p></li><li><p><strong>Pipeline 中的命令可能会失败。</strong></p><p>在使用 Pipeline 时，如果某个命令执行失败，后续的命令仍然会继续执行，因此需要在代码中对命令执行结果进行判断，并根据实际情况处理；</p></li><li><p><strong>Pipeline 不支持事务，若 Pipeline 执行过程中发生错误，不支持回滚。</strong></p><p>Pipeline 没有事务的特性，如待执行命令的前后存在依赖关系，请勿使用 Pipeline。</p></li><li><p>集群架构代理模式、集群架构直连模式以及读写分离架构实例均支持 Pipeline，但由于<strong>集群架构不支持在一个命令中访问跨 Slot 的 Key，因此在使用 Pipeline 时，访问跨 Slot 的 Key 也会报错</strong>。</p><p>例如在集群架构直连模式访问的 Key 不在当前数据节点，数据节点会返回 <code>-MOVE</code> 错误，但由于 Pipeline 模式时客户端无法立即处理错误，可能会导致业务异常。建议集群架构实例在使用 Pipeline 时需确保访问的 Key 都在同一数据节点。</p></li></ul><h2 id="事务处理" tabindex="-1"><a class="header-anchor" href="#事务处理"><span>事务处理</span></a></h2><h3 id="redis-事务" tabindex="-1"><a class="header-anchor" href="#redis-事务"><span>Redis 事务</span></a></h3><p>Redis 通过 MULTI、EXEC、WATCH 等命令来实现事务功能。</p><p>事务提供了一种将多个命令请求打包，然后一次性、按顺序地执行多个命令的机制，并且在事务执行期间，服务器不会中断事务而改去执行其他客户端的命令请求，它会将事务中的所有命令都执行完毕，然后才去处理其他客户端的命令请求。</p><p>因为事务在执行时会独占服务器，所以用户应该避免在事务中执行过多命令，更不要将一些需要进行大量计算的命令放入事务中，以免造成服务阻塞。</p><h3 id="redis-事务相关的命令" tabindex="-1"><a class="header-anchor" href="#redis-事务相关的命令"><span>Redis 事务相关的命令</span></a></h3><table><thead><tr><th>命令</th><th>简单含义</th><th>具体含义</th></tr></thead><tbody><tr><td>MULTI</td><td>开启事务</td><td>开启事务，当一个客户端执行 MULTI 命令后，将执行该命令的客户端从非事务状态切换至事务状态。这时候所有除开 EXEC、DISCARD、WATCH、MULTI 这几个命令，其他对数据库操作命令都不会立即执行，而是按顺序放入一个事务队列中</td></tr><tr><td>EXEC</td><td>执行事务中的命令</td><td>遍历这个客户端的事务队列，执行队列中保存的所有命令，最后将执行命令所得的结果全部返回给客户端。并将连接恢复为正常状态</td></tr><tr><td>DISCARD</td><td>取消执行事务</td><td>这个客户端的事务队列，也就是移除所有排队的命令，并将连接恢复为正常状态</td></tr><tr><td>WATCH</td><td>标记要监视的键，用于实现乐观事务</td><td>WATCH 命令对键进行监视。客户端可以通过执行 WATCH 命令，要求服务器对一个或多个数据库键进行监视，如果在客户端尝试执行事务之前，这些键的值发生了变化，那么服务器将拒绝执行客户端发送的事务，并返回一个空值。</td></tr><tr><td>UNWATCH</td><td>取消监视给定的键</td><td>客户端可以通过 UNWATCH 命令，取消对所有键的监视。除了显示地执行 UNWATCH 命令之外，使用 EXEC 命令执行事务和使用 DISCARD 命令取消事务，同样会导致客户端撤销对所有键的监视，这是因为这两个命令在执行之后都会隐式调用 UNWATCH 命令</td></tr></tbody></table><h2 id="jedispool-资源池优化-todo-kwok" tabindex="-1"><a class="header-anchor" href="#jedispool-资源池优化-todo-kwok"><span>JedisPool 资源池优化 TODO-KWOK</span></a></h2><blockquote><p><a href="https://help.aliyun.com/zh/redis/use-cases/jedispool-optimization?spm=a2c4g.11186623.0.0.379f6362zUXM0k" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/zh/redis/use-cases/jedispool-optimization?spm=a2c4g.11186623.0.0.379f6362zUXM0k</a></p></blockquote><h2 id="lua-脚本规范和常见报错-todo-kwok" tabindex="-1"><a class="header-anchor" href="#lua-脚本规范和常见报错-todo-kwok"><span>Lua 脚本规范和常见报错 TODO-KWOK</span></a></h2><blockquote><p><a href="https://help.aliyun.com/zh/redis/support/usage-of-lua-scripts?spm=a2c4g.11186623.0.0.43331387yIAxmw" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/zh/redis/support/usage-of-lua-scripts?spm=a2c4g.11186623.0.0.43331387yIAxmw</a></p></blockquote>',322)]))}const u=e(h,[["render",g]]),b=JSON.parse('{"path":"/interviewQA/Redis%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html","title":"Redis相关问题","lang":"en-US","frontmatter":{"title":"Redis相关问题","description":"Redis 为什么这么快？ （ 重要） 基于内存，数据存在内存中。Redis 为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以 redis 具有快速和数据持久化的特征。如果不将数据放在内存中，磁盘 I/O 速度为严重影响 redis 的性能。 如果设置了最大使用的内存，则数据已有记录数达到内存限值后不能继续插入新值。 数据...","head":[["meta",{"property":"og:url","content":"https://blog.guosgbin.cn/interviewQA/Redis%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:title","content":"Redis相关问题"}],["meta",{"property":"og:description","content":"Redis 为什么这么快？ （ 重要） 基于内存，数据存在内存中。Redis 为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以 redis 具有快速和数据持久化的特征。如果不将数据放在内存中，磁盘 I/O 速度为严重影响 redis 的性能。 如果设置了最大使用的内存，则数据已有记录数达到内存限值后不能继续插入新值。 数据..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-03T07:07:29.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-03T07:07:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis相关问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-03T07:07:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"超威蓝猫 Dylan Kwok\\",\\"url\\":\\"\\",\\"email\\":\\"guosgbin@163.com\\"}]}"]]},"git":{"createdTime":1743664049000,"updatedTime":1743664049000,"contributors":[{"name":"Dylan Kwok","username":"","email":"guosgbin@163.com","commits":1}]},"readingTime":{"minutes":81.25,"words":24374},"filePathRelative":"interviewQA/Redis相关问题.md","localizedDate":"April 3, 2025","autoDesc":true}');export{u as comp,b as data};
